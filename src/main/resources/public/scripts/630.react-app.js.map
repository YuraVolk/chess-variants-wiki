{"version":3,"file":"630.react-app.js","mappings":"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","sources":["webpack://spring-react-app/./src/main/client/fonts/chessGlyphIndex.ts","webpack://spring-react-app/./src/main/client/ts/baseTypes.ts","webpack://spring-react-app/./src/main/client/ts/interfaces/Colors.ts","webpack://spring-react-app/./src/main/client/ts/logic/BaseInterfaces.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/Board/BoardMoveValidator.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/MoveTree/MoveTreeValidator.ts","webpack://spring-react-app/./src/main/client/ts/logic/index/GameBoardWorker.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/PieceControl/PieceControlBuilder.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/Board/Board.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/Board/BoardInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/FENData/FENOptions/FENOptions.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/FENData/FENData.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/FENData/FENDataInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/FENData/FENOptions/FENOptionsTags.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/FENData/FENOptions/FENOptionsTagsInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/GameInformation/GameData.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/GameInformation/GameUnits/GameUnits.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/GameInformation/GameUnits/PieceString.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/MoveTree/MoveNotationStringifier.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/MoveTree/MoveTree.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/MoveTree/MoveTreeInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/PieceControl/PieceControl.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/PieceControl/PieceControlDeclarations.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/PieceControl/PieceControlInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRule.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/AllowPassing.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/AlternativeTeams.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/BarePieceRule.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/Blindfold.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/CaptureTheKing.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/Chess960.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/Crazyhouse.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/DuckChess.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/FogOfWar.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/ForcedCapture.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/GameMetadataRules.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/Ghostboard.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/ParadigmChess30.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/PiecesFaceCenter.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/SeirawanSetup.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/SelfCheck.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/SetupChess.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/Taboo.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/Algorithms/ComfuterEvaluation.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/Algorithms/ComfuterEvaluationExtensions.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/Algorithms/MixedAlgorithms.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/Algorithms/RandomEvaluation.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/Algorithms/RandomEvaluationExtensions.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/BotInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/InsufficientMaterialChecker.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/InsufficientMaterialConstructor.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/PieceMedianCounter.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/StateSerializer.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/Utilities.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/Atomic.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/DeadKingWalking.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/EnPassant.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/FatalCapture.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/FiftyMoveRule.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/Giveaway.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/KingOfTheHill.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/NCheck.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/OppositeMultiplier.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/OppositeSideCastling.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/PiecesGoToBanks.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/PlayForMate.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/PointsForMate.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/StalemateOptions.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/Takeover.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/ThreefoldRepetition.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/AnyCapture.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/PromoteTo.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/PromotionRank.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/RoyalsCannotCapture.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/Sideways.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/Stonewall.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/Torpedo.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleSetup.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/Moves/SerializePGNMoves.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/TagLogic/GameMetadataTags.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/TagLogic/VariantRulesTag.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/TagInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/InputOutputProcessing.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/Moves/ParsePGNMoves.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/TagLogic/FENDataTag.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/Utils.ts","webpack://spring-react-app/./src/main/client/ts/utils/ArrayUtils.ts","webpack://spring-react-app/./src/main/client/ts/utils/NumberUtils.ts","webpack://spring-react-app/./src/main/client/ts/utils/ObjectUtils.ts","webpack://spring-react-app/./src/main/client/ts/utils/StringFormatUtils.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/ sync \\.ts$"],"sourcesContent":["export const chessGlyphIndex = {\n    doubleBackwardArrow: \"!\",\n    downloadIcon: '\"',\n    endBackwardArrow: \"#\",\n    forwardDoubleArrow: \"α\",\n    userSearch: \"$\",\n    userConnection: \"%\",\n    notAllowed: \"&\",\n    clock: \"'\",\n    extraInformation: \"(\",\n    authorshipNotice: \")\",\n    draw: \"+\",\n    backwardArrow: \",\",\n    userInformation: \"-\",\n    smallBackwardArrow: \"/\",\n    leaderBoard: \";\",\n    equal: \"=\",\n    downwardArrow: \"<\",\n    upperArrow: \">\",\n    endForwardArrow: \"@\",\n    urlAttached: \"A\",\n    crossMark: \"B\",\n    rightOutwardsArrow: \"C\",\n    hashtag: \"D\",\n    newspaper: \"E\",\n    twitter: \"F\",\n    checkMark: \"G\",\n    camera: \"H\",\n    alternativeLine: \"I\",\n    play: \"J\",\n    pause: \"K\",\n    reload: \"L\",\n    world: \"M\",\n    points: \"N\",\n    medal: \"O\",\n    soundOff: \"P\",\n    circleCrossMark: \"Q\",\n    steadyEvaluation: \"R\",\n    facebook: \"S\",\n    circle: \"T\",\n    soundOn: \"U\",\n    plus: \"V\",\n    openEye: \"W\",\n    copyToClipboard: \"X\",\n    wavingFlag: \"Y\",\n    editText: \"Z\",\n    fullArrowLeft: \"[\",\n    fullArrowRight: \"]\",\n    smallArrowForward: \"\\\\\",\n    goBackArrow: \"_\",\n    youtube: \"`\",\n    calendar: \"a\",\n    user: \"b\",\n    chat: \"c\",\n    lock: \"d\",\n    box: \"e\",\n    circularArrows: \"f\",\n    lightBulb: \"g\",\n    briefcase: \"h\",\n    board: \"i\",\n    knightArrows: \"j\",\n    newMessage: \"k\",\n    drawing: \"l\",\n    twoUsers: \"m\",\n    twoUsers2: \"n\",\n    openingBook: \"o\",\n    disclaimer: \"p\",\n    ringingBell: \"q\",\n    list: \"r\",\n    rookAndPawn: \"s\",\n    hamburgerList: \"t\",\n    mail: \"u\",\n    userExtraInformation: \"v\",\n    house: \"w\",\n    sheetAndPencil: \"x\",\n    openMail: \"y\",\n    chatBox: \"z\",\n    fullArrowDown: \"{\",\n    smallArrowUp: \"|\",\n    fullArrowUp: \"}\",\n    arrowIntoBox: \"¡\",\n    key: \"¢\",\n    file: \"£\",\n    books: \"¤\",\n    sharing: \"¥\",\n    userNotAllowed: \"¦\",\n    userCrossMark: \"§\",\n    questionMark: \"©\",\n    boardWithCircle: \"«\",\n    googlePlus: \"®\",\n    reset: \"°\",\n    reddit: \"±\",\n    openBook: \"´\",\n    userPlus: \"¶\",\n    cog: \"·\",\n    pin: \"»\",\n    suitcase: \"¼\",\n    mark: \"½\",\n    cake: \"¾\",\n    openLink: \"¿\",\n    bishopStroke: \"Ä\",\n    linkedin: \"Å\",\n    knight: \"Ç\",\n    threeCheck: \"Ë\",\n    chess960rapid: \"Ñ\",\n    connection: \"Õ\",\n    quotes: \"Ö\",\n    exit: \"×\",\n    crossedBinoculars: \"Þ\",\n    leaderBoardReversed: \"ß\",\n    bishopFull: \"ä\",\n    printer: \"å\",\n    verticalEvaluation: \"ç\",\n    t: \"ë\",\n    pawn: \"í\",\n    twoPawns: \"î\",\n    unrated: \"ð\",\n    elite: \"ñ\",\n    bug: \"õ\",\n    cpu: \"ö\",\n    forwardArrowCircle: \"÷\",\n    squareCrossMark: \"ü\",\n    android: \"þ\",\n    twoUsersPlus: \"ÿ\",\n    crossedArrows: \"Đ\",\n    king: \"Ā\",\n    kingFull: \"ā\",\n    bishop: \"Ă\",\n    twoFullRooks: \"ă\",\n    kingStrokes: \"Ą\",\n    fullKnight2: \"ą\",\n    chess960: \"Č\",\n    leaderBoardAscent: \"č\",\n    crazyhouse: \"Ď\",\n    checklist: \"ď\",\n    target: \"đ\",\n    pawnAndHalfRook: \"Ē\",\n    halfRookAndPawn: \"ē\",\n    knightStrokes: \"Ė\",\n    pawnLogo: \"Ę\",\n    queenFull: \"ę\",\n    exchange: \"Ě\",\n    userNext: \"Ğ\",\n    userPrevious: \"Ġ\",\n    compass: \"ġ\",\n    pawnStrokes: \"Ģ\",\n    rookStrokes: \"ģ\",\n    screenDisplays: \"Ħ\",\n    kingOfTheHill: \"Ī\",\n    antichess: \"ī\",\n    queen: \"Į\",\n    threePawns: \"į\",\n    queenStrokes: \"Ķ\",\n    rookSmallStrokes: \"Ļ\",\n    rookSmall: \"Ľ\",\n    bishopPair: \"Ł\",\n    rookPair: \"Ņ\",\n    knightPair: \"Ň\",\n    twoUsersSearch: \"Ŋ\",\n    shield: \"ŋ\",\n    kingSmall: \"Ō\",\n    bishopSmall: \"Ő\",\n    knightSmall: \"Ŗ\",\n    userNoConnection: \"Ř\",\n    userStream: \"v\",\n    queenAlternative: \"Ş\",\n    pawnAlternative: \"Š\",\n    threePawnsAlternative: \"Ţ\",\n    twoPawnsAlternative: \"Ť\",\n    rookAlternative: \"Ŧ\",\n    knightPairFull: \"Ż\",\n    bishopPairFull: \"Ž\",\n    addBoard: \"ˆ\",\n    diamond: \"Ͱ\",\n    scales: \"ͱ\",\n    pawn3d: \"Ͳ\",\n    userShieldPlus: \"ͳ\",\n    gold: \"Ͷ\",\n    ellipsis: \"Ώ\",\n    analysis: \"Δ\",\n    archive: \"Θ\",\n    arrowBottomIntoBox: \"Ξ\",\n    disclaimerEditor: \"Σ\",\n    sendTrophy: \"Υ\",\n    addCheckMark: \"Φ\",\n    checkMarkSquare: \"Ψ\",\n    squareStaircase: \"ά\",\n    arrowsUpBottom: \"έ\",\n    star: \"ή\",\n    verticalDash: \"ί\",\n    shieldCheckMark: \"β\",\n    top3: \"ε\",\n    addImage: \"ζ\",\n    chessStream: \"η\",\n    removeTrophy: \"κ\",\n    importantMail: \"λ\",\n    arrowLeave: \"μ\",\n    donut: \"ν\",\n    computerAnalysis: \"ξ\",\n    checkMarkSquareSmall: \"ο\",\n    diagonalExpandArrows: \"π\",\n    leaderBoardHorizontal: \"ρ\",\n    checkMarkAsCircle: \"χ\",\n    arrowFromBox: \"ϊ\",\n    boxArrowBottom: \"ό\",\n    boxArrowLeft: \"ύ\",\n    boxArrowRight: \"ώ\",\n    fourArrowsCentral: \"Ϙ\",\n    clashingSwords: \"τ\",\n    ratingOffset: \"υ\",\n    smilingFace: \"ς\",\n    fileCabinet: \"σ\",\n    editClock: \"ϙ\",\n    userShield: \"Ϛ\",\n    homeFilled: \"ϛ\",\n    paymentCard: \"Ϝ\",\n    fourArrowsOutwards: \"ϝ\",\n    puzzle: \"Ϟ\",\n    addPhoto: \"ϟ\",\n    arrowWallLeft: \"Ϡ\",\n    arrowWallRight: \"ϡ\",\n    boardConfiguration: \"Ϸ\",\n    fourBlocks: \"ϸ\",\n    sandglass: \"Ϻ\",\n    crown: \"ϻ\",\n    cloudUpload: \"Ẹ\",\n    webChatBox: \"ẹ\",\n    puzzleRush: \"Ẻ\",\n    knightHops: \"ẻ\",\n    instagram: \"ἀ\",\n    squarePlus: \"ἁ\",\n    squareMinus: \"ἂ\",\n    squareEqual: \"ἃ\",\n    square: \"ἄ\",\n    fireFull: \"ἅ\",\n    pawnRecycle: \"ἆ\",\n    noEngine: \"ἇ\",\n    google: \"Ἀ\",\n    fourPlayer: \"Ἁ\",\n    pieceMeal: \"Ἂ\",\n    arrowBoldUp: \"Ἃ\",\n    arrowBoldDown: \"Ἄ\",\n    blunder: \"Ἅ\",\n    mistake: \"Ἆ\",\n    videoChatBox: \"Ἇ\",\n    bonesCrossed: \"ἐ\",\n    displays: \"ἑ\",\n    arrowEnter: \"ἒ\",\n    newspaperHalf: \"ἓ\",\n    bookmark: \"ἔ\",\n    puzzleLarge: \"ἕ\",\n    movePawn: \"Ἐ\",\n    pawn3dLarge: \"Ἑ\",\n    sun: \"Ἒ\",\n    rapid: \"Ἓ\",\n    blitz: \"Ἔ\",\n    bullet: \"Ἕ\",\n    mortarboard: \"ἠ\",\n    laptop: \"ἡ\",\n    resetWidth: \"ἢ\",\n    pawnConnection: \"ἣ\",\n    copyToClipboardFromText: \"ἤ\",\n    fire: \"ἥ\",\n    crownSmall: \"ἦ\",\n    orderedList: \"ἧ\",\n    chess960daily: \"Ἠ\",\n    arrowWallBottom: \"Ἡ\",\n    pawn3dBold: \"Ἢ\",\n    plusInCircle: \"Ἣ\",\n    lightCorner: \"Ἤ\",\n    darkCorner: \"Ἥ\",\n    steepCurve: \"Ἦ\",\n    heart: \"Ἧ\",\n    checkMarkThin: \"ἰ\",\n    connectionDiagonal: \"ἱ\",\n    diadem: \"ἲ\",\n    plusMinus: \"ἳ\",\n    recycling: \"ἴ\",\n    metrics: \"ἵ\",\n    top1: \"ἶ\",\n    engineCheckMark: \"ἷ\",\n    wikipedia: \"Ἰ\",\n    tournament: \"Ἱ\",\n    houseConfiguration: \"Ἲ\",\n    computerHindsight: \"Ἳ\",\n    computerCheckMark: \"Ἴ\",\n    lightDarkTheme: \"Ἵ\",\n    whistlingBell: \"Ἶ\",\n    crossMarkCompact: \"Ἷ\",\n    eyeCrossed: \"ὀ\",\n    fide: \"ὁ\",\n    favorite: \"ὂ\",\n    tShirtPawn: \"ὃ\",\n    addSmile: \"ὄ\",\n    library: \"ὅ\",\n    discord: \"Ὀ\",\n    analysisCheckMark: \"Ὁ\",\n    versusComputer: \"Ὂ\",\n    dollarSign: \"Ὃ\",\n    bestMove: \"Ὄ\",\n    gift: \"Ὅ\",\n    evaluationLinear: \"ὐ\",\n    evaluationThrowaway: \"ὑ\",\n    evaluationEqual: \"ὒ\",\n    evaluationDead: \"ὓ\",\n    evaluationSharp: \"ὔ\",\n    evaluationPerplexing: \"ὕ\",\n    evaluationSmooth: \"ὖ\",\n    libraryAdd: \"ὗ\",\n    selfPartner: \"Ὑ\",\n    fourPlayerConfiguration: \"Ὓ\",\n    listDownFlow: \"Ὕ\",\n    puzzleBattle: \"Ὗ\",\n    hyperbullet: \"ὠ\",\n    gameLink: \"ὡ\",\n    gameStudy: \"ὢ\",\n    evaluationCrazy: \"ὣ\",\n    engine: \"ὤ\",\n    crossedSwordsInCircle: \"ὥ\",\n    hallmark: \"ὦ\",\n    like: \"ὧ\",\n    boardTwoPlayers: \"Ὠ\",\n    fourPlayerChess: \"Ὡ\",\n    variants: \"Ὢ\",\n    cloudUploadCompact: \"Ὣ\",\n    clockIncrement: \"Ὤ\",\n    videoCamera: \"Ὥ\",\n    inaccuracy: \"Ὧ\",\n    bot: \"ὰ\",\n    torpedo: \"ά\",\n    vk: \"ὲ\",\n    blindfold: \"έ\",\n    customSettings: \"ή\",\n    captureAnything: \"ὶ\",\n    pawnSideways: \"ί\",\n    noCastling: \"ὸ\",\n    fogOfWar: \"ό\",\n    automate: \"ὺ\",\n    atomic: \"ύ\",\n    pawnCounterfeit: \"ὼ\",\n    elephant: \"ώ\",\n    fullBlock: \"ᾀ\",\n    fourFullBlocks: \"ᾁ\",\n    nineFullBlocks: \"ᾂ\",\n    nineFullBlocksCrossed: \"ᾃ\",\n    hamburgerMenuCompact: \"ᾄ\",\n    listCompact: \"ᾅ\",\n    geoMark: \"ᾆ\",\n    crossedDonut: \"ᾇ\",\n    handshake: \"ᾈ\",\n    verified: \"ᾉ\",\n    sandglassRunningOut: \"ᾊ\",\n    rapidLowOnTime: \"ᾋ\",\n    tourneyBanner: \"ᾌ\",\n    noCloud: \"ᾍ\",\n    fork: \"ᾎ\",\n    donutTarget: \"ᾏ\",\n    newCalendarDay: \"ᾐ\",\n    cornerInfiltration: \"ᾑ\",\n    hastTagCompact: \"ᾒ\",\n    chatterbox: \"ᾓ\",\n    circleStar: \"ᾔ\",\n    targetPractice: \"ᾕ\",\n    pawnPromotion: \"ᾖ\",\n    flagProgression: \"ᾗ\",\n    pawnDoubleAttack: \"ᾘ\",\n    kingAndRook: \"ᾙ\",\n    specialMedal: \"ᾚ\",\n    pawnBanner: \"ᾛ\",\n    userSquare: \"ᾜ\",\n    verifiedCandidate: \"ᾝ\",\n    saveFile: \"ᾞ\",\n    duck: \"ᾟ\",\n    addBanner: \"ᾠ\",\n    qrCode: \"ᾡ\",\n    noAnalysis: \"ᾢ\",\n    dualPawn: \"ᾣ\",\n    gameEscape: \"ᾤ\",\n    tournamentCup: \"ᾥ\",\n    noExchanges: \"ᾦ\",\n    tikTok: \"ᾰ\",\n    pieChart: \"ᾱ\",\n    search: \"–\",\n    binoculars: \"—\",\n    largeBoard: \"’\",\n    exclamation: \"†\",\n    tournamentCupIcon: \"‡\",\n    trashBin: \"•\",\n    arrowForwardBoldCompact: \"…\",\n    giftDiamond: \"‹\",\n    filter: \"›\",\n    noChat: \"⁄\",\n    newSheet: \"€\",\n    xml: \"∞\",\n    blockUser: \"∫\",\n    facebookLike: \"≤\",\n    facebookDislike: \"≥\",\n    apple: \"◊\",\n    phone: \"\"\n};\n","export const verifyFunctionType = (func) => typeof func === \"function\";\nexport const createTuple = (val, length) => Array.from({ length }).fill(val);\nexport const createTupleFromCallback = (val, length) => Array.from({ length }, val);\nexport const verifyTupleType = (arr, length) => arr.length === length;\nexport function assertNonUndefined(data) {\n    if (data == null)\n        throw new Error(\"Expected the data above to be anything but null or undefined\");\n}\nexport function throwOnNever(arg) {\n    console.dir(arg);\n    throw new TypeError(`Unexpected argument that is supposed to be of type never`);\n}\nexport function importAll(r) {\n    r.keys().forEach(r);\n}\nexport function getEnumKeys(object) {\n    const resultingArray = [];\n    let key;\n    for (key in object)\n        resultingArray.push(key);\n    return resultingArray;\n}\n","import { throwOnNever, verifyTupleType } from \"../baseTypes\";\nconst hexColorRegex = /^#(?:[0-9a-fA-F]{3}){1,2}$/;\nexport const createHexColor = (color) => {\n    if (hexColorRegex.test(color)) {\n        return color;\n    }\n    else\n        throw new TypeError(\"The supplied hex color is not a hex color: \" + color);\n};\nexport const verifyHexColor = (color) => typeof color === \"string\";\nexport const validateHexColor = (color) => {\n    if (typeof color === \"string\") {\n        try {\n            createHexColor(color);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    else\n        return false;\n};\nexport const createRGBColor = (color) => {\n    if (color >= 0 || color <= 255) {\n        return color;\n    }\n    else\n        throw new TypeError(`The supplied RGB color value is not an RGB color value: ${color}`);\n};\nexport const wrapRGBColor = (color) => `rgb(${color.join(\",\")})`;\nexport const verifyRGBColor = (color) => Array.isArray(color);\nexport const validateRGBColor = (color) => {\n    if (Array.isArray(color) && verifyTupleType(color, 3) && color.every((c) => typeof c === \"number\")) {\n        try {\n            color.forEach((c) => createRGBColor(c));\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    else\n        return false;\n};\nexport const createHSLColor = (color) => {\n    if ((color.hue >= 0 || color.hue <= 359) &&\n        (color.saturation >= 0 || color.saturation <= 100) &&\n        (color.lightness >= 0 || color.lightness <= 100)) {\n        return color;\n    }\n    else\n        throw new TypeError(`The supplied HSL value is not an HSL color: \" + color`);\n};\nexport const wrapHSLColor = (color) => `hsl(${color.hue},${color.saturation}%,${color.lightness}%)`;\nexport const verifyHSLColor = (color) => typeof color === \"object\";\nexport const validateHSLColor = (color) => {\n    const verifyNumberRecord = (obj) => {\n        for (const key in obj) {\n            if (!Object.prototype.hasOwnProperty.call(obj, key))\n                continue;\n            if (typeof obj[key] !== \"number\")\n                return false;\n        }\n        return true;\n    };\n    if (typeof color === \"object\" && color && \"hue\" in color && \"saturation\" in color && \"lightness\" in color && verifyNumberRecord(color)) {\n        try {\n            createHSLColor(color);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    else\n        return false;\n};\nexport const wrapIndexedColor = (color) => {\n    if (verifyHexColor(color)) {\n        return color;\n    }\n    else if (verifyRGBColor(color)) {\n        return wrapRGBColor(color);\n    }\n    else if (verifyHSLColor(color)) {\n        return wrapHSLColor(color);\n    }\n    else {\n        return throwOnNever(color);\n    }\n};\nexport const validateIndexedColor = (color) => {\n    return validateHexColor(color) || validateRGBColor(color) || validateHSLColor(color);\n};\n","import { createTupleFromCallback } from \"../baseTypes\";\nimport { boardDimension } from \"./movegen/GameInformation/GameData\";\nexport const initializeBoardSquares = (baseValue) => createTupleFromCallback(() => createTupleFromCallback(baseValue, boardDimension), boardDimension);\nexport const isVerticalPlacement = (color) => color % 2 === 0;\nexport function getVerticalPlacementModulus(num) {\n    const result = num % 2;\n    if (result !== 0 && result !== 1)\n        throw new Error(`Invalid number passed: ${num}`);\n    return result;\n}\nexport function getHorizontalPlacementModulus(num) {\n    const result = num % 2 ^ 1;\n    if (result !== 0 && result !== 1)\n        throw new Error(`Invalid number passed: ${num}`);\n    return result;\n}\n","import { compareMoves, SpecialMove, verifyDroppingMove, verifyInternalMove, verifyStandardMove } from \"../MoveTree/MoveTreeInterface\";\nexport function validateBoardMove(board, move) {\n    let startingMoves;\n    const firstMove = move[0];\n    if (verifyStandardMove(firstMove)) {\n        startingMoves = board.getLegalMoves(firstMove.startCoordinates[0], firstMove.startCoordinates[1]);\n    }\n    else if (verifyDroppingMove(firstMove)) {\n        startingMoves = board.getDroppingMoves(firstMove.piece);\n    }\n    else if (verifyInternalMove(firstMove)) {\n        startingMoves = board.getAllowedInternalMoves();\n    }\n    else\n        throw new Error(`Unexpected move signature encountered: ${JSON.stringify(move)}`);\n    const specialMoveSettings = {\n        hasEnPassant: false\n    };\n    if (board.variantData.duckChess && move.length === 1)\n        return false;\n    for (const moveComponent of move) {\n        const move = startingMoves.find((legalMove) => compareMoves(legalMove, moveComponent));\n        if (!move)\n            return false;\n        if (verifyStandardMove(move) && move.specialType === SpecialMove.EnPassant) {\n            specialMoveSettings.hasEnPassant = true;\n        }\n        if (move.nextChainedMoves) {\n            startingMoves = move.nextChainedMoves;\n        }\n    }\n    return specialMoveSettings;\n}\n","import { assertNonUndefined, createTuple } from \"@client/ts/baseTypes\";\nimport { findLastIndex } from \"@utils/ArrayUtils\";\nimport { validateBoardMove } from \"../Board/BoardMoveValidator\";\nimport { colors, getPlayerNameFromColor, totalPlayers, VariantType } from \"../GameInformation/GameData\";\nimport { createPieceFromData } from \"../GameInformation/GameUnits/PieceString\";\nimport { assertValidMove, createMoveTree, verifyValidMove } from \"./MoveTree\";\nimport { createBaseMoveWrapper, SpecialMove, verifyStandardMove } from \"./MoveTreeInterface\";\nexport function validateMoveTree(board, moves) {\n    const clonedBoard = board.createClone();\n    clonedBoard.moves = createMoveTree(clonedBoard.createSnapshot());\n    clonedBoard.pregenerateAttacks();\n    const dimension = Math.max(...clonedBoard.data.fenOptions.tag(\"dim\"));\n    function traverse(current, currentFullMove = 0, currentTimeOnClocks = createTuple(board.gameData.timeControl.baseTime, totalPlayers)) {\n        const moves = [];\n        let previousSideToMove = -1;\n        for (let i = 0; i < current.length; i++) {\n            const moveWrapper = current[i];\n            const { moveData, path, alternativeLines } = moveWrapper;\n            const newMoveWrapper = createBaseMoveWrapper({ moveData, path: path.slice() }, {\n                comment: moveWrapper.comment\n            });\n            let validationResult;\n            try {\n                if ((validationResult = validateBoardMove(clonedBoard, moveData) || undefined)) {\n                    newMoveWrapper.moveData = moveData;\n                }\n                else\n                    break;\n            }\n            catch {\n                break;\n            }\n            let firstStandardMoveSet = false;\n            for (const moveComponent of moveData) {\n                if (verifyStandardMove(moveComponent)) {\n                    if (moveComponent.promotion) {\n                        moveComponent.promotion = moveComponent.promotion.map((p) => {\n                            if (p.isWall())\n                                return p;\n                            return createPieceFromData(clonedBoard.data.sideToMove, p.piece);\n                        });\n                    }\n                    if (!firstStandardMoveSet) {\n                        newMoveWrapper.metadata.movingPiece =\n                            clonedBoard.board[moveComponent.startCoordinates[0]][moveComponent.startCoordinates[1]];\n                        firstStandardMoveSet = true;\n                    }\n                    if (validationResult.hasEnPassant) {\n                        moveComponent.specialType = SpecialMove.EnPassant;\n                        validationResult.hasEnPassant = false;\n                        newMoveWrapper.metadata.isCapture = true;\n                    }\n                    if (clonedBoard.data.getCapturedPieces(moveComponent).length > 0)\n                        newMoveWrapper.metadata.isCapture = true;\n                }\n            }\n            if (i === 0 || findLastIndex(clonedBoard.data.fenOptions.tag(\"dead\"), (b) => !b) === previousSideToMove) {\n                newMoveWrapper.metadata.currentFullMove = ++currentFullMove;\n            }\n            newMoveWrapper.metadata.currentSideToMove = previousSideToMove = clonedBoard.data.sideToMove;\n            const results = clonedBoard.makeMove(moveData);\n            for (let i = 0; i < totalPlayers; i++) {\n                if (results.checkmates[i]) {\n                    newMoveWrapper.metadata.checkmates++;\n                }\n                else if (results.checks[i]) {\n                    newMoveWrapper.metadata.checks++;\n                }\n            }\n            for (const line of alternativeLines) {\n                newMoveWrapper.alternativeLines.push(traverse(line, currentFullMove, [...currentTimeOnClocks]));\n            }\n            if (moveWrapper.metadata.playerClock) {\n                currentTimeOnClocks[previousSideToMove] -= moveWrapper.metadata.playerClock;\n            }\n            newMoveWrapper.metadata = { ...moveWrapper.metadata };\n            newMoveWrapper.metadata.playerClock = currentTimeOnClocks[previousSideToMove];\n            const currentMove = clonedBoard.moves.getMove(newMoveWrapper.path);\n            assertValidMove(currentMove);\n            currentMove.metadata = newMoveWrapper.metadata;\n            currentMove.comment = moveWrapper.comment;\n            clonedBoard.moves.stringifyMove(currentMove, dimension);\n        }\n        return moves;\n    }\n    traverse(moves.moves);\n    return clonedBoard.moves;\n}\nexport function changeGameTermination(board) {\n    const currentMove = board.moves.getMove([board.moves.moves.length - 1]);\n    const snapshot = board.moves.getBoardSnapshot(verifyValidMove(currentMove) ? currentMove : -1);\n    assertNonUndefined(snapshot);\n    if (snapshot.boardSnapshot.data.gameOver) {\n        board.gameData.termination = snapshot.boardSnapshot.data.gameOver;\n        if (board.gameData.result)\n            return;\n        if (board.isTwoPlayer || board.gameType.type === VariantType.Teams) {\n            const currentSnapshot = board.createSnapshot();\n            board.loadSnapshot(snapshot.boardSnapshot);\n            board.gameData.result = board.data.getCurrentResult();\n            board.loadSnapshot(currentSnapshot);\n        }\n        else {\n            const currentResults = [];\n            const dead = board.data.fenOptions.tag(\"dead\"), resigned = board.data.fenOptions.tag(\"resigned\"), wb = board.data.fenOptions.tag(\"wb\"), points = snapshot.boardSnapshot.data.points;\n            for (const color of colors) {\n                if (dead[color] || resigned[color])\n                    continue;\n                currentResults.push(`${getPlayerNameFromColor(color, wb)}: ${points[color]}`);\n            }\n            board.gameData.result = currentResults.join(\" – \");\n        }\n    }\n}\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport \"reflect-metadata\";\nimport { Board } from \"@moveGeneration/Board/Board\";\nimport { totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport { PieceString } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport { verifyStandardMove, verifyDroppingMove, verifyRequiredMove } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport { decorateClassWithVariants } from \"@moveGeneration/VariantRules/VariantRule\";\nimport { compareArrays } from \"@utils/ArrayUtils\";\nimport { serializeBoard } from \"../utils/Tags/InputOutputProcessing\";\nimport { assertNonUndefined, createTuple } from \"@client/ts/baseTypes\";\nimport { stringifyCoordinate } from \"@moveGeneration/Board/BoardInterface\";\nimport { changeGameTermination, validateMoveTree } from \"@moveGeneration/MoveTree/MoveTreeValidator\";\nimport { assertValidMove } from \"@moveGeneration/MoveTree/MoveTree\";\nimport { InsufficientMaterialConstructor } from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/InsufficientMaterialConstructor\";\nimport { InsufficientMaterialChecker } from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/InsufficientMaterialChecker\";\nimport * as StateSerializer from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/StateSerializer\";\nimport { deserializeInsufficientMaterialState } from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/StateSerializer\";\nexport const requiredDispatches = [];\nexport const initialDispatches = [];\nexport const dispatchSyncRecord = {};\nfunction withWorkerResult() {\n    return function (_, propertyKey, descriptor) {\n        const originalMethod = descriptor.value;\n        descriptor.value = function (...args) {\n            postMessage([propertyKey, originalMethod.apply(this, args)]);\n        };\n    };\n}\nfunction workerDataSync(type, gameObjectPropertySync) {\n    return function (_, propertyKey) {\n        if (type === \"required\") {\n            initialDispatches.push(propertyKey);\n            requiredDispatches.push(propertyKey);\n        }\n        else {\n            initialDispatches.push(propertyKey);\n        }\n        dispatchSyncRecord[propertyKey] = gameObjectPropertySync;\n    };\n}\nclass RequestManager {\n    board;\n    initiallyAliveColors = [];\n    internalMoves = [];\n    legalMoves = new Map();\n    fogOfWarPerspective = false;\n    stripPieceStrings(object) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return JSON.parse(JSON.stringify(object));\n    }\n    generateInitiallyAliveColors() {\n        return this.board.data.fenOptions\n            .tag(\"dead\")\n            .map((d) => !d)\n            .reduce((p, n, i) => {\n            if (n) {\n                return [...p, i];\n            }\n            else\n                return p;\n        }, []);\n    }\n    generateCurrentMoves() {\n        (this.internalMoves = this.board.getAllowedInternalMoves()), (this.legalMoves = new Map());\n        for (const piece of this.board.getPlayerPieces()[this.board.data.sideToMove]) {\n            this.legalMoves.set(stringifyCoordinate(piece), this.board.getLegalMoves(piece[0], piece[1]));\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    construct(pgn4, _) {\n        this.board = new Board(pgn4);\n        this.board = decorateClassWithVariants(this.board, Board, this.board.variantRules.boardDecorators);\n        this.generateInitiallyAliveColors();\n        const insufficientMaterialModule = new InsufficientMaterialConstructor(this.board, (state) => {\n            this.board.insufficientMaterialChecker = new InsufficientMaterialChecker(state, this.board);\n            this.board.moves = validateMoveTree(this.board, this.board.moves);\n            this.board.moves.currentMove = [-1];\n            changeGameTermination(this.board);\n            this.generateCurrentMoves();\n            postMessage([\"construct\", StateSerializer.serializeInsufficientMaterialState(state)]);\n        });\n        insufficientMaterialModule.generateInsufficientMaterialState();\n        return StateSerializer.serializeInsufficientMaterialState(insufficientMaterialModule.state);\n    }\n    constructWithGeneratedData(pgn4, insufficientMaterialState) {\n        this.board = new Board(pgn4);\n        this.board = decorateClassWithVariants(this.board, Board, this.board.variantRules.boardDecorators);\n        this.generateInitiallyAliveColors();\n        this.board.insufficientMaterialChecker = new InsufficientMaterialChecker(deserializeInsufficientMaterialState(insufficientMaterialState), this.board);\n        this.board.moves = validateMoveTree(this.board, this.board.moves);\n        this.board.moves.currentMove = [-1];\n        changeGameTermination(this.board);\n        this.generateCurrentMoves();\n    }\n    getFENSettings() {\n        const board = this.board;\n        const royalCount = createTuple(0, totalPlayers);\n        let isCustomRoyals = false;\n        for (const row of this.board.board) {\n            for (const square of row) {\n                if (square.isPiece() && square.piece === \"K\" && ++royalCount[square.color] > 1) {\n                    isCustomRoyals = true;\n                    break;\n                }\n            }\n            if (isCustomRoyals)\n                break;\n        }\n        const points = [...board.data.points];\n        return {\n            sideToMove: board.data.sideToMove,\n            points,\n            isCustomRoyals,\n            fenOptions: board.data.fenOptions.createSerializedState()\n        };\n    }\n    getInitiallyAliveColors() {\n        return this.initiallyAliveColors;\n    }\n    getMoveTree() {\n        const traverse = (moves, fullMoveCounter = 0) => {\n            const results = [];\n            for (const moveWrapper of moves) {\n                const resultingWrapper = {\n                    alternativeLines: [],\n                    comment: moveWrapper.comment,\n                    path: moveWrapper.path.slice(),\n                    cachedNames: { ...moveWrapper.cachedNames },\n                    metadata: {\n                        currentSideToMove: moveWrapper.metadata.currentSideToMove,\n                        playerClock: moveWrapper.metadata.playerClock,\n                        highlightedArrows: moveWrapper.metadata.highlightedArrows,\n                        highlightedSquares: moveWrapper.metadata.highlightedSquares\n                    }\n                };\n                if (moveWrapper.metadata.currentFullMove)\n                    resultingWrapper.metadata.currentFullMove = moveWrapper.metadata.currentFullMove;\n                for (const alternativeLine of moveWrapper.alternativeLines) {\n                    resultingWrapper.alternativeLines.push(traverse(alternativeLine, fullMoveCounter - 1));\n                }\n                results.push(resultingWrapper);\n            }\n            return results;\n        };\n        return traverse(this.board.moves.moves);\n    }\n    loadSnapshotByPath(path) {\n        let snapshot;\n        if (compareArrays(path, [-1])) {\n            const preliminarySnapshot = this.board.moves.getBoardSnapshot(-1);\n            assertNonUndefined(preliminarySnapshot);\n            snapshot = preliminarySnapshot;\n        }\n        else {\n            const currentMove = this.board.moves.getMove(path);\n            assertValidMove(currentMove);\n            const preliminarySnapshot = this.board.moves.getBoardSnapshot(currentMove);\n            if (!preliminarySnapshot)\n                return false;\n            snapshot = preliminarySnapshot;\n        }\n        this.board.loadSnapshot(snapshot.boardSnapshot);\n        this.board.moves.currentMove = [...path];\n        this.generateCurrentMoves();\n        return true;\n    }\n    verifyNextChainedMovesAreDeleted(move) {\n        return !(\"nextChainedMoves\" in move);\n    }\n    convertStrippedMoveToNormal(move) {\n        const newMove = [];\n        for (const moveComponent of move) {\n            delete moveComponent.nextChainedMoves;\n            if (!this.verifyNextChainedMovesAreDeleted(moveComponent))\n                throw new Error(\"Could not delete nextChainedMoves in move component\");\n            if (verifyStandardMove(moveComponent)) {\n                newMove.push({ ...moveComponent, promotion: moveComponent.promotion?.map((p) => PieceString.fromObjectToClass(p)) });\n            }\n            else if (verifyDroppingMove(moveComponent)) {\n                newMove.push({ ...moveComponent, piece: PieceString.fromObjectToClass(moveComponent.piece) });\n            }\n            else\n                newMove.push(moveComponent);\n        }\n        if (!verifyRequiredMove(newMove))\n            throw new Error(\"Supplied move object had 0 move components\");\n        return newMove;\n    }\n    makeMove(passedMove) {\n        const board = this.board, move = this.convertStrippedMoveToNormal(passedMove);\n        board.moves.augmentMoveWithMetadata({\n            move,\n            board,\n            makeMoveFunction: () => {\n                return board.makeMove(move);\n            }\n        });\n        this.generateCurrentMoves();\n    }\n    serializeBoardToPGN() {\n        return serializeBoard(this.board);\n    }\n    getDroppingMoves(pieceString) {\n        if (this.board.data.gameOver)\n            return [];\n        return this.stripPieceStrings(this.board.getDroppingMoves(PieceString.fromObjectToClass(pieceString)));\n    }\n    getLegalMoves(i, j) {\n        if (this.board.data.gameOver)\n            return [];\n        return this.stripPieceStrings(this.legalMoves.get(stringifyCoordinate([i, j])) ?? this.board.getLegalMoves(i, j));\n    }\n    getInternalMoves() {\n        if (this.board.data.gameOver)\n            return [];\n        return this.stripPieceStrings(this.internalMoves);\n    }\n    getVariantData() {\n        return this.stripPieceStrings(this.board.variantData);\n    }\n    getBoard() {\n        return this.board.board.map((r) => r.map((p) => p.toObject()));\n    }\n    getGameData() {\n        const newGameData = { ...this.board.gameData };\n        if (typeof newGameData.date === \"object\") {\n            newGameData.date = newGameData.date.toUTCString();\n        }\n        return newGameData;\n    }\n    getCurrentMove() {\n        return this.board.moves.currentMove;\n    }\n    getVariantRules() {\n        const resultingRules = [];\n        for (const variantRule of this.board.variantRules) {\n            resultingRules.push(variantRule.getPublicProperties());\n        }\n        return resultingRules;\n    }\n    getVariantType() {\n        return this.board.gameType.type;\n    }\n    deleteMove(path) {\n        if (this.board.moves.moves.length !== 0)\n            this.board.moves.deleteMove(path);\n    }\n    playPreferredBotMove() {\n        if (this.board.data.getRealPlayers() <= 1)\n            return;\n        const legalMoves = [];\n        for (const piece of this.board.getPlayerPieces()[this.board.data.sideToMove]) {\n            legalMoves.push(...(this.legalMoves.get(stringifyCoordinate(piece)) ?? this.board.getLegalMoves(piece[0], piece[1])));\n        }\n        // TODO Pick strongest piece\n        legalMoves.push(...this.board.preGeneratedAttacks[this.board.data.sideToMove].pieceDrops.piece);\n        legalMoves.push(...this.board.preGeneratedAttacks[this.board.data.sideToMove].pieceDrops.pawn);\n        legalMoves.push(...this.internalMoves);\n        const algorithm = this.board.data.fenOptions.getDefaultZombieAlgorithm(this.board.data.sideToMove);\n        const moves = algorithm.evaluate(legalMoves, this.board);\n        return this.stripPieceStrings(algorithm.pickPreferredMove(moves));\n    }\n    changeFogPerspective() {\n        if (!this.board.variantData.fogOfWar || this.board.data.getRealPlayers() <= 1)\n            return this.fogOfWarPerspective;\n        if (this.fogOfWarPerspective === false) {\n            this.fogOfWarPerspective = this.board.data.sideToMove;\n        }\n        else {\n            const newPerspective = this.board.data.nextTurn(this.fogOfWarPerspective);\n            if (newPerspective === this.board.data.sideToMove) {\n                this.fogOfWarPerspective = false;\n            }\n            else\n                this.fogOfWarPerspective = newPerspective;\n        }\n        return this.fogOfWarPerspective;\n    }\n    getSquareVisibility() {\n        if (this.fogOfWarPerspective === false) {\n            return this.board.getSquareVisibility();\n        }\n        else {\n            const sideToMove = this.board.data.sideToMove;\n            this.board.data.sideToMove = this.fogOfWarPerspective;\n            const squareVisibility = this.board.getSquareVisibility();\n            this.board.data.sideToMove = sideToMove;\n            return squareVisibility;\n        }\n    }\n}\n__decorate([\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String, Object]),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"constructWithGeneratedData\", null);\n__decorate([\n    workerDataSync(\"required\", \"publicFENSettings\"),\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"getFENSettings\", null);\n__decorate([\n    workerDataSync(\"initial\", \"initiallyAliveColors\"),\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"getInitiallyAliveColors\", null);\n__decorate([\n    workerDataSync(\"required\", \"moveTree\"),\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"getMoveTree\", null);\n__decorate([\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Array]),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"loadSnapshotByPath\", null);\n__decorate([\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"makeMove\", null);\n__decorate([\n    workerDataSync(\"required\", \"serializedPGN\"),\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"serializeBoardToPGN\", null);\n__decorate([\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"getDroppingMoves\", null);\n__decorate([\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Number, Number]),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"getLegalMoves\", null);\n__decorate([\n    workerDataSync(\"required\", \"allowedInternalMoves\"),\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"getInternalMoves\", null);\n__decorate([\n    workerDataSync(\"initial\", \"variantDataRules\"),\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"getVariantData\", null);\n__decorate([\n    workerDataSync(\"required\", \"boardSquares\"),\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"getBoard\", null);\n__decorate([\n    workerDataSync(\"required\", \"gameData\"),\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"getGameData\", null);\n__decorate([\n    workerDataSync(\"required\", \"currentMove\"),\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"getCurrentMove\", null);\n__decorate([\n    workerDataSync(\"initial\", \"variantRules\"),\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"getVariantRules\", null);\n__decorate([\n    workerDataSync(\"initial\", \"variantType\"),\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"getVariantType\", null);\n__decorate([\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Array]),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"deleteMove\", null);\n__decorate([\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"playPreferredBotMove\", null);\n__decorate([\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"changeFogPerspective\", null);\n__decorate([\n    workerDataSync(\"required\", \"squareVisibility\"),\n    withWorkerResult(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], RequestManager.prototype, \"getSquareVisibility\", null);\nconst requestManager = new RequestManager();\nself.onmessage = (e) => {\n    if (!(e.data.requestName in RequestManager.prototype))\n        return;\n    const method = RequestManager.prototype[e.data.requestName];\n    method.apply(requestManager, e.data.parameters);\n};\n","import { createTuple } from \"@client/ts/baseTypes\";\nimport { totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport { initializeBoardSquares } from \"../../BaseInterfaces\";\nimport { emptyPieceString } from \"../GameInformation/GameUnits/PieceString\";\nimport { decorateClassWithVariants } from \"../VariantRules/VariantRule\";\nimport { copyVariantRules } from \"../VariantRules/VariantRuleSetup\";\nimport { PieceControl } from \"./PieceControl\";\nimport { pieceControlConfigSettings } from \"./PieceControlInterface\";\nexport class PieceControlConfigurator {\n    _control;\n    _isConfigured;\n    constructor(control) {\n        this._control = control;\n        this._isConfigured = {\n            coordinates: [0, 0],\n            board: initializeBoardSquares(() => emptyPieceString),\n            immunePieces: createTuple(false, totalPlayers),\n            color: 0\n        };\n    }\n    setCoordinates(x, y) {\n        this._isConfigured.coordinates = [x, y];\n        return this;\n    }\n    setBaseImmunePieces(immune) {\n        this._isConfigured.immunePieces = immune;\n        return this;\n    }\n    setColor(color) {\n        this._isConfigured.color = color;\n        return this;\n    }\n    setBoard(board) {\n        this._isConfigured.board = board;\n        return this;\n    }\n    constructPieceControl() {\n        this._control.configure(this._isConfigured);\n        return this._control;\n    }\n}\nexport class PieceControlBuilder {\n    _generalConfig;\n    constructor() {\n        this._generalConfig = {};\n    }\n    setFENData(fenData) {\n        this._generalConfig.fenData = fenData;\n    }\n    setVariantRules(rules) {\n        this._generalConfig.variantRules = rules;\n    }\n    createPieceControlWrap(letter) {\n        const information = pieceControlConfigSettings[letter];\n        const control = new information.construct();\n        if (!this._generalConfig.fenData || !this._generalConfig.variantRules)\n            throw new Error(\"PieceControl builder setup is not complete\");\n        control.setFENData(this._generalConfig.fenData);\n        const decoratedControl = decorateClassWithVariants(control, PieceControl, copyVariantRules(this._generalConfig.variantRules));\n        return () => {\n            return new PieceControlConfigurator(decoratedControl);\n        };\n    }\n}\n","import { assertNonUndefined, createTuple, createTupleFromCallback } from \"../../../baseTypes\";\nimport { initializeBoardSquares } from \"../../BaseInterfaces\";\nimport { createMoveTree } from \"../MoveTree/MoveTree\";\nimport { createBaseMoveWrapper, InternalMoveSignature, SpecialMove } from \"../MoveTree/MoveTreeInterface\";\nimport { FENData } from \"../FENData/FENData\";\nimport { boardDimension, colors, totalPlayers } from \"../GameInformation/GameData\";\nimport { nonPlayablePieces } from \"../GameInformation/GameUnits/GameUnits\";\nimport { createPieceFromData, deadColorIndex, pawnPieceString, wallPieceString } from \"../GameInformation/GameUnits/PieceString\";\nimport { PieceControlBuilder } from \"../PieceControl/PieceControlBuilder\";\nimport { initPieceControlDeclarations } from \"../PieceControl/PieceControlDeclarations\";\nimport { AttackType, pieceControlConfigSettings } from \"../PieceControl/PieceControlInterface\";\nimport { decorateClassWithVariants } from \"../VariantRules/VariantRule\";\nimport { copyVariantRules, validateVariantRules } from \"../VariantRules/VariantRuleSetup\";\nimport { createGameTypeSettings, createComplexMoveLegalityTracker, createBasePreGeneratedAttacks, compareCoordinates, stringifyCoordinate } from \"./BoardInterface\";\nimport { copyClass } from \"@client/ts/utils/ObjectUtils\";\nimport { parsePGN4 } from \"../../utils/Tags/InputOutputProcessing\";\ninitPieceControlDeclarations();\nexport const baseImmunes = createTuple(false, totalPlayers);\nexport class Board {\n    controls = {};\n    data;\n    moves;\n    preGeneratedAttacks = createTupleFromCallback(createBasePreGeneratedAttacks, totalPlayers);\n    board;\n    isComplexSetup = createComplexMoveLegalityTracker();\n    gameData;\n    gameType = createGameTypeSettings();\n    variantRules;\n    variantData;\n    isTwoPlayer;\n    insufficientMaterialChecker;\n    __baseClass;\n    initDecoratorSettings() {\n        /* no-op */\n    }\n    /*---------------------------------- INITIALIZATION -----------------------------------------*/\n    constructor(pgn4) {\n        this.__baseClass = this;\n        const parsingResults = parsePGN4(pgn4);\n        this.gameType.type = parsingResults.gameType;\n        this.variantRules = parsingResults.variantRules;\n        this.gameData = parsingResults.gameData;\n        this.board = parsingResults.board;\n        this.data = parsingResults.fenData;\n        this.data.injectBoard(this);\n        this.data = decorateClassWithVariants(this.data, FENData, this.variantRules.fenDataDecorators);\n        this.variantData = parsingResults.variantRuleData;\n        this.variantRules = validateVariantRules(this);\n        this.isTwoPlayer = this.data.getRealPlayers() === 2;\n        this.initPieceControls(parsingResults.pieceSet);\n        this.moves = createMoveTree(this.createSnapshot());\n        this.moves.moves = parsingResults.moves;\n        this.pregenerateAttacks();\n    }\n    initPieceControls(pieces) {\n        if (pieces.size === 0)\n            return;\n        const builder = new PieceControlBuilder();\n        builder.setFENData(this.data);\n        builder.setVariantRules(this.variantRules.pieceControlDecorators);\n        for (const piece of pieces) {\n            const pieceControlConfigurator = builder.createPieceControlWrap(piece);\n            this.controls[piece] = pieceControlConfigurator;\n        }\n    }\n    getSquareVisibility() {\n        return initializeBoardSquares(() => []);\n    }\n    createSnapshot() {\n        return {\n            data: this.data.createSnapshot(),\n            board: this.board.map((a) => [...a]),\n            isComplexSetup: Object.assign({}, this.isComplexSetup)\n        };\n    }\n    loadSnapshot(snapshot) {\n        this.isComplexSetup = { ...snapshot.isComplexSetup };\n        this.data.loadSnapshot(snapshot.data);\n        this.board = snapshot.board.map((row) => [...row]);\n        this.pregenerateAttacks();\n        this.runComplexLegalityEvaluationChecks();\n    }\n    createClone() {\n        let targetObject = copyClass(this.__baseClass, Board);\n        targetObject.board = this.board.map((a) => [...a]); // PieceStrings are immutable\n        targetObject.isComplexSetup = Object.assign({}, this.isComplexSetup);\n        targetObject.preGeneratedAttacks = createTupleFromCallback(createBasePreGeneratedAttacks, totalPlayers);\n        targetObject.data = this.data.createClone();\n        targetObject = decorateClassWithVariants(targetObject, Board, copyVariantRules(this.__baseClass.variantRules.boardDecorators));\n        targetObject.data.injectBoard(targetObject);\n        targetObject.data = decorateClassWithVariants(targetObject.data, FENData, copyVariantRules(this.__baseClass.variantRules.fenDataDecorators));\n        const presumedPieceLetters = new Set();\n        let letter;\n        for (letter in this.controls) {\n            if (Object.prototype.hasOwnProperty.call(this.controls, letter)) {\n                presumedPieceLetters.add(letter);\n            }\n        }\n        targetObject.initPieceControls(presumedPieceLetters);\n        targetObject.pregenerateAttacks();\n        return targetObject;\n    }\n    /*---------------------------------- INITIALIZATION -----------------------------------------*/\n    /*-------------------------------------------------------------------------------------------*/\n    /*------------------------------------- UTILITIES -------------------------------------------*/\n    isKingInCheck(baseColor, fenRoyal = this.data.fenOptions.tag(\"royal\")) {\n        const royal = fenRoyal[baseColor];\n        if (!royal || this.data.fenOptions.tag(\"dead\")[baseColor])\n            return false;\n        const coordinates = royal;\n        return !!(this.preGeneratedAttacks[baseColor].slidingPieces[coordinates[0]][coordinates[1]] ||\n            this.preGeneratedAttacks[baseColor].hoppingPieces[coordinates[0]][coordinates[1]]);\n    }\n    getPlayerPieces() {\n        const playerPieces = [[], [], [], []];\n        for (let i = 0; i < boardDimension; i++) {\n            for (let j = 0; j < boardDimension; j++) {\n                const square = this.board[i][j];\n                if (square.isEmpty())\n                    continue;\n                const color = square.color;\n                if (color !== deadColorIndex)\n                    playerPieces[color].push([i, j]);\n            }\n        }\n        return playerPieces;\n    }\n    getCheckmatesAndStalemates() {\n        const dead = this.data.fenOptions.tag(\"dead\"), royal = this.data.fenOptions.tag(\"royal\");\n        const kingChecks = createTuple(false, totalPlayers);\n        const legalMoves = createTuple(false, totalPlayers);\n        const playerPieces = this.getPlayerPieces();\n        legalMoves[this.data.sideToMove] = true;\n        for (const color of colors) {\n            if (dead[color])\n                continue;\n            const playerArmy = playerPieces[color];\n            if (this.isKingInCheck(color)) {\n                kingChecks[color] = true;\n            }\n            for (const piece of playerArmy) {\n                if (this.getLegalMoves(piece[0], piece[1], color).length) {\n                    legalMoves[color] = true;\n                    break;\n                }\n            }\n            if (!legalMoves[color]) {\n                if (this.preGeneratedAttacks[color].pieceDrops.pawn.length || this.preGeneratedAttacks[color].pieceDrops.piece.length) {\n                    legalMoves[color] = true;\n                }\n            }\n        }\n        const kingCaptures = royal.map((r, i) => !dead[i] && r ? this.board[r[0]][r[1]].isEmpty() || this.board[r[0]][r[1]].color !== i : false);\n        return {\n            checkmates: legalMoves.map((move, i) => kingCaptures[i] || (!move && kingChecks[i])),\n            stalemates: legalMoves.map((move, i) => !move && !kingChecks[i]),\n            checks: kingChecks\n        };\n    }\n    runComplexLegalityEvaluationChecks() {\n        if (this.isComplexSetup.hasComplexRules)\n            return;\n        for (let i = 0; i < boardDimension; i++) {\n            for (let j = 0; j < boardDimension; j++) {\n                const square = this.board[i][j];\n                if (square.isPiece() && pieceControlConfigSettings[square.piece].moveGenerationSettings.isComplex) {\n                    this.isComplexSetup.hasComplexPieces = true;\n                    return;\n                }\n            }\n        }\n    }\n    getCurrentChecks(sideToMove = this.data.sideToMove) {\n        const dead = this.data.fenOptions.tag(\"dead\"), resigned = this.data.fenOptions.tag(\"resigned\"), royal = this.data.fenOptions.tag(\"royal\");\n        const playerRoyals = royal.map((r, i) => (r && !dead[i] && !resigned[i] ? r : null));\n        const attackingCoordinates = createTupleFromCallback(() => [], totalPlayers);\n        for (const [startingCoordinate, attackList] of this.preGeneratedAttacks[sideToMove].pieceMovements) {\n            for (const attack of attackList) {\n                for (const color of colors) {\n                    if (color === sideToMove)\n                        continue;\n                    const royal = playerRoyals[color];\n                    if (royal && compareCoordinates(royal, attack.move)) {\n                        attackingCoordinates[color].push(startingCoordinate);\n                    }\n                }\n            }\n        }\n        return attackingCoordinates;\n    }\n    /*------------------------------------- UTILITIES -------------------------------------------*/\n    /*-------------------------------------------------------------------------------------------*/\n    /*---------------------------------------- API ----------------------------------------------*/\n    makeMove(move, ignoreNextMoves = false) {\n        let returnValues;\n        const sideToMove = this.data.sideToMove, pregeneratedAttacks = this.preGeneratedAttacks;\n        for (let i = 0; i < move.length; i++) {\n            if (i === move.length - 1) {\n                returnValues = this.data.affectOptions(move[i], {\n                    ignoreCheckmateChecks: ignoreNextMoves,\n                    ignoreNextTurn: false\n                });\n            }\n            else {\n                this.data.affectOptions(move[i], {\n                    ignoreCheckmateChecks: ignoreNextMoves,\n                    ignoreNextTurn: true\n                });\n            }\n        }\n        this.runComplexLegalityEvaluationChecks();\n        if (ignoreNextMoves)\n            return returnValues;\n        const path = this.moves.currentMove.slice();\n        path[path.length - 1]++;\n        this.moves.currentMove = this.moves.setNewMove({\n            move: createBaseMoveWrapper({ path, moveData: move }),\n            snapshot: {\n                boardSnapshot: this.createSnapshot(),\n                pregeneratedAttacks: pregeneratedAttacks[sideToMove]\n            },\n            fenDataString: this.moves.constructPreliminaryHashString(this)\n        });\n        if (this.data.gameOver || this.data.getRealPlayers() === 1)\n            return returnValues;\n        if (returnValues.checkmates[this.data.sideToMove]) {\n            returnValues = this.makeMove([{ type: InternalMoveSignature.TeamsCheckmate }], true);\n        }\n        else if (returnValues.stalemates[this.data.sideToMove]) {\n            returnValues = this.makeMove([{ type: InternalMoveSignature.Stalemate }]);\n        }\n        return returnValues;\n    }\n    pregenerateAttacks(exclusiveSideToMoveGeneration = false) {\n        const royal = this.data.fenOptions.tag(\"royal\");\n        this.preGeneratedAttacks = createTupleFromCallback(createBasePreGeneratedAttacks, totalPlayers);\n        this.getPlayerPieces().forEach((army, armyColor) => {\n            if (exclusiveSideToMoveGeneration !== false && exclusiveSideToMoveGeneration !== armyColor)\n                return;\n            const preGeneratedAttacks = this.preGeneratedAttacks[armyColor];\n            for (const coordinate of army) {\n                const square = this.board[coordinate[0]][coordinate[1]];\n                if (!square.isPiece())\n                    continue;\n                const color = square.color;\n                const letter = square.piece;\n                const controlBuilder = this.controls[letter]().setColor(color).setCoordinates(coordinate[0], coordinate[1]).setBoard(this.board);\n                const setting = pieceControlConfigSettings[square.piece];\n                const resultingMoves = [];\n                let control = controlBuilder.setBaseImmunePieces(this.gameType.getBaseColors(color)).constructPieceControl();\n                resultingMoves.push(...control.getPseudoLegalMoves());\n                control = controlBuilder.setBaseImmunePieces(baseImmunes).constructPieceControl();\n                if (setting.moveGenerationSettings.isJumping) {\n                    const attacks = control.rayGenJumpingAttacks();\n                    for (const { move: attack } of attacks) {\n                        for (const color of colors) {\n                            if (color === armyColor)\n                                continue;\n                            const preGeneratedAttacks = this.preGeneratedAttacks[color];\n                            preGeneratedAttacks.hoppingPieces[attack[0]][attack[1]]++;\n                            preGeneratedAttacks.hoppingPieceLines.push([coordinate, attack]);\n                            const l = preGeneratedAttacks.attackingColors[attack[0]][attack[1]];\n                            if (~l && preGeneratedAttacks.attackingColors[attack[0]][attack[1]] !== color + 1) {\n                                preGeneratedAttacks.attackingColors[attack[0]][attack[1]] = l === 0 ? 1 + color : -1;\n                            }\n                        }\n                    }\n                }\n                if (setting.moveGenerationSettings.isSliding) {\n                    const attacks = control.rayGenSlidingAttacks();\n                    for (const attack of attacks) {\n                        for (const color of colors) {\n                            if (color === armyColor)\n                                continue;\n                            const preGeneratedAttacks = this.preGeneratedAttacks[color];\n                            for (const { move: subAttack } of attack) {\n                                preGeneratedAttacks.slidingPieces[subAttack[0]][subAttack[1]]++;\n                                const l = preGeneratedAttacks.attackingColors[subAttack[0]][subAttack[1]];\n                                if (~l && preGeneratedAttacks.attackingColors[subAttack[0]][subAttack[1]] !== color + 1) {\n                                    preGeneratedAttacks.attackingColors[subAttack[0]][subAttack[1]] = l === 0 ? 1 + color : -1;\n                                }\n                            }\n                            if (attack.length !== 0) {\n                                preGeneratedAttacks.slidingPiecesLines.push([coordinate, attack.map((m) => m.move)]);\n                            }\n                            else {\n                                const coordinateArray = [];\n                                preGeneratedAttacks.slidingPiecesLines.push([coordinate, coordinateArray]);\n                            }\n                        }\n                    }\n                    const rayGen = control.rayGenSlidingAttacks(AttackType.RayTraceLimited);\n                    for (const attack of rayGen) {\n                        for (const color of colors) {\n                            if (color === armyColor)\n                                continue;\n                            const preGeneratedAttacks = this.preGeneratedAttacks[color];\n                            if (attack.length !== 0) {\n                                let isRoyalOnLine = false;\n                                const resultingAttack = [];\n                                for (const { move } of attack) {\n                                    resultingAttack.push(move);\n                                    if (isRoyalOnLine) {\n                                        preGeneratedAttacks.slidingPieces[move[0]][move[1]]++;\n                                    }\n                                    else if (compareCoordinates(royal[color] ?? [-1, -1], move)) {\n                                        isRoyalOnLine = true;\n                                    }\n                                }\n                                preGeneratedAttacks.slidingPiecesRayTracing.push([coordinate, attack.map((m) => m.move)]);\n                            }\n                            else {\n                                preGeneratedAttacks.slidingPiecesLines.push([coordinate, []]);\n                            }\n                        }\n                    }\n                }\n                preGeneratedAttacks.pieceMovements.set(stringifyCoordinate(coordinate), resultingMoves);\n            }\n            preGeneratedAttacks.pieceDrops.piece = this.getDroppingMoves(createPieceFromData(armyColor, nonPlayablePieces.wall));\n            preGeneratedAttacks.pieceDrops.pawn = this.getDroppingMoves(createPieceFromData(armyColor, pawnPieceString.piece));\n        });\n    }\n    isSetupComplex() {\n        return this.isComplexSetup.hasComplexPieces || this.isComplexSetup.hasComplexRules || this.data.isComplexEvaluation();\n    }\n    isTheMoveLegal(color, moveData, isSeirawanDrop = false) {\n        const royals = this.data.fenOptions.tag(\"royal\");\n        const { startCoordinates: [pieceI, pieceJ], endCoordinates: [attackI, attackJ] } = moveData;\n        const royal = royals[color];\n        if (!this.board[attackI][attackJ].isEmpty() && royal && attackI === royal[0] && attackJ === royal[1])\n            return false;\n        if (this.isSetupComplex()) {\n            const snapshot = this.createSnapshot();\n            const moveArray = [\n                {\n                    startCoordinates: [pieceI, pieceJ],\n                    endCoordinates: [attackI, attackJ]\n                }\n            ];\n            if (isSeirawanDrop)\n                moveArray.push({ piece: wallPieceString, endCoordinates: [pieceI, pieceJ] });\n            const { checks, checkmates } = this.makeMove(moveArray, true);\n            let isKingInCheck = checks[color] || checkmates[color];\n            if (!isKingInCheck) {\n                this.pregenerateAttacks(color);\n                isKingInCheck = this.isKingInCheck(color);\n            }\n            this.loadSnapshot(snapshot);\n            return !isKingInCheck;\n        }\n        else {\n            const [royalI, royalJ] = royal ?? [null, null];\n            const preGeneratedAttacks = this.preGeneratedAttacks[color];\n            if (royalI === null)\n                return true;\n            const isRoyalMove = royalI === pieceI && royalJ === pieceJ;\n            const attackers = preGeneratedAttacks.hoppingPieces[royalI][royalJ] + preGeneratedAttacks.slidingPieces[royalI][royalJ];\n            const targetSafety = preGeneratedAttacks.slidingPieces[attackI][attackJ] + preGeneratedAttacks.hoppingPieces[attackI][attackJ] === 0;\n            const legalitySettings = {\n                canKingCapture: undefined\n            };\n            for (const kingCaptureColor of colors) {\n                const royal = royals[kingCaptureColor];\n                if (kingCaptureColor !== color && royal && royal[0] === attackI && royal[1] === attackJ) {\n                    const royalDefendedSquare = preGeneratedAttacks.attackingColors[royal[1]][royal[0]];\n                    if ((royalDefendedSquare === kingCaptureColor + 1 || royalDefendedSquare === 0) &&\n                        (isRoyalMove || preGeneratedAttacks.attackingColors[royalI][royalJ] === kingCaptureColor + 1)) {\n                        legalitySettings.canKingCapture = kingCaptureColor + 1;\n                    }\n                }\n            }\n            if (!this.gameType.isFFA() && legalitySettings.canKingCapture !== undefined)\n                return true;\n            for (const [attackingPiece, attackLine] of preGeneratedAttacks.slidingPiecesRayTracing) {\n                let isPieceUnderAttack = false, isRoyalUnderAttack = false, isTheTargetSquarePinListed = false;\n                for (const [attackedX, attackedY] of attackLine) {\n                    if (!isPieceUnderAttack && attackedX === pieceI && attackedY === pieceJ)\n                        isPieceUnderAttack = true;\n                    else if (!isTheTargetSquarePinListed && !isRoyalUnderAttack && attackedX === attackI && attackedY === attackJ)\n                        isTheTargetSquarePinListed = true;\n                    if (!isRoyalUnderAttack && attackedX === royalI && attackedY === royalJ)\n                        isRoyalUnderAttack = true;\n                    if (isRoyalMove) {\n                        if (isRoyalUnderAttack && attackedX === attackI && attackedY === attackJ) {\n                            if (legalitySettings.canKingCapture &&\n                                legalitySettings.canKingCapture > 0 &&\n                                this.board[attackedX][attackedY].color + 1 === legalitySettings.canKingCapture)\n                                continue;\n                            return false;\n                        }\n                    }\n                    else {\n                        if (isPieceUnderAttack &&\n                            isRoyalUnderAttack &&\n                            !compareCoordinates(attackingPiece, moveData.endCoordinates) &&\n                            !isTheTargetSquarePinListed) {\n                            if (legalitySettings.canKingCapture &&\n                                legalitySettings.canKingCapture > 0 &&\n                                this.board[attackedX][attackedY].color + 1 === legalitySettings.canKingCapture)\n                                continue;\n                            return false;\n                        }\n                    }\n                }\n            }\n            if (attackers > 1) {\n                return isRoyalMove ? targetSafety || Boolean(legalitySettings.canKingCapture) : Boolean(legalitySettings.canKingCapture);\n            }\n            else if (attackers === 1) {\n                if (!isRoyalMove) {\n                    if (preGeneratedAttacks.hoppingPieces[royalI][royalJ] === 1) {\n                        for (const [attackingPiece, attackCoordinates] of preGeneratedAttacks.hoppingPieceLines) {\n                            if (attackCoordinates[0] === royalI &&\n                                attackCoordinates[1] === royalJ &&\n                                attackingPiece[0] === attackI &&\n                                attackingPiece[1] === attackJ) {\n                                return true;\n                            }\n                        }\n                        return Boolean(legalitySettings.canKingCapture);\n                    }\n                    else {\n                        for (const [attackingPiece, attackLine] of preGeneratedAttacks.slidingPiecesLines) {\n                            let isRoyalUnderAttack = false, isTheTargetSquareBlocked = false;\n                            for (const [attackedX, attackedY] of attackLine) {\n                                if (!isRoyalUnderAttack && attackedX === royalI && attackedY === royalJ)\n                                    isRoyalUnderAttack = true;\n                                else if (!isTheTargetSquareBlocked && !isRoyalUnderAttack && attackedX === attackI && attackedY === attackJ)\n                                    isTheTargetSquareBlocked = true;\n                                if (isRoyalUnderAttack &&\n                                    !compareCoordinates(attackingPiece, moveData.endCoordinates) &&\n                                    !isTheTargetSquareBlocked) {\n                                    if (legalitySettings.canKingCapture &&\n                                        legalitySettings.canKingCapture > 0 &&\n                                        this.board[attackedX][attackedY].color + 1 === legalitySettings.canKingCapture)\n                                        continue;\n                                    return Boolean(legalitySettings.canKingCapture);\n                                }\n                            }\n                        }\n                        return true;\n                    }\n                }\n                else {\n                    return targetSafety || Boolean(legalitySettings.canKingCapture);\n                }\n            }\n            else {\n                return isRoyalMove ? targetSafety || Boolean(legalitySettings.canKingCapture) : true;\n            }\n        }\n    }\n    getCastlingMoves(parameters) {\n        const { i, j, baseColor } = parameters;\n        const specialMoves = [];\n        const royal = this.data.fenOptions.tag(\"royal\")[baseColor];\n        if (royal && royal[0] === i && royal[1] === j) {\n            if (this.data.fenOptions.isKingsideCastlingAvailable(baseColor, this)) {\n                specialMoves.push({\n                    startCoordinates: [i, j],\n                    endCoordinates: this.data.fenOptions.getKingsideCastlingEndCoordinate(baseColor),\n                    specialType: SpecialMove.CastlingKingside\n                });\n            }\n            if (this.data.fenOptions.isQueensideCastlingAvailable(baseColor, this)) {\n                specialMoves.push({\n                    startCoordinates: [i, j],\n                    endCoordinates: this.data.fenOptions.getQueensideCastlingEndCoordinate(baseColor),\n                    specialType: SpecialMove.CastlingQueenside\n                });\n            }\n        }\n        return specialMoves;\n    }\n    getEnPassantMoves(parameters) {\n        const { i, j, baseColor, pieceLetter } = parameters;\n        const specialMoves = [];\n        if (pieceControlConfigSettings[pieceLetter].moveGenerationSettings.isPawn) {\n            const enPassantCaptures = this.data.fenOptions.getAvailableEnPassantCaptures(baseColor);\n            const pawnAttacks = this.controls[pieceLetter]()\n                .setBaseImmunePieces(this.gameType.getBaseColors(baseColor))\n                .setBoard(this.board)\n                .setCoordinates(i, j)\n                .setColor(baseColor)\n                .constructPieceControl()\n                .rayGenJumpingAttacks();\n            if (enPassantCaptures.length !== 0) {\n                for (const attack of pawnAttacks) {\n                    for (const enP of enPassantCaptures) {\n                        if (compareCoordinates(attack.move, enP)) {\n                            const snapshot = this.createSnapshot();\n                            const move = [\n                                {\n                                    startCoordinates: [i, j],\n                                    endCoordinates: attack.move,\n                                    specialType: SpecialMove.EnPassant,\n                                    isIrreversible: attack.irreversible\n                                }\n                            ];\n                            this.makeMove(move, true);\n                            this.pregenerateAttacks();\n                            if (!this.isKingInCheck(baseColor))\n                                specialMoves.push(move[0]);\n                            this.loadSnapshot(snapshot);\n                        }\n                    }\n                }\n            }\n        }\n        return specialMoves;\n    }\n    getSpecialMoves(parameters) {\n        return [...this.getCastlingMoves(parameters), ...this.getEnPassantMoves(parameters)];\n    }\n    getLegalMoves(i, j, baseColor = this.data.sideToMove, isSeirawanDrop = false) {\n        const pieceString = this.board[i]?.[j], royal = this.data.fenOptions.tag(\"royal\")[baseColor];\n        if (pieceString.isPiece()) {\n            const color = pieceString.color;\n            if (color !== baseColor)\n                return [];\n            const pseudoLegalMoves = this.preGeneratedAttacks[color].pieceMovements.get(stringifyCoordinate([i, j]));\n            assertNonUndefined(pseudoLegalMoves);\n            const specialMoves = this.getSpecialMoves({ i, j, baseColor, pieceLetter: pieceString.piece });\n            return [\n                ...pseudoLegalMoves\n                    .map((generatedMove) => {\n                    const moveData = {\n                        startCoordinates: [i, j],\n                        endCoordinates: generatedMove.move,\n                        isIrreversible: generatedMove.irreversible\n                    };\n                    if (generatedMove.move[2]) {\n                        moveData.promotion = generatedMove.move[2].split(\"\").map((piece) => createPieceFromData(color, piece));\n                    }\n                    return moveData;\n                })\n                    .filter((m) => {\n                    const capturedPieces = this.data.getCapturedPieces(m);\n                    const isKingCapture = royal && capturedPieces.find((c) => royal[0] === c[0] && royal[1] === c[1]);\n                    return this.isTheMoveLegal(color, m, isSeirawanDrop) && !isKingCapture;\n                }),\n                ...specialMoves\n            ];\n        }\n        else {\n            return [];\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getDroppingMoves(_piece, _sideToMove = this.data.sideToMove) {\n        return [];\n    }\n    getAllowedInternalMoves(sideToMove = this.data.sideToMove) {\n        const currentMoves = [InternalMoveSignature.DrawByAgreement];\n        const currentSnapshot = this.createSnapshot();\n        this.makeMove([{ type: InternalMoveSignature.Resign }], true);\n        const maximum = Math.max(...this.data.points);\n        const pointIndexes = this.data.points.reduce((p, n, i) => (n === maximum ? [...p, i] : p), []);\n        this.loadSnapshot(currentSnapshot);\n        if (pointIndexes.length === 1 && pointIndexes[0] === sideToMove) {\n            currentMoves.push(InternalMoveSignature.ClaimWin);\n        }\n        else {\n            currentMoves.push(InternalMoveSignature.Resign, InternalMoveSignature.Timeout);\n        }\n        return currentMoves.map((type) => ({ type }));\n    }\n}\n","import { createTupleFromCallback, verifyTupleType } from \"../../../baseTypes\";\nimport { initializeBoardSquares } from \"../../BaseInterfaces\";\nimport { totalPlayers, VariantType } from \"../GameInformation/GameData\";\nimport { verifyNumericColor } from \"../GameInformation/GameUnits/GameUnits\";\nexport var DisplaySettings;\n(function (DisplaySettings) {\n    DisplaySettings[DisplaySettings[\"Highlighted\"] = 0] = \"Highlighted\";\n    DisplaySettings[DisplaySettings[\"Fogged\"] = 1] = \"Fogged\";\n    DisplaySettings[DisplaySettings[\"Ghosted\"] = 2] = \"Ghosted\";\n    DisplaySettings[DisplaySettings[\"Blindfolded\"] = 3] = \"Blindfolded\";\n    DisplaySettings[DisplaySettings[\"PieceFacesCenter\"] = 4] = \"PieceFacesCenter\";\n})(DisplaySettings || (DisplaySettings = {}));\nconst baseTeams = [true, false, true, false];\nexport const stringifyCoordinate = (coordinate) => `${coordinate[0]}:${coordinate[1]}`;\nexport const unstringifyCoordinate = (coordinate) => {\n    const result = coordinate.split(\":\").map((v) => Number(v));\n    if (verifyTupleType(result, 2) && result.every((n) => !Number.isNaN(n))) {\n        return result;\n    }\n    else\n        throw new Error(`Unexpected stringified coordinate: ${coordinate}`);\n};\nexport const createGameTypeSettings = () => ({\n    type: VariantType.FFA,\n    teamSettings: {\n        firstTeamColors: baseTeams.map((e) => e),\n        secondTeamColors: baseTeams.map((e) => !e)\n    },\n    getBaseColors(color) {\n        if (this.isFFA()) {\n            return createTupleFromCallback((_, i) => i === color, totalPlayers);\n        }\n        else {\n            return this.teamSettings.firstTeamColors[color] ? this.teamSettings.firstTeamColors : this.teamSettings.secondTeamColors;\n        }\n    },\n    isFFA() {\n        return this.type === VariantType.FFA || this.type === VariantType.Solo;\n    },\n    isSameTeam(colorA, colorB) {\n        if (colorA === colorB)\n            return true;\n        if (this.isFFA()) {\n            return false;\n        }\n        else {\n            return this.teamSettings.firstTeamColors[colorA]\n                ? this.teamSettings.firstTeamColors[colorA] && this.teamSettings.firstTeamColors[colorA]\n                : this.teamSettings.secondTeamColors[colorA] && this.teamSettings.secondTeamColors[colorB];\n        }\n    },\n    getTeammateColor(color) {\n        if (this.isFFA())\n            return color;\n        const teammateIndex = this.teamSettings.firstTeamColors[color]\n            ? this.teamSettings.firstTeamColors.map((b, i) => b && i !== color).indexOf(true)\n            : this.teamSettings.secondTeamColors.map((b, i) => b && i !== color).indexOf(true);\n        return verifyNumericColor(teammateIndex) ? teammateIndex : color;\n    }\n});\nexport const createComplexMoveLegalityTracker = () => ({\n    hasComplexPieces: false,\n    hasComplexRules: false\n});\nexport const createBasePreGeneratedAttacks = () => {\n    return {\n        hoppingPieces: initializeBoardSquares(() => 0),\n        slidingPieces: initializeBoardSquares(() => 0),\n        hoppingPieceLines: [],\n        slidingPiecesLines: [],\n        slidingPiecesRayTracing: [],\n        attackingColors: initializeBoardSquares(() => 0),\n        pieceMovements: new Map(),\n        pieceDrops: {\n            pawn: [],\n            piece: []\n        },\n        variantRuleCache: {}\n    };\n};\nexport const compareCoordinates = (coordinate1, coordinate2) => coordinate1[0] === coordinate2[0] && coordinate1[1] === coordinate2[1];\n","import { createTupleFromCallback, assertNonUndefined } from \"@client/ts/baseTypes\";\nimport { getHorizontalPlacementModulus, getVerticalPlacementModulus, isVerticalPlacement } from \"@client/ts/logic/BaseInterfaces\";\nimport { botAlgorithms, ZombieType } from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/BotInterface\";\nimport { copyClass } from \"@utils/ObjectUtils\";\nimport { totalPlayers } from \"../../GameInformation/GameData\";\nimport { createFENOptionsTags, createFENOptionsTagsSnapshot } from \"./FENOptionsTagsInterface\";\nexport class FENOptions {\n    tags = createFENOptionsTags();\n    castlingKingsideData = createTupleFromCallback(() => ({ endCoordinates: -1, pieceCoordinates: -1, pieceEndCoordinates: -1, checkSquares: [] }), totalPlayers);\n    castlingQueensideData = createTupleFromCallback(() => ({ endCoordinates: -1, pieceCoordinates: -1, pieceEndCoordinates: -1, checkSquares: [] }), totalPlayers);\n    createSnapshot() {\n        return {\n            tagsSnapshot: createFENOptionsTagsSnapshot(this.tags)\n        };\n    }\n    loadTagSnapshot(value, tag) {\n        tag.loadSnapshot(value);\n    }\n    loadSnapshot(snapshot) {\n        let key;\n        for (key in snapshot.tagsSnapshot) {\n            if (!Object.prototype.hasOwnProperty.call(snapshot.tagsSnapshot, key))\n                continue;\n            this.loadTagSnapshot(snapshot.tagsSnapshot[key], this.tags[key]);\n        }\n    }\n    verifyKeyTag(key, snapshot) {\n        return key in snapshot;\n    }\n    createClone() {\n        const newOptions = copyClass(this, FENOptions);\n        const snapshot = this.createSnapshot();\n        newOptions.tags = createFENOptionsTags();\n        newOptions.loadSnapshot(snapshot);\n        let key;\n        for (key in this.tags) {\n            if (Object.prototype.hasOwnProperty.call(this.tags, key) && !this.verifyKeyTag(key, snapshot.tagsSnapshot)) {\n                newOptions.tags[key].value = this.tags[key].value;\n            }\n        }\n        return newOptions;\n    }\n    tag(key) {\n        return this.tags[key].value;\n    }\n    setTag(key, value) {\n        this.tags[key].value = value;\n    }\n    createSerializedState() {\n        const serializedState = {};\n        let fenTag;\n        for (fenTag in this.tags) {\n            if (!Object.prototype.hasOwnProperty.call(this.tags, fenTag))\n                continue;\n            const tag = this.tags[fenTag];\n            serializedState[fenTag] = tag.createSnapshot();\n        }\n        return serializedState;\n    }\n    generateCastling(board) {\n        let [dimensionRY, dimensionBG] = this.tag(\"dim\");\n        if (!this.tag(\"noCorners\")) {\n            if (dimensionRY > 8)\n                dimensionRY = 8;\n            if (dimensionBG > 8)\n                dimensionBG = 8;\n        }\n        const dimensions = [dimensionRY, dimensionBG, dimensionRY, dimensionBG];\n        const royalRanks = this.tag(\"royal\").map((r, i) => (r ? r[getHorizontalPlacementModulus(i)] : r));\n        const royalCoordinates = this.tag(\"royal\").map((r, i) => (r ? r[getHorizontalPlacementModulus(i)] : r));\n        const kingsideCastlePieceCoordinate = [];\n        const queensideCastlePieceCoordinate = [];\n        const boardSquares = board.board;\n        for (let i = 0; i < this.tag(\"royal\").length; i++) {\n            const royalCoordinateI = royalCoordinates[i];\n            const royalRanksI = royalRanks[i];\n            if (royalCoordinateI === null || royalRanksI === null) {\n                kingsideCastlePieceCoordinate.push(-1);\n                queensideCastlePieceCoordinate.push(-1);\n                continue;\n            }\n            const condition = i % 2 === 0;\n            for (let j = royalCoordinateI; j < 14; j++) {\n                const pieceString = boardSquares[condition ? royalRanksI : j][condition ? j : royalRanksI];\n                if (!pieceString.isEmpty() && pieceString.piece === this.tag(\"castleWith\")) {\n                    kingsideCastlePieceCoordinate.push(j);\n                    break;\n                }\n                else if (j === 13) {\n                    kingsideCastlePieceCoordinate.push(-1);\n                }\n            }\n            for (let j = royalCoordinateI; j > -1; j--) {\n                const pieceString = boardSquares[condition ? royalRanksI : j][condition ? j : royalRanksI];\n                if (!pieceString.isEmpty() && pieceString.piece === this.tag(\"castleWith\")) {\n                    queensideCastlePieceCoordinate.push(j);\n                    break;\n                }\n                else if (j === 0) {\n                    queensideCastlePieceCoordinate.push(-1);\n                }\n            }\n        }\n        for (let i = 0; i < this.tag(\"royal\").length; i++) {\n            const royalCoordinate = royalCoordinates[i];\n            if (royalCoordinate === null)\n                continue;\n            const d = dimensions[i] - 6 < 1 ? 1 : dimensions[i] - 6;\n            if (kingsideCastlePieceCoordinate[i] === -1) {\n                this.tag(\"castleKingside\")[i] = false;\n            }\n            else {\n                const kArr = [...Array(kingsideCastlePieceCoordinate[i] - royalCoordinate - 1).keys()];\n                const endCoordinates = royalCoordinate + d;\n                const castlingData = {\n                    endCoordinates,\n                    checkSquares: kArr.map((j) => j + royalCoordinate + 1),\n                    pieceCoordinates: kingsideCastlePieceCoordinate[i],\n                    pieceEndCoordinates: endCoordinates - 1\n                };\n                if (royalCoordinate <= 6) {\n                    this.castlingQueensideData[i] = castlingData;\n                }\n                else {\n                    this.castlingKingsideData[i] = castlingData;\n                }\n            }\n            if (queensideCastlePieceCoordinate[i] === -1) {\n                this.tags.castleQueenside.value[i] = false;\n            }\n            else {\n                const qArr = [...Array(royalCoordinate - queensideCastlePieceCoordinate[i] - 1).keys()];\n                const endCoordinates = royalCoordinate - d;\n                const castlingData = {\n                    endCoordinates,\n                    checkSquares: royalCoordinate <= 6 ? qArr.map((j) => j + royalCoordinate - 2) : qArr.map((j) => j + royalCoordinate - 3),\n                    pieceCoordinates: queensideCastlePieceCoordinate[i],\n                    pieceEndCoordinates: endCoordinates + 1\n                };\n                if (royalCoordinate <= 6) {\n                    this.castlingKingsideData[i] = castlingData;\n                }\n                else {\n                    this.castlingQueensideData[i] = castlingData;\n                }\n            }\n        }\n    }\n    isCastlingAvailable(player, board, checks) {\n        const royal = this.tag(\"royal\")[player];\n        if (royal === null)\n            return false;\n        const royalCoordinate = royal[getVerticalPlacementModulus(player)];\n        const squares = board.board;\n        for (const checkSquare of checks) {\n            const coordinateA = isVerticalPlacement(player) ? royalCoordinate : checkSquare;\n            const coordinateB = isVerticalPlacement(player) ? checkSquare : royalCoordinate;\n            if (!squares[coordinateA][coordinateB].isEmpty() ||\n                board.preGeneratedAttacks[player].hoppingPieces[coordinateA][coordinateB] > 0 ||\n                board.preGeneratedAttacks[player].slidingPieces[coordinateA][coordinateB] > 0)\n                return false;\n        }\n        if (board.isKingInCheck(player))\n            return false;\n        return true;\n    }\n    isKingsideCastlingAvailable(player, board) {\n        if (!this.tag(\"castleKingside\")[player])\n            return false;\n        if (this.castlingKingsideData[player].endCoordinates === -1) {\n            this.generateCastling(board);\n        }\n        return this.isCastlingAvailable(player, board, this.castlingKingsideData[player].checkSquares);\n    }\n    isQueensideCastlingAvailable(player, board) {\n        if (!this.tag(\"castleQueenside\")[player])\n            return false;\n        if (this.castlingQueensideData[player].endCoordinates === -1) {\n            this.generateCastling(board);\n        }\n        return this.isCastlingAvailable(player, board, this.castlingQueensideData[player].checkSquares);\n    }\n    getCastlingEndCoordinate(player, coordinates) {\n        const royalCoordinate = this.tag(\"royal\")[player]?.[getVerticalPlacementModulus(player)];\n        assertNonUndefined(coordinates);\n        assertNonUndefined(royalCoordinate);\n        const coordinateA = isVerticalPlacement(player) ? royalCoordinate : coordinates;\n        const coordinateB = isVerticalPlacement(player) ? coordinates : royalCoordinate;\n        return [coordinateA, coordinateB];\n    }\n    getKingsideCastlingEndCoordinate(player) {\n        return this.getCastlingEndCoordinate(player, this.castlingKingsideData[player].endCoordinates);\n    }\n    getQueensideCastlingEndCoordinate(player) {\n        return this.getCastlingEndCoordinate(player, this.castlingQueensideData[player].endCoordinates);\n    }\n    getKingsideCastlingPieceEndCoordinate(player) {\n        return this.getCastlingEndCoordinate(player, this.castlingKingsideData[player].pieceEndCoordinates);\n    }\n    getQueensideCastlingPieceEndCoordinate(player) {\n        return this.getCastlingEndCoordinate(player, this.castlingQueensideData[player].pieceEndCoordinates);\n    }\n    getKingsideCastlingTandemPiece(player) {\n        return this.castlingKingsideData[player].pieceCoordinates;\n    }\n    getQueensideCastlingTandemPiece(player) {\n        return this.castlingQueensideData[player].pieceCoordinates;\n    }\n    getAvailableEnPassantCaptures(baseColor) {\n        const coordinates = [];\n        this.tag(\"enPassant\").forEach((enPassant, i) => {\n            if (i === baseColor)\n                return;\n            if (enPassant)\n                coordinates.push(enPassant[0]);\n        });\n        return coordinates.map((e) => [...e]);\n    }\n    getDefaultZombieAlgorithm(baseColor) {\n        const algorithm = botAlgorithms.get(this.tag(\"resigned\")[baseColor] ? this.tag(\"zombieType\")[baseColor] : ZombieType.F_Checker);\n        assertNonUndefined(algorithm);\n        return algorithm;\n    }\n}\n","import { isVerticalPlacement } from \"../../BaseInterfaces\";\nimport { createDefaultArmyDeathSettings, createDefaultFENEffectSettings, getNeighboringSideToMove } from \"./FENDataInterface\";\nimport { InternalMoveSignature, SpecialMove, verifyDroppingMove, verifyInternalMove, verifyStandardMove } from \"../MoveTree/MoveTreeInterface\";\nimport { createTuple, throwOnNever } from \"../../../baseTypes\";\nimport { colors, getPlayerNameFromColor, totalPlayers, verifyDrawingTermination, verifyWinningTermination } from \"../GameInformation/GameData\";\nimport { createPieceFromData, emptyPieceString, deadColorIndex } from \"../GameInformation/GameUnits/PieceString\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { compareCoordinates } from \"../Board/BoardInterface\";\nimport { nonPlayablePieces, verifyNumericColor } from \"../GameInformation/GameUnits/GameUnits\";\nimport { FENOptions } from \"./FENOptions/FENOptions\";\nconst defaultPointsForMate = 20;\nclass FENData {\n    points;\n    sideToMove;\n    fenOptions;\n    plyCount;\n    board;\n    privateGameOver = false;\n    __baseClass;\n    initDecoratorSettings() {\n        /* no-op */\n    }\n    constructor() {\n        this.points = [0, 0, 0, 0];\n        this.sideToMove = 0;\n        this.fenOptions = new FENOptions();\n        this.plyCount = 0;\n        this.__baseClass = this;\n    }\n    get gameOver() {\n        return this.privateGameOver;\n    }\n    set gameOver(gameOver) {\n        if (gameOver === false || this.privateGameOver === false) {\n            this.privateGameOver = gameOver;\n        }\n    }\n    injectBoard(board) {\n        this.board = board;\n        this.fenOptions.generateCastling(board);\n    }\n    createClone() {\n        const newFENData = new FENData();\n        newFENData.fenOptions = this.fenOptions.createClone();\n        newFENData.points = [...this.points];\n        newFENData.sideToMove = this.sideToMove;\n        newFENData.plyCount = this.plyCount;\n        return newFENData;\n    }\n    createSnapshot() {\n        return {\n            points: [...this.points],\n            sideToMove: this.sideToMove,\n            fenOptionsSnapshot: this.fenOptions.createSnapshot(),\n            plyCount: this.plyCount,\n            gameOver: this.gameOver\n        };\n    }\n    loadSnapshot(snapshot) {\n        this.fenOptions.loadSnapshot(snapshot.fenOptionsSnapshot);\n        this.points = [...snapshot.points];\n        this.sideToMove = snapshot.sideToMove;\n        this.plyCount = snapshot.plyCount;\n        this.privateGameOver = snapshot.gameOver;\n    }\n    getCapturedPieces(moveData) {\n        const pieceString = this.board.board[moveData.endCoordinates[0]][moveData.endCoordinates[1]];\n        return pieceString.isEmpty() || pieceString.isDead() ? [] : [[...moveData.endCoordinates]];\n    }\n    getCastlingPieceEndCoordinates(coordinates, color) {\n        return [\n            isVerticalPlacement(color)\n                ? [coordinates[0], this.fenOptions.getKingsideCastlingTandemPiece(color)]\n                : [this.fenOptions.getKingsideCastlingTandemPiece(color), coordinates[1]],\n            isVerticalPlacement(color)\n                ? [coordinates[0], this.fenOptions.getQueensideCastlingTandemPiece(color)]\n                : [this.fenOptions.getQueensideCastlingTandemPiece(color), coordinates[1]]\n        ];\n    }\n    processStandardMove(moveData) {\n        const { startCoordinates: [startI, startJ], endCoordinates: [endI, endJ], promotion } = moveData;\n        const endPiece = this.board.board[endI][endJ];\n        const piece = promotion?.[0] ?? this.board.board[startI][startJ];\n        const capturedPieces = this.getCapturedPieces(moveData);\n        this.board.board[endI][endJ] = piece;\n        this.board.board[startI][startJ] = emptyPieceString;\n        for (const coordinate of capturedPieces) {\n            if (compareCoordinates(coordinate, moveData.startCoordinates)) {\n                this.board.board[endI][endJ] = emptyPieceString;\n            }\n            else if (!compareCoordinates(coordinate, moveData.endCoordinates)) {\n                this.board.board[coordinate[0]][coordinate[1]] = emptyPieceString;\n            }\n        }\n        const [kingsidePiece, queensidePiece] = this.getCastlingPieceEndCoordinates(moveData.startCoordinates, this.sideToMove);\n        if (\"specialType\" in moveData) {\n            const type = moveData.specialType;\n            switch (type) {\n                case SpecialMove.CastlingKingside: {\n                    const secondKPiece = isVerticalPlacement(this.sideToMove)\n                        ? this.board.board[startI][this.fenOptions.getKingsideCastlingTandemPiece(this.sideToMove)]\n                        : this.board.board[this.fenOptions.getKingsideCastlingTandemPiece(this.sideToMove)][startJ];\n                    const [kI, kJ] = this.fenOptions.getKingsideCastlingPieceEndCoordinate(this.sideToMove);\n                    this.board.board[kI][kJ] = secondKPiece;\n                    this.board.board[kingsidePiece[0]][kingsidePiece[1]] = emptyPieceString;\n                    break;\n                }\n                case SpecialMove.CastlingQueenside: {\n                    const secondQPiece = isVerticalPlacement(this.sideToMove)\n                        ? this.board.board[startI][this.fenOptions.getQueensideCastlingTandemPiece(this.sideToMove)]\n                        : this.board.board[this.fenOptions.getQueensideCastlingTandemPiece(this.sideToMove)][startJ];\n                    const [qI, qJ] = this.fenOptions.getQueensideCastlingPieceEndCoordinate(this.sideToMove);\n                    this.board.board[qI][qJ] = secondQPiece;\n                    this.board.board[queensidePiece[0]][queensidePiece[1]] = emptyPieceString;\n                    break;\n                }\n                default:\n                    if (type === undefined || !(type in SpecialMove)) {\n                        console.error(`Unknown special move constant: ${String(type)}`);\n                    }\n            }\n        }\n        const castleKingside = this.fenOptions.tag(\"castleKingside\"), castleQueenside = this.fenOptions.tag(\"castleQueenside\"), royal = this.fenOptions.tag(\"royal\");\n        this.fenOptions.setTag(\"royal\", this.fenOptions.tag(\"royal\").map((r, i) => {\n            if (r) {\n                if (r[0] === startI && r[1] === startJ) {\n                    castleKingside[i] = false;\n                    castleQueenside[i] = false;\n                    return [endI, endJ];\n                }\n                else\n                    return [...r];\n            }\n            else\n                return null;\n        }));\n        for (const color of colors) {\n            const royalPiece = royal[color];\n            if (!royalPiece)\n                continue;\n            if (compareCoordinates(royalPiece, moveData.startCoordinates)) {\n                castleKingside[color] = false;\n                castleQueenside[color] = false;\n                break;\n            }\n            else if (compareCoordinates(kingsidePiece, moveData.startCoordinates)) {\n                castleKingside[color] = false;\n                break;\n            }\n            else if (compareCoordinates(queensidePiece, moveData.startCoordinates)) {\n                castleQueenside[color] = false;\n                break;\n            }\n        }\n        return { endPiece: endPiece.isEmpty() ? [] : [endPiece] };\n    }\n    spreadPointsBetweenPlayersEvenly() {\n        const resigned = this.fenOptions.tag(\"resigned\"), dead = this.fenOptions.tag(\"dead\");\n        const realPlayers = resigned.reduce((p, n, i) => p + Number(n || dead[i]), 0);\n        const individualPoints = Math.ceil(this.obtainPointsForMate() / realPlayers);\n        for (const color of colors) {\n            if (!dead[color]) {\n                this.assignPoints(color, individualPoints);\n            }\n        }\n    }\n    branchBetweenResignationMoves(move, sideToMove) {\n        const playerName = getPlayerNameFromColor(sideToMove).toUpperCase();\n        switch (move) {\n            case InternalMoveSignature.Resign:\n                this.gameOver = `${playerName} RESIGNED!`;\n                break;\n            case InternalMoveSignature.Timeout:\n                this.gameOver = `${playerName} FORFEITS ON TIME!`;\n                break;\n            case InternalMoveSignature.ClaimWin:\n                this.gameOver = `${playerName} CLAIMED THE WIN!`;\n                break;\n            default:\n                throwOnNever(move);\n        }\n    }\n    processInternalMove(internalMove) {\n        const resigned = this.fenOptions.tag(\"resigned\"), dead = this.fenOptions.tag(\"dead\");\n        const stalemates = createTuple(false, totalPlayers);\n        const insufficientMaterial = this.board.insufficientMaterialChecker?.checkCurrentState(this.board).every((b, i) => {\n            if (i === this.sideToMove) {\n                return b;\n            }\n            else {\n                return b || dead[i];\n            }\n        });\n        switch (internalMove.type) {\n            case InternalMoveSignature.Stalemate:\n                dead[this.sideToMove] = true;\n                stalemates[this.sideToMove] = true;\n                break;\n            case InternalMoveSignature.Resign:\n            case InternalMoveSignature.Timeout:\n                if (insufficientMaterial) {\n                    this.assignGeneralTermination(\"Timeout vs Insufficient Material\");\n                }\n            // * Fallthrough\n            case InternalMoveSignature.ClaimWin: {\n                resigned[this.sideToMove] = true;\n                this.turnPiecesDead(this.sideToMove, { ...createDefaultArmyDeathSettings(), excludeRoyals: true, doNotSetDead: true });\n                const deadPlayers = dead.map((d, i) => d || resigned[i]).filter(Boolean);\n                let isResignationOver = deadPlayers.length === totalPlayers - 1;\n                if (insufficientMaterial) {\n                    this.spreadPointsBetweenPlayersEvenly();\n                }\n                else if (deadPlayers.length === totalPlayers - 1) {\n                    const alivePlayer = deadPlayers.findIndex((d) => !d);\n                    if (verifyNumericColor(alivePlayer)) {\n                        this.assignPoints(alivePlayer, this.countTotalPointsOnBoard().reduce((p, n, i) => p + (i === alivePlayer ? n : 0), 0));\n                        isResignationOver = true;\n                    }\n                }\n                else if (!this.board.gameType.isFFA()) {\n                    isResignationOver = true;\n                }\n                if (isResignationOver) {\n                    this.branchBetweenResignationMoves(internalMove.type, this.sideToMove);\n                }\n                break;\n            }\n            case InternalMoveSignature.DrawByAgreement:\n                this.gameOver = \"½-½ AGREED.\";\n                break;\n            case InternalMoveSignature.Pass:\n                break;\n            case InternalMoveSignature.TeamsCheckmate: {\n                this.gameOver = `CHECKMATE • ${this.getCurrentResult()}`;\n                this.turnPiecesDead(this.sideToMove);\n                this.turnPiecesDead(this.board.gameType.getTeammateColor(this.sideToMove));\n                break;\n            }\n            default:\n                throwOnNever(internalMove.type);\n        }\n        return { stalemates };\n    }\n    processDroppingMove(move) {\n        const bank = this.fenOptions.tag(\"bank\"), areBanksEnabled = this.fenOptions.tag(\"areBanksEnabled\"), setupComplete = this.fenOptions.tag(\"setupComplete\");\n        if (!this.board.variantData.duckChess && !areBanksEnabled[this.sideToMove])\n            return;\n        const playerBank = bank[this.sideToMove];\n        const pieceStringReference = [...playerBank.keys()].find((pieceString) => pieceString.piece === move.piece.piece);\n        if (!pieceStringReference && !this.board.variantData.duckChess && move.piece.piece !== nonPlayablePieces.duck)\n            return;\n        const safeReference = pieceStringReference ?? move.piece;\n        this.board.board[move.endCoordinates[0]][move.endCoordinates[1]] = move.piece;\n        if (!setupComplete[this.sideToMove])\n            return;\n        const bankPieceCount = playerBank.get(safeReference);\n        if (bankPieceCount == 1) {\n            playerBank.delete(safeReference);\n        }\n        else if (bankPieceCount) {\n            playerBank.set(safeReference, bankPieceCount - 1);\n        }\n    }\n    turnPiecesDead(color, settings = createDefaultArmyDeathSettings()) {\n        const royal = this.fenOptions.tag(\"royal\"), dead = this.fenOptions.tag(\"dead\");\n        const royalPiece = royal[color];\n        if (!settings.doNotSetDead) {\n            dead[color] = true;\n            royal[color] = null;\n        }\n        for (const coordinate of this.board.getPlayerPieces()[color]) {\n            if (settings.excludeRoyals && royalPiece && compareCoordinates(coordinate, royalPiece))\n                continue;\n            const piece = this.board.board[coordinate[0]][coordinate[1]].piece;\n            if (settings.onlyPawns && !pieceControlConfigSettings[piece].moveGenerationSettings.isPawn)\n                continue;\n            this.board.board[coordinate[0]][coordinate[1]] = createPieceFromData(deadColorIndex, this.board.board[coordinate[0]][coordinate[1]].piece);\n        }\n    }\n    getKingCaptures() {\n        const kingCaptures = createTuple(false, totalPlayers);\n        for (const color of colors) {\n            const royalCoordinate = this.fenOptions.tag(\"royal\")[color];\n            if (!royalCoordinate)\n                continue;\n            const pieceString = this.board.board[royalCoordinate[0]][royalCoordinate[1]];\n            if (pieceString.isEmpty() || pieceString.color !== color) {\n                kingCaptures[color] = true;\n            }\n        }\n        return kingCaptures;\n    }\n    processPointsForChecks(currentChecks) {\n        const sideToMove = this.sideToMove;\n        const updatedChecks = this.board.getCurrentChecks(), playerChecks = createTuple(false, totalPlayers);\n        for (const color of colors) {\n            for (const coordinate of updatedChecks[color]) {\n                if (!currentChecks[color].has(coordinate)) {\n                    playerChecks[color] = true;\n                    break;\n                }\n            }\n        }\n        const checkedPlayers = playerChecks.filter(Boolean).length;\n        if (checkedPlayers === 2) {\n            this.assignPoints(sideToMove, 1);\n        }\n        else if (checkedPlayers === 3) {\n            this.assignPoints(sideToMove, 5);\n        }\n    }\n    affectOptions(move, settings = createDefaultFENEffectSettings()) {\n        let moveStalemates;\n        let endSquare;\n        const currentChecks = this.board.getCurrentChecks().map((arr) => new Set(arr));\n        if (verifyInternalMove(move)) {\n            moveStalemates = this.processInternalMove(move).stalemates;\n        }\n        else if (verifyStandardMove(move)) {\n            endSquare = this.processStandardMove(move).endPiece;\n        }\n        else if (verifyDroppingMove(move)) {\n            this.processDroppingMove(move);\n        }\n        if (!settings.ignoreCheckmateChecks)\n            this.board.pregenerateAttacks();\n        const { checkmates, stalemates, checks } = settings.ignoreCheckmateChecks\n            ? {\n                checkmates: createTuple(false, totalPlayers),\n                checks: createTuple(false, totalPlayers),\n                stalemates: createTuple(false, totalPlayers)\n            }\n            : this.board.getCheckmatesAndStalemates();\n        if (moveStalemates) {\n            for (let i = 0; i < totalPlayers; i++) {\n                if (moveStalemates[i]) {\n                    stalemates[i] = true;\n                }\n            }\n        }\n        const totalMateSum = checkmates.reduce((p, n) => (n ? p + this.obtainPointsForMate() : p), 0);\n        const boardAlternations = {\n            pointDistribution: {\n                checkmatePoints: checkmates.map((_, i) => (i === this.sideToMove ? totalMateSum : 0)),\n                pieceCapturingPoints: createTuple(0, totalPlayers)\n            }\n        };\n        if (endSquare) {\n            for (const piece of endSquare) {\n                boardAlternations.pointDistribution.pieceCapturingPoints[this.sideToMove] = this.getPointsForPiece(piece);\n            }\n        }\n        const kingCaptures = this.getKingCaptures();\n        const dead = this.fenOptions.tag(\"dead\"), resigned = this.fenOptions.tag(\"resigned\");\n        if (this.board.gameType.isFFA()) {\n            for (const color of colors) {\n                if (dead[color] || resigned[color]) {\n                    continue;\n                }\n                if (checkmates[color] || (color === this.sideToMove && stalemates[color])) {\n                    this.turnPiecesDead(color);\n                    continue;\n                }\n                this.assignPoints(color, boardAlternations.pointDistribution.checkmatePoints[color] + boardAlternations.pointDistribution.pieceCapturingPoints[color]);\n            }\n        }\n        else {\n            for (const color of colors) {\n                if (kingCaptures[color]) {\n                    this.turnPiecesDead(color);\n                    this.assignGeneralTermination(\"King Captured\");\n                }\n            }\n        }\n        const realPlayers = this.getRealPlayers();\n        const isOver = this.board.gameType.isFFA() ? realPlayers === 1 : realPlayers !== totalPlayers;\n        if (isOver)\n            this.assignGeneralTermination(\"Checkmate\");\n        if (!settings.ignoreNextTurn && !isOver) {\n            this.processPointsForChecks(currentChecks);\n            const insufficientPieces = this.board.insufficientMaterialChecker?.checkCurrentState(this.board);\n            if (!this.gameOver && insufficientPieces?.every((insufficient, i) => dead[i] || insufficient)) {\n                this.gameOver = `INSUFFICIENT MATERIAL • ${this.getCurrentResult()}`;\n                this.spreadPointsBetweenPlayersEvenly();\n            }\n            if (this.getRealPlayers() > 1) {\n                this.sideToMove = this.nextTurn();\n            }\n        }\n        return { checkmates, stalemates, checks };\n    }\n    getRealPlayers() {\n        const dead = this.fenOptions.tag(\"dead\"), resigned = this.fenOptions.tag(\"resigned\");\n        let totalPlayers = 0;\n        for (const color of colors) {\n            if (resigned[color] || dead[color])\n                continue;\n            totalPlayers++;\n        }\n        return totalPlayers;\n    }\n    nextTurn(player = this.sideToMove) {\n        if (this.getRealPlayers() <= 1)\n            throw new Error(\"Next turn called while the game is terminated\");\n        return getNeighboringSideToMove(player, this.fenOptions.tag(\"dead\"));\n    }\n    previousTurn(player = this.sideToMove) {\n        const dead = this.fenOptions.tag(\"dead\");\n        if (this.getRealPlayers() <= 1)\n            throw new Error(\"Previous turn called while the game is terminated\");\n        let sideToMove = player;\n        do {\n            sideToMove = sideToMove === 0 ? totalPlayers - 1 : sideToMove - 1;\n        } while (dead[sideToMove]);\n        if (verifyNumericColor(sideToMove)) {\n            return sideToMove;\n        }\n        else\n            throw new Error(`Unexpected numeric color: ${sideToMove}`);\n    }\n    isComplexEvaluation() {\n        return false;\n    }\n    obtainPointsForMate() {\n        return defaultPointsForMate;\n    }\n    assignPoints(sideToMove, points) {\n        if (points > 0) {\n            this.points[sideToMove] += points;\n        }\n    }\n    getPointsForPiece(pieceString) {\n        if (pieceString.isPiece() && this.board.gameType.isFFA()) {\n            return pieceControlConfigSettings[pieceString.piece].points.singlesPoints;\n        }\n        else\n            return 0;\n    }\n    countTotalPointsOnBoard() {\n        const royal = this.fenOptions.tag(\"royal\"), resigned = this.fenOptions.tag(\"resigned\"), zombieImmune = this.fenOptions.tag(\"zombieImmune\");\n        const resultingPoints = [0, 0, 0, 0];\n        this.board.getPlayerPieces().forEach((army, color) => {\n            if (zombieImmune[color])\n                return;\n            const royalPiece = royal[color];\n            for (const coordinate of army) {\n                if (royalPiece && compareCoordinates(coordinate, royalPiece)) {\n                    resultingPoints[color] += this.obtainPointsForMate();\n                }\n                else if (resigned[color]) {\n                    const piece = this.board.board[coordinate[0]][coordinate[1]].piece;\n                    resultingPoints[color] += pieceControlConfigSettings[piece].points.singlesPoints;\n                }\n            }\n        });\n        return resultingPoints;\n    }\n    getCurrentResult() {\n        if (this.board.gameType.isFFA()) {\n            const dead = this.fenOptions.tag(\"dead\"), resigned = this.fenOptions.tag(\"resigned\");\n            if (!this.board.isTwoPlayer)\n                throw new Error(\"Result can only get called for 2P and teams\");\n            const max = Math.max(...this.points);\n            let firstAlivePlayer, maximumIndex;\n            for (const color of colors) {\n                if (dead[color] || resigned[color])\n                    continue;\n                if (this.points[color] === max) {\n                    if (maximumIndex === undefined) {\n                        maximumIndex = color;\n                    }\n                    else\n                        return \"½-½\";\n                }\n                if (firstAlivePlayer === undefined)\n                    firstAlivePlayer = color;\n            }\n            return firstAlivePlayer === maximumIndex ? \"1-0\" : \"0-1\";\n        }\n        else {\n            let result = \"½-½\";\n            for (const color of colors) {\n                if (this.points[color] > 0) {\n                    result = this.board.gameType.teamSettings.firstTeamColors[color] ? \"1-0\" : \"0-1\";\n                    break;\n                }\n            }\n            return result;\n        }\n    }\n    assignGeneralTermination(generalTermination, sideToMove) {\n        if (this.board.gameType.isFFA() && !this.board.isTwoPlayer) {\n            if (sideToMove !== undefined) {\n                switch (generalTermination) {\n                    case \"Stalemate\":\n                        this.gameOver = `${getPlayerNameFromColor(sideToMove).toUpperCase()} STALEMATED!`;\n                        return;\n                }\n            }\n            if (verifyWinningTermination(generalTermination)) {\n                this.gameOver = `${generalTermination.toUpperCase()}!`;\n            }\n            else if (verifyDrawingTermination(generalTermination)) {\n                this.gameOver = `${generalTermination.toUpperCase()}`;\n            }\n            else {\n                throwOnNever(generalTermination);\n            }\n        }\n        else {\n            this.gameOver = `${generalTermination.toUpperCase()} • ${this.getCurrentResult()}`;\n        }\n    }\n}\nexport { FENData, FENOptions };\n","import { verifyNumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { totalPlayers } from \"../GameInformation/GameData\";\nexport const createDefaultFENEffectSettings = () => ({\n    ignoreCheckmateChecks: false,\n    ignoreNextTurn: false\n});\nexport const createDefaultArmyDeathSettings = () => ({\n    excludeRoyals: false,\n    onlyPawns: false,\n    doNotSetDead: false\n});\nexport function getNeighboringSideToMove(player, dead) {\n    let sideToMove = player;\n    do {\n        sideToMove = sideToMove === totalPlayers - 1 ? 0 : sideToMove + 1;\n    } while (dead[sideToMove]);\n    if (verifyNumericColor(sideToMove)) {\n        return sideToMove;\n    }\n    else\n        throw new Error(`Unexpected numeric color: ${sideToMove}`);\n}\n","import { createTuple, createTupleFromCallback, verifyTupleType } from \"@client/ts/baseTypes\";\nimport { compareArrays } from \"@client/ts/utils/ArrayUtils\";\nimport { stringifyCoordinate, unstringifyCoordinate } from \"../../Board/BoardInterface\";\nimport { boardDimension, colors, convertCoordinateToPGN4, totalPlayers } from \"../../GameInformation/GameData\";\nimport { verifyNumericColor } from \"../../GameInformation/GameUnits/GameUnits\";\nimport { createPieceFromString, PieceString } from \"../../GameInformation/GameUnits/PieceString\";\nimport { verifyPieceLetter } from \"../../PieceControl/PieceControlInterface\";\nimport { verifyZombieType, ZombieType } from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/BotInterface\";\nimport { PGN4_SYNTAX } from \"@client/ts/logic/utils/Tags/Moves/ParsePGNMoves\";\nimport { parseEnPassantCoordinates, parseSingleCoordinate } from \"@client/ts/logic/utils/Tags/Utils\";\nimport { verifyObjectType } from \"@client/ts/utils/ObjectUtils\";\nconst verifyParameterType = (param, type) => {\n    return Array.isArray(param) && verifyTupleType(param, totalPlayers) && param.every((v) => typeof v === type);\n};\nexport function createBooleanTupleTag(parameters) {\n    const { defaultValue, key, isStatic } = parameters;\n    const resultingObject = {\n        value: [...defaultValue],\n        parse(value) {\n            if (verifyParameterType(value, \"boolean\")) {\n                return value;\n            }\n            else\n                return this.createSnapshot();\n        },\n        serialize() {\n            if (key === \"castleKingside\" || key === \"castleQueenside\" || key === \"dead\" || key === \"areBanksEnabled\")\n                return;\n            if (!compareArrays(this.value, defaultValue)) {\n                return `'${key}':(${this.value.join(\",\")})`;\n            }\n            else\n                return;\n        },\n        createSnapshot() {\n            return [...this.value];\n        },\n        loadSnapshot(snapshot) {\n            const tuple = [...snapshot];\n            this.value = tuple;\n        }\n    };\n    if (isStatic)\n        delete resultingObject.loadSnapshot;\n    return resultingObject;\n}\nconst defaultPawnBaseRank = 2;\nexport const createPawnBaseRankTag = () => ({\n    value: defaultPawnBaseRank,\n    parse(value) {\n        return typeof value === \"number\" && value > 0 && value <= boardDimension ? value : this.value;\n    },\n    serialize() {\n        return this.value === defaultPawnBaseRank ? undefined : `'pawnBaseRank':${this.value}`;\n    },\n    createSnapshot() {\n        return this.value;\n    }\n});\nexport const createEnPassantTag = () => ({\n    value: createTuple(null, totalPlayers),\n    parse(input) {\n        if (verifyParameterType(input, \"string\")) {\n            return input.map((v) => parseEnPassantCoordinates(v) ?? null);\n        }\n        else\n            return this.createSnapshot();\n    },\n    serialize() {\n        if (this.value.some((v) => !v)) {\n            return `'enPassant':(${this.value\n                .map((enP) => (enP ? `'${convertCoordinateToPGN4(enP[0])}:${convertCoordinateToPGN4(enP[1])}'` : \"''\"))\n                .join(\",\")})`;\n        }\n        else\n            return;\n    },\n    createSnapshot() {\n        return this.value.map((enP) => (enP ? [[...enP[0]], [...enP[1]]] : enP));\n    },\n    loadSnapshot(snapshot) {\n        this.value = snapshot.map((enP) => (enP ? [[...enP[0]], [...enP[1]]] : enP));\n    }\n});\nconst defaultCastleWith = \"R\";\nexport const createCastleWithTag = () => ({\n    value: defaultCastleWith,\n    parse(input) {\n        return typeof input === \"string\" ? input : this.value;\n    },\n    serialize() {\n        return this.value === defaultCastleWith ? undefined : `'castleWith':${this.value}`;\n    },\n    createSnapshot() {\n        return this.value;\n    }\n});\nconst defaultBoxOffset = 0;\nexport const createBoxOffsetTag = () => ({\n    value: defaultBoxOffset,\n    parse(input) {\n        return typeof input === \"number\" && verifyNumericColor(input) ? input : this.value;\n    },\n    serialize() {\n        return this.value === defaultBoxOffset ? undefined : `'boxOffset':${this.value}`;\n    },\n    createSnapshot() {\n        return this.value;\n    }\n});\nexport function createBooleanTag(parameters) {\n    const { defaultValue, key, isStatic } = parameters;\n    const result = {\n        value: defaultValue,\n        parse(input) {\n            return typeof input === \"boolean\" ? input : this.createSnapshot();\n        },\n        serialize() {\n            return this.value === defaultValue ? undefined : `'${key}':${String(this.value)}`;\n        },\n        createSnapshot() {\n            return this.value;\n        },\n        loadSnapshot(snapshot) {\n            this.value = snapshot;\n        }\n    };\n    if (isStatic)\n        delete result.loadSnapshot;\n    return result;\n}\nconst defaultDimension = [14, 14];\nexport const createDimensionTag = () => ({\n    value: [...defaultDimension],\n    parse(baseInput) {\n        if (typeof baseInput !== \"string\")\n            return this.createSnapshot();\n        const input = baseInput.split(\"x\");\n        return Array.isArray(input) &&\n            verifyTupleType(input, 2) &&\n            input.every((i) => {\n                const v = Number(i);\n                return !isNaN(v) && v >= 2 && v <= 14 && v % 2 === 0;\n            })\n            ? input.map((v) => Number(v)).reverse()\n            : this.createSnapshot();\n    },\n    serialize() {\n        if (compareArrays(this.value, defaultDimension))\n            return;\n        return `'dim':'${this.value.join(\"x\")}'`;\n    },\n    createSnapshot() {\n        return [...this.value];\n    }\n});\nconst defaultZombies = createTuple(ZombieType.Rando, totalPlayers);\nexport const createZombiesTag = () => ({\n    value: [...defaultZombies],\n    parse(input) {\n        if (Array.isArray(input) && verifyTupleType(input, totalPlayers) && input.every((v) => typeof v === \"string\")) {\n            const newZombies = this.createSnapshot();\n            for (const color of colors) {\n                const zombieType = input[color];\n                if (verifyZombieType(zombieType))\n                    newZombies[color] = zombieType;\n            }\n            return newZombies;\n        }\n        else\n            return this.createSnapshot();\n    },\n    serialize() {\n        if (compareArrays(this.value, defaultZombies))\n            return;\n        return `'zombieType':(${this.value.map((t, i) => (t === defaultZombies[i] ? \"''\" : `'${t}'`)).join(\",\")})`;\n    },\n    createSnapshot() {\n        return [...this.value];\n    }\n});\nexport const createRoyalTag = () => ({\n    value: createTuple(null, totalPlayers),\n    parse(input) {\n        if (verifyParameterType(input, \"string\")) {\n            return input.map((c) => parseSingleCoordinate(c) ?? null);\n        }\n        else\n            return this.createSnapshot();\n    },\n    serialize() {\n        return `'royal':(${this.value.map((r) => (r ? `'${convertCoordinateToPGN4(r)}'` : \"''\")).join(\",\")})`;\n    },\n    createSnapshot() {\n        return this.value.map((c) => (c ? [...c] : c));\n    },\n    loadSnapshot(snapshot) {\n        this.value = snapshot.map((c) => (c ? [...c] : c));\n    }\n});\nexport const createLivesTag = () => ({\n    value: createTuple(null, totalPlayers),\n    parse(input) {\n        if (verifyParameterType(input, \"number\")) {\n            return input;\n        }\n        else\n            return this.createSnapshot();\n    },\n    serialize() {\n        if (this.value.some((v) => v !== null)) {\n            return `'lives':(${this.value.map((l) => (l ? String(l) : \"1\")).join(\",\")})`;\n        }\n        else\n            return;\n    },\n    createSnapshot() {\n        return [...this.value];\n    },\n    loadSnapshot(snapshot) {\n        this.value = [...snapshot];\n    }\n});\nexport const createBankTag = () => ({\n    value: createTupleFromCallback(() => new Map(), totalPlayers),\n    parse(input) {\n        const defaultBanks = createTupleFromCallback(() => new Map(), totalPlayers);\n        if (verifyParameterType(input, \"string\")) {\n            for (const color of colors) {\n                for (const pieceDefinition of input[color].split(\",\")) {\n                    const [piece, count = 1] = pieceDefinition.split(\"x\").map((e, i) => (i === 1 ? Number(e) : e));\n                    if (typeof piece !== \"string\" || typeof count !== \"number\")\n                        continue;\n                    if (!/^(?:r|b|y|g).$/.test(piece))\n                        continue;\n                    const pieceLetter = piece.charAt(1);\n                    if (verifyPieceLetter(pieceLetter)) {\n                        defaultBanks[color].set(createPieceFromString(piece), count);\n                    }\n                }\n            }\n        }\n        return defaultBanks;\n    },\n    serialize() {\n        if (this.value.some((b) => b.size !== 0)) {\n            return `'bank':(${this.value\n                .map((bank) => {\n                const resultingStrings = [];\n                for (const [piece, count] of bank) {\n                    if (count === 1) {\n                        resultingStrings.push(piece.value);\n                    }\n                    else {\n                        resultingStrings.push(`${piece.value}x${count}`);\n                    }\n                }\n                return `'${resultingStrings.join(\",\")}'`;\n            })\n                .join(\",\")})`;\n        }\n        else\n            return;\n    },\n    createSnapshot() {\n        return this.value.map((m) => [...m.entries()].map(([pieceString, count]) => [pieceString.toObject(), count]));\n    },\n    loadSnapshot(snapshot) {\n        this.value = snapshot.map((v) => new Map(v.map(([pieceStringObject, count]) => [PieceString.fromObjectToClass(pieceStringObject), count])));\n    }\n});\nexport const createPromotedFromTag = () => ({\n    value: new Map(),\n    parse(input) {\n        const promotedFromMap = new Map();\n        if (!verifyObjectType(input))\n            return promotedFromMap;\n        for (const key in input) {\n            if (!Object.prototype.hasOwnProperty.call(promotedFromMap, key))\n                continue;\n            const parsedCoordinate = parseSingleCoordinate(key);\n            const pieceLetter = input[key];\n            if (!parsedCoordinate || typeof pieceLetter !== \"string\" || !verifyPieceLetter(pieceLetter))\n                continue;\n            promotedFromMap.set(parsedCoordinate, pieceLetter);\n        }\n        return promotedFromMap;\n    },\n    serialize() {\n        if (this.value.size === 0)\n            return;\n        const promotedFromStrings = [];\n        for (const [coordinate, piece] of this.value) {\n            promotedFromStrings.push(`'${convertCoordinateToPGN4(coordinate)}':'${piece}'`);\n        }\n        return `'promotedFrom':{${promotedFromStrings.join(\",\")}}`;\n    },\n    createSnapshot() {\n        const newMap = [];\n        for (const [coordinate, pieceLetter] of this.value.entries()) {\n            newMap.push([[...coordinate], pieceLetter]);\n        }\n        return newMap;\n    },\n    loadSnapshot(snapshot) {\n        this.value.clear();\n        for (const [coordinate, pieceLetter] of snapshot) {\n            this.value.set([...coordinate], pieceLetter);\n        }\n    }\n});\nexport const createSetupPointsTag = () => ({\n    value: null,\n    parse(input) {\n        if (verifyParameterType(input, \"number\")) {\n            return input;\n        }\n        else\n            return this.createSnapshot();\n    },\n    serialize() {\n        if (this.value) {\n            return `'setupPoints':(${this.value.join(\",\")})`;\n        }\n        else\n            return;\n    },\n    createSnapshot() {\n        return this.value ? [...this.value] : this.value;\n    },\n    loadSnapshot(snapshot) {\n        this.value = snapshot ? [...snapshot] : snapshot;\n    }\n});\nexport const createSeirawanDropsTag = () => ({\n    value: createTupleFromCallback(() => new Set(), totalPlayers),\n    parse(input) {\n        const defaultValue = createTupleFromCallback(() => new Set(), totalPlayers);\n        if (Array.isArray(input) &&\n            (verifyTupleType(input, totalPlayers) || verifyTupleType(input, totalPlayers + 1)) &&\n            input.every((v) => Array.isArray(v))) {\n            for (const color of colors) {\n                const seirawanDropsArray = input[color];\n                if (!seirawanDropsArray.every((v) => typeof v === \"string\"))\n                    continue;\n                for (const pieceDefinition of seirawanDropsArray) {\n                    if (!PGN4_SYNTAX.COORDINATE_REGEX.test(pieceDefinition))\n                        continue;\n                    const coordinate = parseSingleCoordinate(pieceDefinition);\n                    if (coordinate) {\n                        defaultValue[color].add(stringifyCoordinate(coordinate));\n                    }\n                }\n            }\n        }\n        return defaultValue;\n    },\n    serialize() {\n        if (this.value.every((m) => m.size === 0))\n            return;\n        return `'seirawanDrops':(${this.value\n            .map((coordinates) => {\n            return `(${[...coordinates].map((coord) => `'${convertCoordinateToPGN4(unstringifyCoordinate(coord))}'`).join(\",\")})`;\n        })\n            .join(\",\")})`;\n    },\n    createSnapshot() {\n        return this.value.map((s) => [...s.values()]);\n    },\n    loadSnapshot(snapshot) {\n        this.value = snapshot.map((s) => new Set(s));\n    }\n});\n","import { createTuple } from \"@client/ts/baseTypes\";\nimport { totalPlayers } from \"../../GameInformation/GameData\";\nimport * as Tags from \"./FENOptionsTags\";\nexport const verifyDynamicFENOptionKey = (fenTag, key) => \"loadSnapshot\" in fenTag;\nexport const verifyDynamicTag = (fenTag) => \"loadSnapshot\" in fenTag;\nexport function createFENOptionsTags() {\n    return {\n        dead: Tags.createBooleanTupleTag({ key: \"dead\", defaultValue: createTuple(false, totalPlayers), isStatic: false }),\n        resigned: Tags.createBooleanTupleTag({ key: \"resigned\", defaultValue: createTuple(false, totalPlayers), isStatic: false }),\n        pawnBaseRank: Tags.createPawnBaseRankTag(),\n        enPassant: Tags.createEnPassantTag(),\n        boxOffset: Tags.createBoxOffsetTag(),\n        wb: Tags.createBooleanTag({ key: \"wb\", defaultValue: false, isStatic: true }),\n        dim: Tags.createDimensionTag(),\n        noCorners: Tags.createBooleanTag({ key: \"noCorners\", defaultValue: false, isStatic: true }),\n        castleKingside: Tags.createBooleanTupleTag({ key: \"castleKingside\", defaultValue: createTuple(true, totalPlayers), isStatic: false }),\n        castleQueenside: Tags.createBooleanTupleTag({ key: \"castleQueenside\", defaultValue: createTuple(true, totalPlayers), isStatic: false }),\n        castleWith: Tags.createCastleWithTag(),\n        zombieType: Tags.createZombiesTag(),\n        zombieImmune: Tags.createBooleanTupleTag({ key: \"zombieImmune\", defaultValue: createTuple(false, totalPlayers), isStatic: false }),\n        royal: Tags.createRoyalTag(),\n        lives: Tags.createLivesTag(),\n        bank: Tags.createBankTag(),\n        promotedFrom: Tags.createPromotedFromTag(),\n        setupPoints: Tags.createSetupPointsTag(),\n        setupComplete: Tags.createBooleanTupleTag({ key: \"setupComplete\", defaultValue: createTuple(true, totalPlayers), isStatic: false }),\n        seirawanDrops: Tags.createSeirawanDropsTag(),\n        areBanksEnabled: Tags.createBooleanTupleTag({ key: \"areBanksEnabled\", defaultValue: createTuple(false, totalPlayers), isStatic: false })\n    };\n}\nexport function createFENOptionsTagsSnapshot(tags) {\n    const resultingTags = {};\n    let fenTag;\n    for (fenTag in tags) {\n        if (!Object.prototype.hasOwnProperty.call(tags, fenTag))\n            continue;\n        const tag = tags[fenTag];\n        if (!verifyDynamicFENOptionKey(tag, fenTag) || !verifyDynamicTag(tag))\n            continue;\n        resultingTags[fenTag] = tag.createSnapshot();\n    }\n    return resultingTags;\n}\n","import { throwOnNever } from \"@client/ts/baseTypes\";\nimport { truncateNumber } from \"@utils/NumberUtils\";\nexport const validateComprehensiveUnionArray = () => (arr) => arr;\nexport const playerNames = validateComprehensiveUnionArray()([\"Red\", \"Blue\", \"Yellow\", \"Green\", \"White\", \"Black\"]);\nconst individualTerminations = validateComprehensiveUnionArray()([\n    \"Won the Race\",\n    \"Checkmated\",\n    \"Stalemated\",\n    \"Forfeits on Time\",\n    \"Claimed the Win\",\n    \"Resigned\"\n]);\nconst generalWinningTerminations = validateComprehensiveUnionArray()([\n    \"Checkmate\",\n    \"King Captured\",\n    \"King of the Hill\",\n    \"Stalemate\"\n]);\nexport const verifyWinningTermination = (termination) => {\n    const generalWins = generalWinningTerminations;\n    return generalWins.includes(termination);\n};\nconst generalDrawingTerminations = validateComprehensiveUnionArray()([\n    \"50-move Rule\",\n    \"Insufficient Material\",\n    \"Threefold Repetition\",\n    \"Timeout vs Insufficient Material\"\n]);\nexport const verifyDrawingTermination = (termination) => {\n    const generalDraws = generalDrawingTerminations;\n    return generalDraws.includes(termination);\n};\nconst generalTerminations = validateComprehensiveUnionArray()([\n    ...generalWinningTerminations,\n    ...generalDrawingTerminations\n]);\nconst results = validateComprehensiveUnionArray()([\"0-1\", \"1-0\", \"½-½\"]);\nexport const validateTerminationString = (termination) => {\n    const capitalizedTermination = termination.toUpperCase();\n    if (playerNames.some((str) => capitalizedTermination.startsWith(str.toUpperCase())) &&\n        individualTerminations.some((str) => capitalizedTermination.endsWith(str.toUpperCase() + \"!\"))) {\n        return true;\n    }\n    else if (/.*?\\s•\\s.*/.test(capitalizedTermination) &&\n        generalTerminations.some((str) => capitalizedTermination.startsWith(str.toUpperCase())) &&\n        results.some((str) => capitalizedTermination.endsWith(str.toUpperCase()))) {\n        return true;\n    }\n    else if (capitalizedTermination === \"½-½ AGREED.\") {\n        return true;\n    }\n    return false;\n};\nexport const stringifyTimeControl = (timeControl) => {\n    const noIncrement = timeControl.increment === 0;\n    let timeControlString = \"\";\n    if (timeControl.baseTime < 60) {\n        timeControlString += noIncrement ? `${timeControl.baseTime * 60} sec` : `${timeControl.baseTime * 60}s`;\n    }\n    else if (timeControl.baseTime > 60 && noIncrement) {\n        timeControlString += `${truncateNumber(timeControl.baseTime / 60, 1)} min`;\n    }\n    else {\n        timeControlString += truncateNumber(timeControl.baseTime / 60, 1);\n    }\n    if (!noIncrement) {\n        timeControlString += \"|\";\n        timeControlString += timeControl.increment;\n    }\n    if (timeControl.isDelay) {\n        timeControlString += \"D\";\n    }\n    return timeControlString;\n};\nexport const obtainTimeControlType = (timeControl) => {\n    const { baseTime, increment, isDelay } = timeControl;\n    if (isDelay) {\n        const formula = baseTime / 40 + increment;\n        if (formula > 11.5) {\n            return TimeControlType.Rapid;\n        }\n        else if (formula <= 1.375) {\n            return TimeControlType.Hyperbullet;\n        }\n        else if (formula <= 4.5) {\n            return TimeControlType.Bullet;\n        }\n        else {\n            return TimeControlType.Blitz;\n        }\n    }\n    else {\n        const formula = baseTime / 60 + increment;\n        if (formula > 7.5) {\n            return TimeControlType.Rapid;\n        }\n        else if (formula <= 0.5) {\n            return TimeControlType.Hyperbullet;\n        }\n        else if (formula <= 3) {\n            return TimeControlType.Bullet;\n        }\n        else {\n            return TimeControlType.Blitz;\n        }\n    }\n};\nexport const convertCoordinateToPGN4 = (coordinate, dimension = boardDimension) => {\n    if (dimension === boardDimension) {\n        return `${String.fromCharCode(coordinate[1] + 97)}${boardDimension - coordinate[0]}`;\n    }\n    else {\n        const alternation = (boardDimension - dimension) / 2;\n        return `${String.fromCharCode(coordinate[1] - alternation + 97)}${boardDimension - coordinate[0] - alternation}`;\n    }\n};\nexport const convertCoordinateToPGN4Array = (coordinate, dimension = boardDimension) => {\n    if (dimension === boardDimension) {\n        return [String.fromCharCode(coordinate[1] + 97), boardDimension - coordinate[0]];\n    }\n    else {\n        const alternation = (boardDimension - dimension) / 2;\n        return [String.fromCharCode(coordinate[1] - alternation + 97), boardDimension - coordinate[0] - alternation];\n    }\n};\nexport const getOppositePlacedColor = (color) => {\n    switch (color) {\n        case 0:\n            return 2;\n        case 1:\n            return 3;\n        case 2:\n            return 0;\n        case 3:\n            return 1;\n        default:\n            return throwOnNever(color);\n    }\n};\nexport const getPlayerNameFromColor = (color, wb = false) => {\n    switch (color) {\n        case 0:\n            return wb ? \"White\" : \"Red\";\n        case 1:\n            return \"Blue\";\n        case 2:\n            return wb ? \"Black\" : \"Yellow\";\n        case 3:\n            return \"Green\";\n        default:\n            return throwOnNever(color);\n    }\n};\nexport const createDefaultNumericColorAdjustment = () => ({\n    wb: false\n});\nexport var TimeControlType;\n(function (TimeControlType) {\n    TimeControlType[\"Hyperbullet\"] = \"Hyperbullet\";\n    TimeControlType[\"Bullet\"] = \"Bullet\";\n    TimeControlType[\"Blitz\"] = \"Blitz\";\n    TimeControlType[\"Rapid\"] = \"Rapid\";\n})(TimeControlType || (TimeControlType = {}));\nexport var VariantType;\n(function (VariantType) {\n    VariantType[\"FFA\"] = \"FFA\";\n    VariantType[\"Teams\"] = \"Teams\";\n    VariantType[\"Solo\"] = \"Solo\";\n})(VariantType || (VariantType = {}));\nexport const totalPlayers = 4;\nexport const boardDimension = 14;\nexport const colors = [0, 1, 2, 3];\n","export const verifyNumericColor = (num) => num >= 0 && num < 4;\nexport const nonPlayablePieces = {\n    wall: \"X\",\n    transparentWall: \"x\",\n    duck: \"Θ\"\n};\nexport const colorEnum = {\n    r: 0,\n    b: 1,\n    y: 2,\n    g: 3\n};\nexport const verifyColorEnumValue = (value) => value in colorEnum;\nexport const playerEnum = {\n    Red: 0,\n    Blue: 1,\n    Yellow: 2,\n    Green: 3,\n    White: 0,\n    Black: 2\n};\nexport const verifyPlayerEnumValue = (player) => player in playerEnum;\nexport const stringColorEnum = {\n    [0]: \"r\",\n    [1]: \"b\",\n    [2]: \"y\",\n    [3]: \"g\",\n    [4]: \"d\"\n};\n","import { duckLetter, emptyLetter, pawnPieceLetter, verifyPieceLetter, wallPieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { colorEnum, stringColorEnum } from \"./GameUnits\";\nexport const deadColorIndex = 4;\nexport class PieceString {\n    _color;\n    _piece;\n    static comparePieceStrings(pieceString1, pieceString2) {\n        return pieceString1._piece === pieceString2._piece && pieceString1._color === pieceString2._color;\n    }\n    static comparePieceStringObjects(pieceString1, pieceString2) {\n        return pieceString1._piece === pieceString2._piece && pieceString1._color === pieceString2._color;\n    }\n    static fromObjectToClass(object) {\n        return new PieceString(object._color, object._piece);\n    }\n    value;\n    constructor(_color, _piece) {\n        this._color = _color;\n        this._piece = _piece;\n        this.value = _piece.length ? (/[xXΘ]/.test(_piece) ? _piece : stringColorEnum[_color] + _piece) : \"\";\n    }\n    isDead() {\n        return this._color === deadColorIndex && !this.isWall();\n    }\n    isEmpty() {\n        return this._piece.length === 0;\n    }\n    isWall() {\n        return this.value.length === 1;\n    }\n    isPiece() {\n        return this.value.length === 2 && this._color !== deadColorIndex;\n    }\n    get piece() {\n        if (this.isEmpty())\n            throw new TypeError(\"Accessing a piece string piece value while the piece string is empty.\");\n        return this._piece;\n    }\n    get color() {\n        if (this.isEmpty())\n            throw new TypeError(\"Accessing a piece string color value while the piece string is empty.\");\n        return this._color;\n    }\n    getStringifiedColor() {\n        return this.value.charAt(0);\n    }\n    toObject() {\n        return {\n            _piece: this._piece,\n            _color: this._color,\n            value: this.value\n        };\n    }\n}\nexport const createPieceFromData = (color, piece) => {\n    if (verifyPieceLetter(piece)) {\n        return new PieceString(color, piece);\n    }\n    throw new Error(\"Wrong color signature for the piece provided\");\n};\nexport const createPieceFromString = (piece) => {\n    const verifyColorEnum = (p) => p in colorEnum;\n    if (piece.length === 1 && verifyPieceLetter(piece)) {\n        return new PieceString(deadColorIndex, piece);\n    }\n    else {\n        const color = piece.charAt(0);\n        const pieceLetter = piece.charAt(1);\n        if (!verifyPieceLetter(pieceLetter))\n            throw new Error(\"Wrong signature for the piece provided\");\n        if (color === \"d\") {\n            return new PieceString(deadColorIndex, pieceLetter);\n        }\n        else {\n            if (verifyColorEnum(color)) {\n                return new PieceString(colorEnum[color], pieceLetter);\n            }\n            else\n                throw new Error(\"Wrong color signature for the piece provided\");\n        }\n    }\n};\nconst testEmptyPieceString = new PieceString(0, emptyLetter);\nif (!testEmptyPieceString.isEmpty())\n    throw new Error(\"Empty piece string is not isEmpty\");\nexport const emptyPieceString = testEmptyPieceString;\nconst testWallPieceString = new PieceString(deadColorIndex, wallPieceLetter);\nif (!testWallPieceString.isWall())\n    throw new Error(\"Wall piece string is not isWall\");\nexport const wallPieceString = testWallPieceString;\nconst testActivePieceString = new PieceString(0, pawnPieceLetter);\nif (!testActivePieceString.isPiece())\n    throw new Error(\"Active piece string is not isActive\");\nexport const pawnPieceString = testActivePieceString;\nconst testDuckPieceString = new PieceString(deadColorIndex, duckLetter);\nif (!testDuckPieceString.isWall())\n    throw new Error(\"Wall piece string is not isWall\");\nexport const duckPieceString = testActivePieceString;\n","import { throwOnNever } from \"@client/ts/baseTypes\";\nimport { compareArrays } from \"../../../utils/ArrayUtils\";\nimport { isVerticalPlacement } from \"../../BaseInterfaces\";\nimport { unstringifyCoordinate } from \"../Board/BoardInterface\";\nimport { convertCoordinateToPGN4Array, convertCoordinateToPGN4 } from \"../GameInformation/GameData\";\nimport { deadColorIndex, pawnPieceString } from \"../GameInformation/GameUnits/PieceString\";\nimport { SpecialMove, verifyDroppingMove, verifyInternalMove, verifyStandardMove } from \"./MoveTreeInterface\";\nfunction generateCastlingString(moveData) {\n    switch (moveData.specialType) {\n        case SpecialMove.CastlingKingside:\n            return \"O-O\";\n        case SpecialMove.CastlingQueenside:\n            return \"O-O-O\";\n        default:\n            return \"\";\n    }\n}\nfunction extractPiece(metadata) {\n    return metadata.movingPiece.piece !== pawnPieceString.piece ? metadata.movingPiece.piece : \"\";\n}\nfunction obtainAmbiguousOrthogonality(parameters) {\n    const { moveMetadata, move, snapshot: { boardSnapshot: { board }, pregeneratedAttacks: { pieceMovements } }, isCapture } = parameters;\n    const { piece, color } = moveMetadata.movingPiece;\n    const isPawn = piece === pawnPieceString.piece;\n    const registeredPieces = [];\n    for (const [piece, movements] of pieceMovements) {\n        const parsedCoordinate = unstringifyCoordinate(piece);\n        const boardPiece = board[parsedCoordinate[0]][parsedCoordinate[1]];\n        if (boardPiece.isEmpty() || boardPiece.color !== color || boardPiece.piece !== piece)\n            continue;\n        if (movements.find((m) => compareArrays(move.endCoordinates, m.move)) !== undefined) {\n            registeredPieces.push(parsedCoordinate);\n        }\n    }\n    if (color === deadColorIndex)\n        return [false, false];\n    const ambiguousRank = (isCapture && isPawn && isVerticalPlacement(color)) ||\n        registeredPieces.some((c, i) => registeredPieces.some((c2, j) => i !== j && c[0] === c2[0]));\n    const ambiguousFile = (isCapture && isPawn && !isVerticalPlacement(color)) ||\n        registeredPieces.some((c, i) => registeredPieces.some((c2, j) => i !== j && c[1] === c2[1]));\n    return [ambiguousRank, ambiguousFile];\n}\nfunction extractPromotion(move) {\n    return move.promotion ? `=${move.promotion[0].piece}` : \"\";\n}\nfunction extractChecksAndCheckmates(metadata) {\n    return \"+\".repeat(metadata.checks) + \"#\".repeat(metadata.checkmates);\n}\nexport const shortenedMoveNotationStringify = (moveWrapper, snapshot, dimension) => {\n    let resultingString = \"\";\n    let isFirstCapturingMoveSet = false;\n    for (const move of moveWrapper.moveData) {\n        if (verifyStandardMove(move)) {\n            if ((resultingString += generateCastlingString(move)))\n                continue;\n            resultingString += extractPiece(moveWrapper.metadata);\n            const isCapture = !isFirstCapturingMoveSet && moveWrapper.metadata.isCapture;\n            const [ambiguousRank, ambiguousFile] = obtainAmbiguousOrthogonality({\n                isCapture,\n                move,\n                snapshot,\n                moveMetadata: moveWrapper.metadata\n            });\n            if (ambiguousFile && !ambiguousRank) {\n                resultingString += convertCoordinateToPGN4Array(move.startCoordinates, dimension)[1];\n            }\n            else if (!ambiguousFile && ambiguousRank) {\n                resultingString += convertCoordinateToPGN4Array(move.startCoordinates, dimension)[0];\n            }\n            else if (ambiguousFile && ambiguousRank) {\n                resultingString += convertCoordinateToPGN4(move.startCoordinates, dimension);\n            }\n            if (isCapture) {\n                resultingString += \"x\";\n                isFirstCapturingMoveSet = true;\n            }\n            resultingString += convertCoordinateToPGN4(move.endCoordinates, dimension);\n            resultingString += extractPromotion(move);\n        }\n        else if (verifyDroppingMove(move)) {\n            resultingString += `@${move.piece.piece}`;\n            resultingString += `${convertCoordinateToPGN4(move.endCoordinates, dimension)}`;\n        }\n        else if (verifyInternalMove(move)) {\n            resultingString += move.type;\n        }\n        else\n            throwOnNever(move);\n    }\n    resultingString += extractChecksAndCheckmates(moveWrapper.metadata);\n    resultingString += moveWrapper.metadata.annotation ?? \"\";\n    return resultingString;\n};\nexport const fullMoveNotationStringify = (moveWrapper) => {\n    let resultingString = \"\";\n    let firstStandardMoveCaptureSet = false;\n    for (const move of moveWrapper.moveData) {\n        if (verifyStandardMove(move)) {\n            if ((resultingString += generateCastlingString(move)))\n                continue;\n            resultingString += extractPiece(moveWrapper.metadata);\n            resultingString += convertCoordinateToPGN4(move.startCoordinates);\n            if (!firstStandardMoveCaptureSet && moveWrapper.metadata.isCapture) {\n                resultingString += \"x\";\n                firstStandardMoveCaptureSet = true;\n            }\n            else\n                resultingString += \"-\";\n            resultingString += convertCoordinateToPGN4(move.endCoordinates);\n            resultingString += extractPromotion(move);\n        }\n        else if (verifyDroppingMove(move)) {\n            resultingString += `@${move.piece.piece}`;\n            resultingString += `-${convertCoordinateToPGN4(move.endCoordinates)}`;\n        }\n        else if (verifyInternalMove(move)) {\n            resultingString += move.type;\n        }\n        else\n            throwOnNever(move);\n    }\n    resultingString += extractChecksAndCheckmates(moveWrapper.metadata);\n    return resultingString;\n};\nexport const moveNotation = {\n    fullMoveNotation: fullMoveNotationStringify,\n    shortenedMoveNotation: shortenedMoveNotationStringify\n};\n","import { compareMoves, getMoveFromPathAndTree, verifyStandardMove } from \"./MoveTreeInterface\";\nimport { moveNotation } from \"./MoveNotationStringifier\";\nimport { compareArrays, findLastIndex } from \"@utils/ArrayUtils\";\nimport { pawnPieceString } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport { colors } from \"@moveGeneration/GameInformation/GameData\";\nimport { verifyDynamicFENOptionKey } from \"@moveGeneration/FENData/FENOptions/FENOptionsTagsInterface\";\nexport function alterCurrentPath(current, path) {\n    let currentMove = [...current];\n    for (let i = 0; i < currentMove.length; i++) {\n        if (path[i] > currentMove[i])\n            break;\n        if (path[i] === currentMove[i]) {\n            if (i === path.length - 1) {\n                currentMove = currentMove.slice(0, i + 1);\n                currentMove[i]--;\n                break;\n            }\n        }\n        else {\n            currentMove = currentMove.slice(0, i + 1);\n            currentMove[i] = path[i] - 1;\n            break;\n        }\n    }\n    const indexOfMinus = currentMove.indexOf(-1);\n    if (indexOfMinus !== -1) {\n        currentMove = currentMove.slice(0, indexOfMinus);\n        let lastNumber = 0;\n        do {\n            const popped = currentMove.pop();\n            if (popped === undefined) {\n                lastNumber = -1;\n                break;\n            }\n            lastNumber = popped;\n        } while (lastNumber <= 0);\n        if (lastNumber !== -1)\n            currentMove.push(lastNumber);\n    }\n    return currentMove;\n}\nexport function verifyValidMove(move) {\n    return move !== undefined && !Array.isArray(move);\n}\nexport function assertValidMove(move) {\n    if (!move || Array.isArray(move)) {\n        throw new Error(\"The selected move is not a valid move\");\n    }\n}\nexport const createMoveTree = (baseSnapshot) => {\n    const snapshots = new WeakMap();\n    const boardHashes = new Map();\n    const moves = [];\n    const startingSnapshot = {\n        boardSnapshot: baseSnapshot,\n        get hash() {\n            throw new Error(\"Should not access hash on base move\");\n        },\n        get pregeneratedAttacks() {\n            throw new Error(\"Should not access pregenerated attacks on base move\");\n        }\n    };\n    function obtainMatchingAlternativeLine(baseMoveWrapper, newMoveWrapper) {\n        for (const [alternativeFirstMove] of baseMoveWrapper.alternativeLines) {\n            if (alternativeFirstMove.moveData.length !== newMoveWrapper.moveData.length)\n                continue;\n            if (alternativeFirstMove.moveData.every((m, i) => compareMoves(m, newMoveWrapper.moveData[i]))) {\n                return alternativeFirstMove.path;\n            }\n        }\n        return false;\n    }\n    function stripEmptyAlternativeLines(current = moves) {\n        for (const moveWrapper of current) {\n            for (let i = 0; i < moveWrapper.alternativeLines.length; i++) {\n                if (moveWrapper.alternativeLines[i].length === 0) {\n                    moveWrapper.alternativeLines.splice(i, 1);\n                }\n                else\n                    stripEmptyAlternativeLines(moveWrapper.alternativeLines[i]);\n            }\n        }\n    }\n    function stripDeletedMoveHashes(current, currentMove) {\n        for (const moveWrapper of current) {\n            const snapshot = snapshots.get(moveWrapper);\n            if (!snapshot)\n                continue;\n            const { hash } = snapshot;\n            const boardHash = boardHashes.get(hash);\n            if (boardHash) {\n                if (boardHash.length === 1) {\n                    boardHashes.delete(hash);\n                }\n                else {\n                    const currentLine = boardHash.findIndex((p) => compareArrays(p, currentMove));\n                    if (currentLine === -1) {\n                        console.error(\"Current line for move wrapper not found in board hashes\");\n                    }\n                    else {\n                        boardHash.splice(currentLine, 1);\n                    }\n                }\n            }\n            for (const line of moveWrapper.alternativeLines)\n                stripDeletedMoveHashes(line, currentMove);\n        }\n    }\n    function addBoardSnapshot(parameters, currentMove) {\n        const { move, snapshot, fenDataString } = parameters;\n        snapshots.set(move, {\n            boardSnapshot: snapshot.boardSnapshot,\n            pregeneratedAttacks: snapshot.pregeneratedAttacks,\n            hash: fenDataString\n        });\n        const boardHash = boardHashes.get(fenDataString);\n        if (boardHash) {\n            const hasAdditionalPath = boardHash.find((p) => compareArrays(p, currentMove));\n            boardHashes.set(fenDataString, hasAdditionalPath ? boardHash : [...boardHash, currentMove.slice()]);\n        }\n        else\n            boardHashes.set(fenDataString, [currentMove.slice()]);\n    }\n    const assignMoveWrapperKey = (object, key, value) => {\n        object[key] = value;\n    };\n    return {\n        moves,\n        currentMove: [-1],\n        getMove(path) {\n            return getMoveFromPathAndTree(moves, path);\n        },\n        setNewMove(parameters) {\n            const { move } = parameters;\n            const moveWrapper = this.getMove(move.path.slice(0, -1));\n            let path = move.path.slice();\n            if (!moveWrapper)\n                return path;\n            if (Array.isArray(moveWrapper)) {\n                if (moveWrapper.length > move.path[move.path.length - 1]) {\n                    const currentMove = this.getMove(move.path);\n                    if (Array.isArray(currentMove)) {\n                        this.setNewMove({ ...parameters, move: { ...move, path: [...move.path, currentMove.length] } });\n                    }\n                    else if (currentMove) {\n                        const alternativeLine = obtainMatchingAlternativeLine(currentMove, move);\n                        if (alternativeLine) {\n                            return alternativeLine;\n                        }\n                        else {\n                            currentMove.alternativeLines.push([]);\n                            const newMove = { ...move, path: [...move.path, currentMove.alternativeLines.length - 1, 0] };\n                            path = newMove.path.slice();\n                            return this.setNewMove({ ...parameters, move: newMove });\n                        }\n                    }\n                }\n                else {\n                    moveWrapper.push(move);\n                    addBoardSnapshot(parameters, this.currentMove);\n                }\n            }\n            else {\n                let key;\n                for (key in move) {\n                    if (Object.prototype.hasOwnProperty.call(move, key))\n                        assignMoveWrapperKey(moveWrapper, key, move[key]);\n                }\n                addBoardSnapshot(parameters, this.currentMove);\n            }\n            return path;\n        },\n        getBoardSnapshot(move) {\n            if (move === -1) {\n                return startingSnapshot;\n            }\n            else {\n                return snapshots.get(move);\n            }\n        },\n        deleteMove(path) {\n            let items = [];\n            const moveWrapper = this.getMove(path.slice(0, -1));\n            if (!moveWrapper)\n                return;\n            const finalIndex = path[path.length - 1];\n            if (Array.isArray(moveWrapper)) {\n                items = [...moveWrapper.splice(finalIndex, moveWrapper.length - finalIndex)];\n            }\n            else {\n                if (moveWrapper.alternativeLines.length > 0) {\n                    items = moveWrapper.alternativeLines.splice(path[path.length - 1], 1)[0];\n                }\n            }\n            stripDeletedMoveHashes(items, this.currentMove);\n            stripEmptyAlternativeLines();\n            const newCurrentMove = alterCurrentPath(this.currentMove, path);\n            this.currentMove = newCurrentMove.length === 0 ? [-1] : newCurrentMove;\n        },\n        getHash(preliminaryHashString) {\n            const hash = boardHashes.get(preliminaryHashString);\n            if (hash === undefined)\n                return 0;\n            let totalCount = 0;\n            for (const line of hash) {\n                for (let i = 0; i < line.length; i++) {\n                    if (i + (1 % 2) !== 0 && i === line.length - 1) {\n                        totalCount++;\n                    }\n                    else if (line[i] !== this.currentMove[i])\n                        break;\n                }\n            }\n            return totalCount;\n        },\n        stringifyMove(moveWrapper, dimension) {\n            const snapshot = this.getBoardSnapshot(moveWrapper);\n            if (!snapshot) {\n                console.error(\"No snapshot assigned when moveWrapper is called\");\n                return \"\";\n            }\n            let key;\n            for (key in moveNotation) {\n                if (!Object.prototype.hasOwnProperty.call(moveNotation, key))\n                    continue;\n                moveWrapper.cachedNames[key] = moveNotation[key](moveWrapper, snapshot, dimension);\n            }\n        },\n        augmentMoveWithMetadata(parameters) {\n            const { move, board, makeMoveFunction } = parameters;\n            const standardMove = move.find((m) => verifyStandardMove(m));\n            const movingPiece = standardMove ? board.board[standardMove.startCoordinates[0]][standardMove.startCoordinates[1]] : pawnPieceString;\n            const capturedPieces = standardMove ? board.data.getCapturedPieces(standardMove).length !== 0 : false;\n            const postMoveResults = makeMoveFunction();\n            const deadColors = [...board.data.fenOptions.tag(\"dead\")];\n            const currentSideToMove = board.data.sideToMove, currentMove = board.moves.getMove(board.moves.currentMove);\n            assertValidMove(currentMove);\n            if (board.moves.currentMove[board.moves.currentMove.length - 1] === 0 ||\n                findLastIndex(deadColors, (b) => !b) === currentSideToMove) {\n                const lastCurrentMoves = board.moves.getMove(board.moves.currentMove.slice(0, -1));\n                if (!Array.isArray(lastCurrentMoves))\n                    throw new Error(\"The selected move is not within an array\");\n                for (let i = lastCurrentMoves.length - 1; i >= 0; i--) {\n                    const lastCurrent = lastCurrentMoves[i].metadata.currentFullMove;\n                    if (lastCurrent) {\n                        currentMove.metadata.currentFullMove = lastCurrent + 1;\n                        break;\n                    }\n                    else if (i === 0) {\n                        if (currentMove.path.length === 1) {\n                            currentMove.metadata.currentFullMove = 1;\n                        }\n                        else {\n                            const alternativeLineContainer = board.moves.getMove(board.moves.currentMove.slice(0, -3));\n                            if (!Array.isArray(alternativeLineContainer))\n                                throw new Error(\"The selected move is not within an array\");\n                            currentMove.metadata.currentFullMove =\n                                alternativeLineContainer[findLastIndex(alternativeLineContainer, (m) => Boolean(m.metadata.currentFullMove))].metadata.currentFullMove;\n                        }\n                    }\n                }\n            }\n            currentMove.metadata.currentSideToMove = currentSideToMove;\n            currentMove.metadata.isCapture = capturedPieces;\n            currentMove.metadata.movingPiece = movingPiece;\n            for (const color of colors) {\n                if (postMoveResults.checkmates[color]) {\n                    currentMove.metadata.checkmates++;\n                }\n                else if (postMoveResults.checks[color]) {\n                    currentMove.metadata.checks++;\n                }\n            }\n            this.stringifyMove(currentMove, Math.max(...board.data.fenOptions.tag(\"dim\")));\n        },\n        constructPreliminaryHashString(boardObject) {\n            const { board, data } = boardObject;\n            let builder = \"\";\n            builder += data.sideToMove;\n            let key;\n            for (key in data.fenOptions.tags) {\n                const tag = data.fenOptions.tags[key];\n                if (!verifyDynamicFENOptionKey(tag, key))\n                    continue;\n                const serializedForm = tag.serialize();\n                if (serializedForm)\n                    builder += serializedForm;\n            }\n            builder = board.reduce((p, n) => p + n.map((ps) => ps.value || \"-\").join(\"\"), builder);\n            return builder;\n        }\n    };\n};\n","import { compareCoordinates } from \"../Board/BoardInterface\";\nimport { pawnPieceString, PieceString } from \"../GameInformation/GameUnits/PieceString\";\nexport var SpecialMove;\n(function (SpecialMove) {\n    SpecialMove[SpecialMove[\"CastlingKingside\"] = 0] = \"CastlingKingside\";\n    SpecialMove[SpecialMove[\"CastlingQueenside\"] = 1] = \"CastlingQueenside\";\n    SpecialMove[SpecialMove[\"EnPassant\"] = 2] = \"EnPassant\";\n})(SpecialMove || (SpecialMove = {}));\nexport var InternalMoveSignature;\n(function (InternalMoveSignature) {\n    InternalMoveSignature[\"Resign\"] = \"R\";\n    InternalMoveSignature[\"Timeout\"] = \"T\";\n    InternalMoveSignature[\"ClaimWin\"] = \"C\";\n    InternalMoveSignature[\"DrawByAgreement\"] = \"D\";\n    InternalMoveSignature[\"Stalemate\"] = \"S\";\n    InternalMoveSignature[\"Pass\"] = \"P\";\n    InternalMoveSignature[\"TeamsCheckmate\"] = \"#\";\n})(InternalMoveSignature || (InternalMoveSignature = {}));\nexport const verifyRequiredMove = (move) => move.length > 0;\nexport function verifyMoveWrapperProperties(moveWrapper) {\n    return Boolean(moveWrapper.alternativeLines && moveWrapper.comment !== undefined && moveWrapper.path && moveWrapper.metadata && moveWrapper.moveData);\n}\nexport function compareMoves(move1, move2) {\n    if (verifyStandardMove(move1)) {\n        if (!verifyStandardMove(move2))\n            return false;\n        return (compareCoordinates(move1.startCoordinates, move2.startCoordinates) &&\n            compareCoordinates(move1.endCoordinates, move2.endCoordinates) &&\n            (move1.specialType === move2.specialType ||\n                move1.specialType === SpecialMove.EnPassant ||\n                move2.specialType === SpecialMove.EnPassant));\n    }\n    else if (verifyDroppingMove(move1)) {\n        if (!verifyDroppingMove(move2))\n            return false;\n        return compareCoordinates(move1.endCoordinates, move2.endCoordinates) && PieceString.comparePieceStrings(move1.piece, move2.piece);\n    }\n    else if (verifyInternalMove(move1)) {\n        if (!verifyInternalMove(move2))\n            return false;\n        return move1.type === move2.type;\n    }\n    throw new Error(`Unexpected move signature of first move ${JSON.stringify(move1)}`);\n}\nexport function createDummyMoveMetadata() {\n    return {\n        isCapture: false,\n        movingPiece: pawnPieceString,\n        checks: 0,\n        checkmates: 0,\n        currentSideToMove: 0,\n        highlightedArrows: [],\n        highlightedSquares: []\n    };\n}\nexport const createBaseMoveWrapper = (requiredSettings, settings = {}) => {\n    const wrapper = {\n        path: requiredSettings.path,\n        moveData: requiredSettings.moveData,\n        comment: \"\",\n        alternativeLines: [],\n        metadata: createDummyMoveMetadata(),\n        cachedNames: {\n            fullMoveNotation: \"\",\n            shortenedMoveNotation: \"\"\n        }\n    };\n    return {\n        ...wrapper,\n        ...settings\n    };\n};\nexport const verifyInternalMove = (move) => \"type\" in move;\nexport const verifyDroppingMove = (move) => \"piece\" in move;\nexport const verifyStandardMove = (move) => \"startCoordinates\" in move;\nexport const verifyInternalMoveArray = (move) => \"type\" in move[0];\nexport const verifyDroppingMoveArray = (move) => \"piece\" in move[0];\nexport const verifyStandardMoveArray = (move) => \"startCoordinates\" in move[0];\nexport const getMoveFromPathAndTree = (moves, path) => {\n    if (path.length === 0)\n        return moves;\n    const movePath = path.slice();\n    if (movePath[0] >= moves.length)\n        return;\n    let currentSelection = moves[movePath.shift() ?? 0];\n    while (movePath.length > 0) {\n        const currentIndex = movePath.shift();\n        if (currentIndex !== undefined) {\n            if (currentIndex >= currentSelection.alternativeLines.length)\n                return;\n            const alternativeLine = currentSelection.alternativeLines[currentIndex];\n            const index = movePath.shift();\n            if (index === undefined) {\n                return alternativeLine;\n            }\n            if (index >= alternativeLine.length)\n                return;\n            currentSelection = alternativeLine[index];\n        }\n    }\n    return currentSelection;\n};\nexport const getLatestChainedMoves = (move) => {\n    if (move.length > 0 && move[0].nextChainedMoves) {\n        return getLatestChainedMoves(move[0].nextChainedMoves);\n    }\n    else\n        return move;\n};\n","import { boardDimension } from \"@moveGeneration/GameInformation/GameData\";\nimport { deadColorIndex } from \"../GameInformation/GameUnits/PieceString\";\nimport { AttackType } from \"./PieceControlInterface\";\nexport class PieceControl {\n    color;\n    sliding;\n    jumping;\n    hooks;\n    moves;\n    rayGenCache;\n    baseRankActive;\n    immunePieces;\n    fenData;\n    board;\n    i;\n    j;\n    __baseClass;\n    initDecoratorSettings() {\n        /* no-op */\n    }\n    /*---------------------------------- INITIALIZATION -----------------------------------------*/\n    constructor() {\n        this.moves = [];\n        this.color = 0;\n        this.sliding = [];\n        this.jumping = [];\n        this.rayGenCache = [];\n        this.hooks = {\n            useTrajectory: undefined,\n            usePerspective: undefined,\n            usePawnLogic: undefined,\n            useHopping: false\n        };\n        this.baseRankActive = false;\n        this.immunePieces = [false, false, false, false];\n        this.__baseClass = this;\n    }\n    configure(configuration) {\n        this.color = configuration.color;\n        this.immunePieces = configuration.immunePieces;\n        [this.i, this.j] = configuration.coordinates;\n        const baseRankCalc = [13 - this.i, this.j, this.i, 13 - this.j][this.color] - this.fenData.fenOptions.tag(\"pawnBaseRank\");\n        this.baseRankActive = configuration.baseRank ?? (baseRankCalc === -1 || baseRankCalc === -2);\n        this.board = configuration.board;\n    }\n    setFENData(fenData) {\n        this.fenData = fenData;\n    }\n    isRayTrace(attackType) {\n        return attackType === AttackType.RayTrace || attackType === AttackType.RayTraceLimited;\n    }\n    /*---------------------------------- INITIALIZATION -----------------------------------------*/\n    /*-------------------------------------------------------------------------------------------*/\n    /*--------------------------------- MOVE GENERATION -----------------------------------------*/\n    modifyDisplacements(i, j) {\n        const baseDisplacements = [\n            [i, j],\n            [j, -i],\n            [-i, -j],\n            [-j, i]\n        ];\n        return baseDisplacements[this.color];\n    }\n    pushMove(settings) {\n        if (!settings.isRayGen &&\n            this.hooks.usePawnLogic &&\n            this.hooks.usePawnLogic.promotionRanks &&\n            this.hooks.usePawnLogic.promotionRanks[this.color] === (this.color % 2 === 0 ? settings.i : settings.j) &&\n            this.hooks.usePawnLogic.promotionPieces) {\n            this.moves.push({\n                move: [settings.i, settings.j, this.hooks.usePawnLogic.promotionPieces.join(\"\")],\n                irreversible: settings.irreversible ?? false\n            });\n            return;\n        }\n        else {\n            this.moves.push({\n                move: [settings.i, settings.j],\n                irreversible: settings.irreversible ?? false\n            });\n        }\n    }\n    generateSlidingAttack(settings) {\n        let [displacementI, displacementJ] = settings.displacement, limit = settings.limit ?? Infinity;\n        const rayGenCache = settings.rayGenCache, special = settings.special ?? AttackType.Normal;\n        let rayTraceLimit = 0;\n        if (this.hooks.usePerspective?.[this.color]) {\n            [displacementI, displacementJ] = this.modifyDisplacements(displacementI, displacementJ);\n        }\n        let startI = this.i + displacementI, startJ = this.j + displacementJ;\n        const iLength = this.board[0].length, jLength = this.board.length;\n        const isRayGen = rayGenCache ?? this.isRayTrace(special);\n        while (limit > 0 && startI >= 0 && startI < iLength && startJ >= 0 && startJ < jLength) {\n            // TODO add trajectories?\n            if (this.getMovePossibility({ displacement: [startI, startJ], special, rayGenCache })) {\n                this.pushMove({ i: startI, j: startJ, isRayGen: Boolean(isRayGen), irreversible: settings.irreversible });\n            }\n            if (special === AttackType.RayTraceLimited && !this.board[startI][startJ].isEmpty()) {\n                rayTraceLimit++;\n                if (rayTraceLimit === 2)\n                    break;\n            }\n            if (!this.isRayTrace(special) && !this.board[startI][startJ].isEmpty()) {\n                break;\n            }\n            startI += displacementI;\n            startJ += displacementJ;\n            limit--;\n        }\n    }\n    generateJumpAttack(settings) {\n        let [displacementI, displacementJ] = settings.displacement;\n        const rayGenCache = settings.rayGenCache, squareBlockingIndex = settings.squareBlockingIndex, special = settings.special ?? AttackType.Normal;\n        if (this.hooks.usePerspective?.[this.color]) {\n            [displacementI, displacementJ] = this.modifyDisplacements(displacementI, displacementJ);\n        }\n        const startI = this.i + displacementI, startJ = this.j + displacementJ;\n        const isRayGen = rayGenCache ?? this.isRayTrace(special);\n        let isTestPassed = true;\n        if (this.hooks.useTrajectory && squareBlockingIndex !== undefined) {\n            const trajectory = this.hooks.useTrajectory[squareBlockingIndex];\n            let trajectoryX, trajectoryY;\n            if (this.hooks.usePerspective?.[this.color]) {\n                [trajectoryX, trajectoryY] = this.modifyDisplacements(trajectory[0], trajectory[1]);\n            }\n            else {\n                (trajectoryX = trajectory[0]), (trajectoryY = trajectory[1]);\n            }\n            if (!this.getMovePossibility({ displacement: [this.i + trajectoryX, this.j + trajectoryY], special, rayGenCache })) {\n                isTestPassed = false;\n            }\n        }\n        if (isTestPassed && this.getMovePossibility({ displacement: [startI, startJ], special, rayGenCache })) {\n            this.pushMove({ i: startI, j: startJ, isRayGen: Boolean(isRayGen), irreversible: settings.irreversible });\n        }\n    }\n    getMovePossibility(configuration) {\n        const { displacement: [i, j], rayGenCache, special } = configuration;\n        if (i < 0 || i >= boardDimension || j < 0 || j >= boardDimension)\n            return false;\n        const piece = this.board[i][j];\n        if (!piece.isEmpty() && piece.color !== deadColorIndex && !rayGenCache && !this.isRayTrace(special ?? AttackType.Normal)) {\n            if (this.immunePieces[piece.color] || this.fenData.fenOptions.tag(\"zombieImmune\")[piece.color])\n                return false;\n        }\n        const pushTo = () => {\n            if (rayGenCache) {\n                this.rayGenCache.push(rayGenCache);\n            }\n            return true;\n        };\n        if (special === undefined || special === AttackType.Normal) {\n            if (!piece.isWall()) {\n                return pushTo();\n            }\n        }\n        else if (special === AttackType.RayGen) {\n            if (!piece.isEmpty()) {\n                return pushTo();\n            }\n        }\n        else if (special === AttackType.AttackOnly) {\n            if (!piece.isEmpty() && !piece.isWall()) {\n                return pushTo();\n            }\n        }\n        else if (special === AttackType.MoveOnly) {\n            if (piece.isEmpty()) {\n                return pushTo();\n            }\n        }\n        else if (this.isRayTrace(special)) {\n            return pushTo();\n        }\n        return false;\n    }\n    /*--------------------------------- MOVE GENERATION -----------------------------------------*/\n    /*-------------------------------------------------------------------------------------------*/\n    /*------------------------------- OUTPUT GENERATION -----------------------------------------*/\n    getPossibleCells() {\n        if (this.hooks.useHopping) {\n            this.sliding.forEach((displacement) => this.generateSlidingAttack({ displacement, special: AttackType.RayGen, rayGenCache: [...displacement] }));\n            const moves = this.moves.slice();\n            this.moves = [];\n            moves.forEach((s, i) => {\n                const startI = s.move[0] + this.rayGenCache[i][0];\n                const startJ = s.move[1] + this.rayGenCache[i][1];\n                if (this.getMovePossibility({ displacement: [startI, startJ] })) {\n                    this.pushMove({ i: startI, j: startJ });\n                }\n            });\n            this.rayGenCache = [];\n        }\n        else {\n            this.sliding.forEach((a) => this.generateSlidingAttack({ displacement: a }));\n            this.jumping.forEach((a) => this.generateJumpAttack({ displacement: a }));\n        }\n    }\n    rayGenJumpingAttacks() {\n        this.jumping.forEach((a) => this.generateJumpAttack({ displacement: a, special: AttackType.RayTrace }));\n        return this.moves.splice(0);\n    }\n    rayGenSlidingAttacks(trace) {\n        const slidingLines = [];\n        this.sliding.forEach((a) => {\n            this.generateSlidingAttack({ displacement: a, special: trace });\n            if (this.moves.length !== 0) {\n                slidingLines.push(this.moves.splice(0));\n            }\n        });\n        return slidingLines;\n    }\n    getPseudoLegalMoves() {\n        this.getPossibleCells();\n        return this.moves.splice(0);\n    }\n}\n","import { PieceControl } from \"./PieceControl\";\nimport { AttackType, createPieceDeclaration, defaultPieces, grasshopperPieceLetter, pawnPieceLetter } from \"./PieceControlInterface\";\nconst orthogonalMoves = [\n    [-1, 0],\n    [1, 0],\n    [0, 1],\n    [0, -1]\n];\nconst diagonalMoves = [\n    [-1, -1],\n    [1, 1],\n    [-1, 1],\n    [1, -1]\n];\nconst kingDirections = [...orthogonalMoves, ...diagonalMoves];\nconst knightHops = [\n    [-1, -2],\n    [-2, -1],\n    [-1, 2],\n    [2, -1],\n    [-2, 1],\n    [1, -2],\n    [1, 2],\n    [2, 1]\n];\nconst camelHops = [\n    [-1, -3],\n    [-3, -1],\n    [-1, 3],\n    [3, -1],\n    [-3, 1],\n    [1, -3],\n    [1, 3],\n    [3, 1]\n];\nconst dabbabaHops = [\n    [-2, 0],\n    [2, 0],\n    [0, 2],\n    [0, -2]\n];\nconst alfilHops = [\n    [-2, -2],\n    [2, 2],\n    [-2, 2],\n    [2, -2]\n];\nexport const initPieceControlDeclarations = () => {\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.sliding = orthogonalMoves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 5,\n                teamsPoints: 5,\n                botFFAValue: 7,\n                botTeamsValue: 7\n            },\n            piece: defaultPieces.rook,\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: false,\n                isSliding: true,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Rook\",\n                shortName: defaultPieces.rook.toLowerCase()\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.sliding = diagonalMoves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 5,\n                teamsPoints: 4,\n                botFFAValue: 6,\n                botTeamsValue: 6\n            },\n            piece: defaultPieces.bishop,\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: false,\n                isSliding: true,\n                isPawn: false,\n                isColorBound: true\n            },\n            naming: {\n                name: \"Bishop\",\n                shortName: defaultPieces.bishop.toLowerCase()\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = kingDirections;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 3,\n                teamsPoints: 0,\n                botFFAValue: 3,\n                botTeamsValue: 3\n            },\n            piece: defaultPieces.king,\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"King\",\n                shortName: defaultPieces.king.toLowerCase()\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.sliding = kingDirections;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 9,\n                teamsPoints: 10,\n                botFFAValue: 14,\n                botTeamsValue: 15\n            },\n            piece: defaultPieces.queen,\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: false,\n                isSliding: true,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Queen\",\n                shortName: defaultPieces.queen.toLowerCase()\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.sliding = kingDirections;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 9,\n                teamsPoints: 10,\n                botFFAValue: 13,\n                botTeamsValue: 13\n            },\n            piece: \"D\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: false,\n                isSliding: true,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"1-point queen\",\n                shortName: \"d\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = knightHops;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 3,\n                teamsPoints: 3,\n                botFFAValue: 4,\n                botTeamsValue: 4\n            },\n            piece: defaultPieces.knight,\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Knight\",\n                shortName: defaultPieces.knight.toLowerCase()\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = [...knightHops, ...kingDirections];\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 5,\n                teamsPoints: 5,\n                botFFAValue: 7,\n                botTeamsValue: 7\n            },\n            piece: \"M\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"General\",\n                shortName: \"m\",\n                description: \"combines king and knight\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = diagonalMoves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 1,\n                teamsPoints: 1,\n                botFFAValue: 0.6,\n                botTeamsValue: 0.6\n            },\n            piece: \"F\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: false,\n                isColorBound: true\n            },\n            naming: {\n                name: \"Ferz\",\n                shortName: \"f\",\n                description: \"moves one square diagonally\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = orthogonalMoves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 1,\n                teamsPoints: 1,\n                botFFAValue: 0.4,\n                botTeamsValue: 0.4\n            },\n            piece: \"W\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Wazir\",\n                shortName: \"w\",\n                description: \"moves one square horizontally or vertically\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = orthogonalMoves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 1,\n                teamsPoints: 1,\n                botFFAValue: 0.4,\n                botTeamsValue: 0.4\n            },\n            piece: \"W\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Wazir\",\n                shortName: \"w\",\n                description: \"moves one square horizontally or vertically\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = dabbabaHops;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 1,\n                teamsPoints: 1,\n                botFFAValue: 1.6,\n                botTeamsValue: 1.6\n            },\n            piece: \"S\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: false,\n                isColorBound: true\n            },\n            naming: {\n                name: \"Dabbaba\",\n                shortName: \"s\",\n                description: \"jumps two squares horizontally or vertically\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.sliding = dabbabaHops;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 4,\n                teamsPoints: 4,\n                botFFAValue: 5.4,\n                botTeamsValue: 5.4\n            },\n            piece: \"T\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: false,\n                isSliding: true,\n                isPawn: false,\n                isColorBound: true\n            },\n            naming: {\n                name: \"Dabbaba-rider\",\n                shortName: \"t\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = alfilHops;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 1,\n                teamsPoints: 1,\n                botFFAValue: 0.5,\n                botTeamsValue: 0.5\n            },\n            piece: \"I\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: false,\n                isColorBound: true\n            },\n            naming: {\n                name: \"Alfil\",\n                shortName: \"i\",\n                description: \"jumps two squares diagonally\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.sliding = alfilHops;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 3,\n                teamsPoints: 3,\n                botFFAValue: 4.5,\n                botTeamsValue: 4.5\n            },\n            piece: \"J\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: false,\n                isSliding: true,\n                isPawn: false,\n                isColorBound: true\n            },\n            naming: {\n                name: \"Alfil-rider\",\n                shortName: \"j\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = [...alfilHops, ...dabbabaHops];\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 3,\n                teamsPoints: 3,\n                botFFAValue: 3,\n                botTeamsValue: 3\n            },\n            piece: \"Y\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: false,\n                isColorBound: true\n            },\n            naming: {\n                name: \"Alibaba\",\n                shortName: \"y\",\n                description: \"combines alfil and dabbaba\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.sliding = [...alfilHops, ...dabbabaHops];\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 6,\n                teamsPoints: 6,\n                botFFAValue: 6.2,\n                botTeamsValue: 6.2\n            },\n            piece: \"Z\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: false,\n                isSliding: true,\n                isPawn: false,\n                isColorBound: true\n            },\n            naming: {\n                name: \"Alibaba-rider\",\n                shortName: \"z\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = knightHops;\n                this.sliding = kingDirections;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 12,\n                teamsPoints: 12,\n                botFFAValue: 17,\n                botTeamsValue: 17\n            },\n            piece: \"A\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: true,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Amazon\",\n                shortName: \"a\",\n                description: \"combines queen and knight\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = camelHops;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 3,\n                teamsPoints: 3,\n                botFFAValue: 4.2,\n                botTeamsValue: 4.2\n            },\n            piece: \"C\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: false,\n                isColorBound: true\n            },\n            naming: {\n                name: \"Camel\",\n                shortName: \"c\",\n                description: \"an elongated 3-1 knight\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = knightHops;\n                this.sliding = orthogonalMoves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 7,\n                teamsPoints: 7,\n                botFFAValue: 10,\n                botTeamsValue: 10\n            },\n            piece: \"E\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: true,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Chancellor\",\n                shortName: \"a\",\n                description: \"combines rook and knight\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = knightHops;\n                this.sliding = diagonalMoves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 7,\n                teamsPoints: 7,\n                botFFAValue: 9,\n                botTeamsValue: 9\n            },\n            piece: \"H\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: true,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Archbishop\",\n                shortName: \"h\",\n                description: \"combines bishop and knight\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.sliding = knightHops;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 7,\n                teamsPoints: 7,\n                botFFAValue: 10,\n                botTeamsValue: 10\n            },\n            piece: \"O\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: false,\n                isSliding: true,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Knight-rider\",\n                shortName: \"o\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.sliding = camelHops;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 7,\n                teamsPoints: 7,\n                botFFAValue: 8,\n                botTeamsValue: 8\n            },\n            piece: \"L\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: false,\n                isSliding: true,\n                isPawn: false,\n                isColorBound: true\n            },\n            naming: {\n                name: \"Camel-rider\",\n                shortName: \"l\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.jumping = [...camelHops, ...knightHops];\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 5,\n                teamsPoints: 5,\n                botFFAValue: 8,\n                botTeamsValue: 8\n            },\n            piece: \"V\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Wildebeest\",\n                shortName: \"v\",\n                description: \"combines camel and knight\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.hooks.usePerspective = [true, true, true, true];\n                this.hooks.usePawnLogic = {};\n            }\n            getPossibleCells() {\n                this.generateJumpAttack({ displacement: [-1, -1], special: AttackType.AttackOnly });\n                this.generateJumpAttack({ displacement: [-1, 1], special: AttackType.AttackOnly });\n                this.generateSlidingAttack({\n                    displacement: [-1, 0],\n                    special: AttackType.MoveOnly,\n                    limit: this.baseRankActive ? 2 : 1,\n                    irreversible: true\n                });\n                return this.moves;\n            }\n            rayGenJumpingAttacks() {\n                this.generateJumpAttack({ displacement: [-1, -1], special: AttackType.RayTrace });\n                this.generateJumpAttack({ displacement: [-1, 1], special: AttackType.RayTrace });\n                const moves = this.moves.slice();\n                this.moves = [];\n                return moves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 1,\n                teamsPoints: 1,\n                botFFAValue: 1,\n                botTeamsValue: 0.4\n            },\n            piece: pawnPieceLetter,\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: true,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Pawn\",\n                shortName: pawnPieceLetter.toLowerCase()\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.hooks.usePerspective = [true, true, true, true];\n                this.hooks.usePawnLogic = {};\n            }\n            getPossibleCells() {\n                this.generateSlidingAttack({\n                    displacement: [-1, -1],\n                    special: AttackType.MoveOnly,\n                    limit: this.baseRankActive ? 2 : 1,\n                    irreversible: true\n                });\n                this.generateSlidingAttack({\n                    displacement: [-1, 1],\n                    special: AttackType.MoveOnly,\n                    limit: this.baseRankActive ? 2 : 1,\n                    irreversible: true\n                });\n                this.generateJumpAttack({ displacement: [-1, -1], special: AttackType.AttackOnly });\n                return this.moves;\n            }\n            rayGenJumpingAttacks() {\n                this.generateJumpAttack({ displacement: [-1, -1], special: AttackType.RayTrace });\n                const moves = this.moves.slice();\n                this.moves = [];\n                return moves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 1,\n                teamsPoints: 1,\n                botFFAValue: 1,\n                botTeamsValue: 0.4\n            },\n            piece: \"α\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: true,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Berolina\",\n                shortName: \"alpha\",\n                description: \"a pawn that moves diagonally and captures forwards\"\n            }\n        }\n    });\n    const stoneGeneralControl = createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.hooks.usePerspective = [true, true, true, true];\n                this.hooks.usePawnLogic = {};\n            }\n            getPossibleCells() {\n                this.generateSlidingAttack({\n                    displacement: [-1, -1],\n                    special: AttackType.MoveOnly,\n                    limit: this.baseRankActive ? 2 : 0,\n                    irreversible: true\n                });\n                this.generateSlidingAttack({\n                    displacement: [-1, 1],\n                    special: AttackType.MoveOnly,\n                    limit: this.baseRankActive ? 2 : 0,\n                    irreversible: true\n                });\n                this.generateJumpAttack({\n                    displacement: [-1, -1],\n                    irreversible: true\n                });\n                this.generateJumpAttack({\n                    displacement: [-1, 1],\n                    irreversible: true\n                });\n                return this.moves;\n            }\n            rayGenJumpingAttacks() {\n                this.generateJumpAttack({ displacement: [-1, -1], special: AttackType.RayTrace });\n                this.generateJumpAttack({ displacement: [-1, 1], special: AttackType.RayTrace });\n                const moves = this.moves.slice();\n                this.moves = [];\n                return moves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 1,\n                teamsPoints: 1,\n                botFFAValue: 1,\n                botTeamsValue: 0.4\n            },\n            piece: \"γ\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: true,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Stone General\",\n                shortName: \"gamma\",\n                description: \"a pawn that moves and captures diagonally\"\n            }\n        }\n    });\n    const soldierControl = createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.hooks.usePerspective = [true, true, true, true];\n                this.hooks.usePawnLogic = {};\n            }\n            getPossibleCells() {\n                this.generateSlidingAttack({\n                    displacement: [-1, 0],\n                    special: AttackType.MoveOnly,\n                    limit: this.baseRankActive ? 2 : 0,\n                    irreversible: true\n                });\n                this.generateJumpAttack({\n                    displacement: [-1, 0],\n                    irreversible: true\n                });\n                return this.moves;\n            }\n            rayGenJumpingAttacks() {\n                this.generateJumpAttack({ displacement: [-1, 0], special: AttackType.RayTrace });\n                const moves = this.moves.slice();\n                this.moves = [];\n                return moves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 1,\n                teamsPoints: 1,\n                botFFAValue: 1,\n                botTeamsValue: 0.4\n            },\n            piece: \"β\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: true,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Soldier\",\n                shortName: \"beta\",\n                description: \"a pawn that moves and captures forwards only\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.hooks.usePerspective = [true, true, true, true];\n                this.hooks.usePawnLogic = {};\n            }\n            getPossibleCells() {\n                stoneGeneralControl.getPossibleCells.call(this);\n                soldierControl.getPossibleCells.call(this);\n                return this.moves;\n            }\n            rayGenJumpingAttacks() {\n                stoneGeneralControl.rayGenJumpingAttacks.call(this);\n                soldierControl.rayGenJumpingAttacks.call(this);\n                const moves = this.moves.slice();\n                this.moves = [];\n                return moves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 1,\n                teamsPoints: 1,\n                botFFAValue: 1,\n                botTeamsValue: 0.4\n            },\n            piece: \"δ\",\n            moveGenerationSettings: {\n                isComplex: false,\n                isJumping: true,\n                isSliding: false,\n                isPawn: true,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Sergeant\",\n                shortName: \"delta\",\n                description: \"a pawn that moves and captures forwards and diagonally\"\n            }\n        }\n    });\n    const xiangqiHorseControl = createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.hooks.useTrajectory = [\n                    [-1, 0],\n                    [1, 0],\n                    [0, 1],\n                    [0, -1]\n                ];\n            }\n            getPossibleCells() {\n                this.generateJumpAttack({ displacement: [-1, -2], special: AttackType.Normal, squareBlockingIndex: 3 });\n                this.generateJumpAttack({ displacement: [1, -2], special: AttackType.Normal, squareBlockingIndex: 3 });\n                this.generateJumpAttack({ displacement: [-1, 2], special: AttackType.Normal, squareBlockingIndex: 2 });\n                this.generateJumpAttack({ displacement: [1, 2], special: AttackType.Normal, squareBlockingIndex: 2 });\n                this.generateJumpAttack({ displacement: [2, -1], special: AttackType.Normal, squareBlockingIndex: 1 });\n                this.generateJumpAttack({ displacement: [2, 1], special: AttackType.Normal, squareBlockingIndex: 1 });\n                this.generateJumpAttack({ displacement: [-2, -1], special: AttackType.Normal, squareBlockingIndex: 0 });\n                this.generateJumpAttack({ displacement: [-2, 1], special: AttackType.Normal, squareBlockingIndex: 0 });\n                return this.moves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 2,\n                teamsPoints: 2,\n                botFFAValue: 2.1,\n                botTeamsValue: 2.1\n            },\n            piece: \"U\",\n            moveGenerationSettings: {\n                isComplex: true,\n                isJumping: true,\n                isSliding: false,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Xiangqi horse\",\n                shortName: \"u\",\n                description: \"moves one square orthogonally and then one diagonally\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.hooks.useTrajectory = [\n                    [-1, 0],\n                    [1, 0],\n                    [0, 1],\n                    [0, -1]\n                ];\n            }\n            getPossibleCells() {\n                xiangqiHorseControl.getPossibleCells.call(this);\n                this.sliding.forEach((displacement) => {\n                    this.generateSlidingAttack({ displacement });\n                });\n                return this.moves;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 6,\n                teamsPoints: 6,\n                botFFAValue: 7.5,\n                botTeamsValue: 7.5\n            },\n            piece: \"Δ\",\n            moveGenerationSettings: {\n                isComplex: true,\n                isJumping: true,\n                isSliding: true,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Dragon bishop\",\n                shortName: \"deltaUpper\",\n                description: \"combines bishop and xiangqi horse\"\n            }\n        }\n    });\n    createPieceDeclaration({\n        baseClassRef: class extends PieceControl {\n            constructor() {\n                super();\n                this.hooks.useHopping = true;\n                this.sliding = kingDirections;\n            }\n        },\n        configuration: {\n            points: {\n                singlesPoints: 3,\n                teamsPoints: 3,\n                botFFAValue: 5.8,\n                botTeamsValue: 5.8\n            },\n            piece: grasshopperPieceLetter,\n            moveGenerationSettings: {\n                isComplex: true,\n                isJumping: true,\n                isSliding: false,\n                isPawn: false,\n                isColorBound: false\n            },\n            naming: {\n                name: \"Grasshopper\",\n                shortName: grasshopperPieceLetter.toLowerCase(),\n                description: \"jumps in any direction hopping over the first piece, landing immediately behind it\"\n            }\n        }\n    });\n};\n","import { nonPlayablePieces } from \"../GameInformation/GameUnits/GameUnits\";\nexport var AttackType;\n(function (AttackType) {\n    AttackType[AttackType[\"Normal\"] = 0] = \"Normal\";\n    AttackType[AttackType[\"MoveOnly\"] = 1] = \"MoveOnly\";\n    AttackType[AttackType[\"AttackOnly\"] = 2] = \"AttackOnly\";\n    AttackType[AttackType[\"RayGen\"] = 3] = \"RayGen\";\n    AttackType[AttackType[\"RayTrace\"] = 4] = \"RayTrace\";\n    AttackType[AttackType[\"RayTraceLimited\"] = 5] = \"RayTraceLimited\";\n})(AttackType || (AttackType = {}));\nconst nonPlayableValues = Object.values(nonPlayablePieces);\nexport const verifyPieceLetter = (piece) => piece in pieceControlConfigSettings || nonPlayableValues.includes(piece);\nexport const pieceControlConfigSettings = nonPlayableValues.reduce((p, n) => ({\n    ...p,\n    [n]: {\n        points: {\n            singlesPoints: 1,\n            teamsPoints: 1,\n            botFFAValue: 1,\n            botTeamsValue: 1\n        },\n        piece: n,\n        moveGenerationSettings: {\n            isComplex: false,\n            isJumping: false,\n            isSliding: false,\n            isPawn: false\n        },\n        naming: {\n            name: \"Wall\",\n            shortName: n\n        }\n    }\n}), {});\nexport const createPieceDeclaration = (configuration) => {\n    pieceControlConfigSettings[configuration.configuration.piece] = {\n        ...configuration.configuration,\n        construct: configuration.baseClassRef\n    };\n    return new configuration.baseClassRef();\n};\nfunction createPredefinedPieceLetter(letter) {\n    return letter;\n}\nexport const pawnPieceLetter = createPredefinedPieceLetter(\"P\");\nexport const wallPieceLetter = createPredefinedPieceLetter(nonPlayablePieces.wall);\nexport const grasshopperPieceLetter = createPredefinedPieceLetter(\"G\");\nexport const defaultPieces = {\n    queen: createPredefinedPieceLetter(\"Q\"),\n    rook: createPredefinedPieceLetter(\"R\"),\n    bishop: createPredefinedPieceLetter(\"B\"),\n    knight: createPredefinedPieceLetter(\"N\"),\n    king: createPredefinedPieceLetter(\"K\")\n};\nexport const emptyLetter = createPredefinedPieceLetter(\"\");\nexport const duckLetter = createPredefinedPieceLetter(nonPlayablePieces.duck);\n","import { copyClass } from \"@client/ts/utils/ObjectUtils\";\nimport { verifyFunctionType, importAll } from \"../../../baseTypes\";\nconst verifyHandlerProperty = (handler, key) => key in handler;\nconst verifyPrototypeProperty = (superClass, key) => key in superClass.prototype;\nclass VariantRule {\n    dependencies = new Map();\n    static variantRuleList = [];\n    static initVariantRule(rv) {\n        VariantRule.variantRuleList.push(rv);\n    }\n    decorator;\n    wrappingDecorators = [];\n    initializeBaseHandler(handler) {\n        this.decorator = handler;\n    }\n    initializeWrappingHandler(handler) {\n        this.wrappingDecorators.push(handler);\n    }\n    injectIntoBaseClass(callback) {\n        return callback.bind(this.decorator);\n    }\n    callHandler(method, args) {\n        for (const decorator of this.wrappingDecorators) {\n            if (!verifyHandlerProperty(decorator, method))\n                continue;\n            const decoratorMethod = decorator[method];\n            if (!verifyFunctionType(decoratorMethod))\n                continue;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return decoratorMethod.call(decorator, ...args);\n        }\n        const decoratorType = this.getDecoratorType();\n        if (!verifyPrototypeProperty(decoratorType, method))\n            throw new Error(\"Method called to callHandler is not a part of prototype\");\n        const prototypeMethod = decoratorType.prototype[method];\n        if (!verifyFunctionType(prototypeMethod))\n            throw new Error(\"Method called to callHandler is not a part of prototype\");\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return prototypeMethod.call(this.decorator, ...args);\n    }\n    getInsufficientMaterialData() {\n        return {\n            isPartiallyDisabled: false,\n            isDisabled: false\n        };\n    }\n}\nexport { VariantRule };\nconst objectPrototype = new Set(Reflect.ownKeys(Reflect.getPrototypeOf({}) ?? []));\nexport function decorateClassWithVariants(baseClass, classReference, variants) {\n    if (variants.length === 0)\n        return baseClass;\n    const decoratorProperties = copyClass(baseClass, classReference, true);\n    const methods = new Set();\n    decoratorProperties.initDecoratorSettings = () => {\n        // Do nothing, this method only exists for the purpose of being overridden\n    };\n    methods.add(\"initDecoratorSettings\");\n    const lastInheritedMethods = new Set();\n    let basePrototype = null;\n    const verifyKeyInDecoratorProperties = (k) => typeof k !== \"number\" && k in decoratorProperties && !objectPrototype.has(k) && !lastInheritedMethods.has(k);\n    while ((basePrototype = Reflect.getPrototypeOf(basePrototype ?? baseClass))) {\n        Reflect.ownKeys(basePrototype).forEach((k) => {\n            if (verifyKeyInDecoratorProperties(k)) {\n                decoratorProperties[k] = baseClass[k];\n                methods.add(k);\n                lastInheritedMethods.add(k);\n            }\n        });\n    }\n    const verifyOwnProperty = (k) => k in baseClass;\n    for (const property of Object.getOwnPropertyNames(baseClass)) {\n        if (!verifyOwnProperty(property))\n            throw new Error(\"Expected prototype to not be overridden\");\n        const localProperty = property;\n        Object.defineProperty(decoratorProperties, property, {\n            get: function () {\n                return baseClass[localProperty];\n            },\n            set: function (v) {\n                baseClass[localProperty] = v;\n            },\n            enumerable: true,\n            configurable: false\n        });\n    }\n    decoratorProperties.__baseClass = baseClass;\n    for (const method of methods) {\n        const variantRuleChain = variants.filter((rv) => method in rv);\n        if (variantRuleChain.length === 0)\n            continue;\n        variantRuleChain[0].initializeBaseHandler(decoratorProperties);\n        const variantDecorator = variantRuleChain.reduce((p, c) => {\n            c.initializeBaseHandler(decoratorProperties);\n            c.initializeWrappingHandler(p);\n            return c;\n        });\n        if (method in decoratorProperties) {\n            const variant = Reflect.get(variantDecorator, method);\n            if (typeof variant === \"function\") {\n                const variantFunc = variant;\n                if (verifyFunctionType(decoratorProperties[method])) {\n                    Object.defineProperty(decoratorProperties, method, {\n                        value: (...args) => {\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call\n                            return variantFunc.bind(variantDecorator)(...args);\n                        },\n                        enumerable: false,\n                        writable: false,\n                        configurable: false\n                    });\n                }\n            }\n        }\n    }\n    decoratorProperties.initDecoratorSettings();\n    return decoratorProperties;\n}\nimportAll(require.context(\"./VariantRuleDefinitions\", true, /\\.ts$/));\n","import { Board } from \"../../../Board/Board\";\nimport { InternalMoveSignature } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"allowPassing\";\nexport class AllowPassing extends VariantRule {\n    static {\n        VariantRule.initVariantRule(AllowPassing);\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Allow Passing\",\n                description: \"Players can pass instead of making a move\",\n                tag,\n                color: variantRuleColors.minor,\n                displayIcon: chessGlyphIndex.pause\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^AllowPassing$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"AllowPassing\";\n    }\n    isDisabled({ variantDataRules }) {\n        return variantDataRules.giveaway;\n    }\n    getAllowedInternalMoves(sideToMove = this.decorator.data.sideToMove) {\n        const passingMoves = this.decorator.isKingInCheck(sideToMove) ? [] : [{ type: InternalMoveSignature.Pass }];\n        for (const decorator of this.wrappingDecorators) {\n            if (decorator.getAllowedInternalMoves) {\n                return [...passingMoves, ...decorator.getAllowedInternalMoves(sideToMove)];\n            }\n        }\n        return [...passingMoves, ...Board.prototype.getAllowedInternalMoves.call(this.decorator, sideToMove)];\n    }\n}\n","import { VariantType } from \"@moveGeneration/GameInformation/GameData\";\nimport { Board } from \"../../../Board/Board\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nconst tag = \"alternativeTeams\";\nexport class AlternativeTeams extends VariantRule {\n    static {\n        VariantRule.initVariantRule(AlternativeTeams);\n    }\n    teammate;\n    constructor(teammate) {\n        super();\n        if (typeof teammate === \"number\") {\n            this.teammate = teammate;\n        }\n        else {\n            this.teammate = 2;\n        }\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        const rbTeams = this.teammate === 1;\n        const teamOne = rbTeams ? \"Red & Blue\" : \"Red & Green\";\n        const teamTwo = rbTeams ? \"Yellow & Green\" : \"Blue & Yellow\";\n        return {\n            parameterValue: this.teammate,\n            information: {\n                name: `${teamOne} vs. ${teamTwo}`,\n                description: `Alternative Teams: ${teamOne} form a team against ${teamTwo}`,\n                tag,\n                color: variantRuleColors.autogenous,\n                displayIcon: \"Đ\"\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        const matchArray = match.match(/^Teammate=(1|3)$/);\n        if (matchArray) {\n            this.teammate = Number(matchArray[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    serializeToParsingForm() {\n        return `Teammate=${this.teammate}`;\n    }\n    isDisabled({ gameType }) {\n        return gameType !== VariantType.Teams;\n    }\n    initDecoratorSettings() {\n        const teamSettings = this.decorator.gameType.teamSettings;\n        if (this.teammate === 1) {\n            teamSettings.firstTeamColors = [true, true, false, false];\n            teamSettings.secondTeamColors = [false, false, true, true];\n        }\n        else if (this.teammate === 3) {\n            teamSettings.firstTeamColors = [true, false, false, true];\n            teamSettings.secondTeamColors = [false, true, true, false];\n        }\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { Board } from \"../../../Board/Board\";\nimport { stringifyCoordinate } from \"../../../Board/BoardInterface\";\nimport { InternalMoveSignature } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nconst tag = \"barePieceRule\";\nexport class BarePieceRule extends VariantRule {\n    static {\n        VariantRule.initVariantRule(BarePieceRule);\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Bare piece rule\",\n                description: \"Players with only one remaining piece are forfeit\",\n                tag,\n                color: variantRuleColors.minor,\n                displayIcon: chessGlyphIndex.filter\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^BarePieceLoses$/i.test(match);\n    }\n    isDisabled() {\n        return false;\n    }\n    getInsufficientMaterialData() {\n        return {\n            isPartiallyDisabled: true,\n            isDisabled: false\n        };\n    }\n    serializeToParsingForm() {\n        return \"BarePieceLoses\";\n    }\n    makeMove() {\n        const { data: { sideToMove }, board, preGeneratedAttacks } = this.decorator;\n        const results = this.callHandler(\"makeMove\", arguments);\n        const playerPieces = this.decorator.getPlayerPieces()[sideToMove];\n        if (playerPieces.length === 1) {\n            const pieceMovements = preGeneratedAttacks[sideToMove].pieceMovements.get(stringifyCoordinate(playerPieces[0]));\n            if (pieceMovements) {\n                for (const { move: coordinate } of pieceMovements) {\n                    if (board[coordinate[0]][coordinate[1]].isPiece()) {\n                        return results;\n                    }\n                }\n                return this.decorator.makeMove([{ type: InternalMoveSignature.Resign }]);\n            }\n        }\n        return results;\n    }\n}\n","import { Board } from \"../../../Board/Board\";\nimport { DisplaySettings } from \"../../../Board/BoardInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"blindfold\";\nexport class Blindfold extends VariantRule {\n    static {\n        VariantRule.initVariantRule(Blindfold);\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Blindfold\",\n                description: \"Pieces are invisible\",\n                tag,\n                color: variantRuleColors.visual,\n                displayIcon: chessGlyphIndex.blindfold\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Blindfold$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"Blindfold\";\n    }\n    isDisabled({ variantDataRules }) {\n        return variantDataRules.fogOfWar;\n    }\n    getSquareVisibility() {\n        const squareVisibility = this.callHandler(\"getSquareVisibility\", arguments);\n        return squareVisibility.map((r, i) => r.map((v, j) => {\n            if (this.decorator.board[i][j].isWall()) {\n                return v;\n            }\n            else {\n                return [...v, DisplaySettings.Blindfolded];\n            }\n        }));\n    }\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { Board } from \"../../../Board/Board\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nconst tag = \"captureTheKing\";\nexport class CaptureTheKing extends VariantRule {\n    static {\n        VariantRule.initVariantRule(CaptureTheKing);\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Capture the King\",\n                description: \"To checkmate, kings must be captured\",\n                tag,\n                color: variantRuleColors.minor,\n                displayIcon: chessGlyphIndex.king\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^CaptureTheKing$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"CaptureTheKing\";\n    }\n    isDisabled({ variantDataRules }) {\n        return variantDataRules.giveaway || variantDataRules.taboo;\n    }\n    getInsufficientMaterialData() {\n        return {\n            isPartiallyDisabled: true,\n            isDisabled: false\n        };\n    }\n    isKingInCheck() {\n        return false;\n    }\n    isTheMoveLegal() {\n        return true;\n    }\n}\n","import { getVerticalPlacementModulus, isVerticalPlacement } from \"@client/ts/logic/BaseInterfaces\";\nimport { Board } from \"../../../Board/Board\";\nimport { boardDimension, colors } from \"../../../GameInformation/GameData\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"chess960\";\nclass Chess960 extends VariantRule {\n    static {\n        VariantRule.initVariantRule(Chess960);\n    }\n    static chess960ranges = [\n        ...Array.from({ length: 9 }, (_, i) => [960 * (i + 1) + 1, 960 + 960 * (i + 1)]),\n        ...Array.from({ length: 5 }, (_, i) => [10000 + 960 * (i + 1) + 1, 10960 + 960 * (i + 1)])\n    ];\n    static minorPieceCache = (function () {\n        const minorPieceCache = [];\n        for (let i = 0; i < 4; i++) {\n            for (let j = i + 1; j < 5; j++) {\n                minorPieceCache.push([i, j]);\n            }\n        }\n        return minorPieceCache;\n    })();\n    // prettier-ignore\n    static pieceMasks = [\n        [404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959],\n        [5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 33, 34, 35, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 95, 101, 102, 103, 105, 106, 107, 109, 110, 111, 113, 114, 115, 129, 130, 131, 145, 146, 147, 161, 162, 163, 177, 178, 179, 197, 198, 199, 201, 202, 203, 205, 206, 207, 209, 210, 211, 225, 226, 227, 241, 242, 243, 257, 258, 259, 273, 274, 275, 293, 294, 295, 297, 298, 299, 301, 302, 303, 305, 306, 307, 321, 322, 323, 337, 338, 339, 353, 354, 355, 369, 370, 371, 421, 422, 423, 425, 426, 427, 429, 430, 431, 437, 438, 439, 441, 442, 443, 445, 446, 447, 453, 454, 455, 457, 458, 459, 461, 462, 463, 469, 470, 471, 473, 474, 475, 477, 478, 479, 517, 518, 519, 521, 522, 523, 525, 526, 527, 533, 534, 535, 537, 538, 539, 541, 542, 543, 549, 550, 551, 553, 554, 555, 557, 558, 559, 565, 566, 567, 569, 570, 571, 573, 574, 575, 613, 614, 615, 617, 618, 619, 621, 622, 623, 629, 630, 631, 633, 634, 635, 637, 638, 639, 645, 646, 647, 649, 650, 651, 653, 654, 655, 661, 662, 663, 665, 666, 667, 669, 670, 671],\n        [4, 5, 6, 7, 20, 21, 22, 23, 36, 37, 38, 39, 52, 53, 54, 55, 68, 69, 70, 71, 84, 85, 86, 87, 100, 101, 102, 103, 116, 117, 118, 119, 132, 133, 134, 135, 148, 149, 150, 151, 164, 165, 166, 167, 180, 181, 182, 183, 196, 197, 198, 199, 212, 213, 214, 215, 228, 229, 230, 231, 244, 245, 246, 247, 260, 261, 262, 263, 276, 277, 278, 279, 292, 293, 294, 295, 308, 309, 310, 311, 324, 325, 326, 327, 340, 341, 342, 343, 356, 357, 358, 359, 372, 373, 374, 375, 388, 389, 390, 391, 404, 405, 406, 407, 420, 421, 422, 423, 436, 437, 438, 439, 452, 453, 454, 455, 468, 469, 470, 471, 484, 485, 486, 487, 500, 501, 502, 503, 516, 517, 518, 519, 532, 533, 534, 535, 548, 549, 550, 551, 564, 565, 566, 567, 580, 581, 582, 583, 596, 597, 598, 599, 612, 613, 614, 615, 628, 629, 630, 631, 644, 645, 646, 647, 660, 661, 662, 663, 676, 677, 678, 679, 692, 693, 694, 695, 708, 709, 710, 711, 724, 725, 726, 727, 740, 741, 742, 743, 756, 757, 758, 759, 772, 773, 774, 775, 788, 789, 790, 791, 804, 805, 806, 807, 820, 821, 822, 823, 836, 837, 838, 839, 852, 853, 854, 855, 868, 869, 870, 871, 884, 885, 886, 887, 900, 901, 902, 903, 916, 917, 918, 919, 932, 933, 934, 935, 948, 949, 950, 951],\n        [16, 20, 34, 35, 38, 39, 40, 44, 58, 59, 62, 63, 112, 116, 130, 131, 134, 135, 136, 140, 154, 155, 158, 159, 208, 212, 226, 227, 230, 231, 232, 236, 250, 251, 254, 255, 304, 308, 322, 323, 326, 327, 328, 332, 346, 347, 350, 351, 400, 404, 418, 419, 422, 423, 424, 428, 442, 443, 446, 447, 496, 500, 514, 515, 518, 519, 520, 524, 538, 539, 542, 543, 592, 596, 610, 611, 614, 615, 616, 620, 634, 635, 638, 639, 688, 692, 706, 707, 710, 711, 712, 716, 730, 731, 734, 735, 784, 788, 802, 803, 806, 807, 808, 812, 826, 827, 830, 831, 880, 884, 898, 899, 902, 903, 904, 908, 922, 923, 926, 927],\n        [14, 15, 30, 31, 46, 47, 62, 63, 66, 67, 70, 71, 76, 77, 82, 83, 86, 87, 92, 93, 110, 111, 126, 127, 142, 143, 158, 159, 162, 163, 166, 167, 172, 173, 178, 179, 182, 183, 188, 189, 194, 195, 198, 199, 204, 205, 210, 211, 214, 215, 220, 221, 226, 227, 230, 231, 236, 237, 240, 241, 244, 245, 256, 257, 260, 261, 272, 273, 276, 277, 290, 291, 294, 295, 300, 301, 306, 307, 310, 311, 316, 317, 322, 323, 326, 327, 332, 333, 336, 337, 340, 341, 352, 353, 356, 357, 368, 369, 372, 373, 398, 399, 414, 415, 430, 431, 446, 447, 450, 451, 454, 455, 460, 461, 466, 467, 470, 471, 476, 477, 482, 483, 486, 487, 492, 493, 498, 499, 502, 503, 508, 509, 514, 515, 518, 519, 524, 525, 528, 529, 532, 533, 544, 545, 548, 549, 560, 561, 564, 565, 578, 579, 582, 583, 588, 589, 594, 595, 598, 599, 604, 605, 610, 611, 614, 615, 620, 621, 624, 625, 628, 629, 640, 641, 644, 645, 656, 657, 660, 661, 672, 673, 676, 677, 688, 689, 692, 693, 768, 769, 772, 773, 784, 785, 788, 789, 864, 865, 868, 869, 880, 881, 884, 885],\n        [2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138, 142, 146, 150, 154, 158, 162, 166, 170, 174, 178, 182, 186, 190, 194, 198, 202, 206, 210, 214, 218, 222, 226, 230, 234, 238, 242, 246, 250, 254, 258, 262, 266, 270, 274, 278, 282, 286, 290, 294, 298, 302, 306, 310, 314, 318, 322, 326, 330, 334, 338, 342, 346, 350, 354, 358, 362, 366, 370, 374, 378, 382, 386, 390, 394, 398, 402, 406, 410, 414, 418, 422, 426, 430, 434, 438, 442, 446, 450, 454, 458, 462, 466, 470, 474, 478, 482, 486, 490, 494, 498, 502, 506, 510, 514, 518, 522, 526, 530, 534, 538, 542, 546, 550, 554, 558, 562, 566, 570, 574, 578, 582, 586, 590, 594, 598, 602, 606, 610, 614, 618, 622, 626, 630, 634, 638, 642, 646, 650, 654, 658, 662, 666, 670, 674, 678, 682, 686, 690, 694, 698, 702, 706, 710, 714, 718, 722, 726, 730, 734, 738, 742, 746, 750, 754, 758, 762, 766, 770, 774, 778, 782, 786, 790, 794, 798, 802, 806, 810, 814, 818, 822, 826, 830, 834, 838, 842, 846, 850, 854, 858, 862, 866, 870, 874, 878, 882, 886, 890, 894, 898, 902, 906, 910, 914, 918, 922, 926, 930, 934, 938, 942, 946, 950, 954, 958],\n        [192, 193, 194, 196, 197, 198, 200, 201, 202, 208, 209, 210, 212, 213, 214, 216, 217, 218, 224, 225, 226, 228, 229, 230, 232, 233, 234, 240, 241, 242, 244, 245, 246, 248, 249, 250, 291, 295, 299, 307, 311, 315, 323, 327, 331, 339, 343, 347, 355, 359, 363, 368, 369, 370, 372, 373, 374, 376, 377, 378, 480, 481, 482, 484, 485, 486, 488, 489, 490, 496, 497, 498, 500, 501, 502, 504, 505, 506, 512, 513, 514, 516, 517, 518, 520, 521, 522, 528, 529, 530, 532, 533, 534, 536, 537, 538, 579, 583, 587, 595, 599, 603, 611, 615, 619, 627, 631, 635, 643, 647, 651, 656, 657, 658, 660, 661, 662, 664, 665, 666, 672, 673, 674, 676, 677, 678, 680, 681, 682, 688, 689, 690, 692, 693, 694, 696, 697, 698, 704, 705, 706, 708, 709, 710, 712, 713, 714, 720, 721, 722, 724, 725, 726, 728, 729, 730, 771, 775, 779, 787, 791, 795, 803, 807, 811, 819, 823, 827, 835, 839, 843, 848, 849, 850, 852, 853, 854, 856, 857, 858, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 931, 935, 939, 944, 945, 946, 948, 949, 950, 952, 953, 954],\n        [1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 96, 97, 98, 100, 101, 102, 104, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 120, 121, 122, 124, 125, 126, 128, 129, 130, 132, 133, 134, 136, 137, 138, 140, 141, 142, 144, 145, 146, 148, 149, 150, 152, 153, 154, 156, 157, 158, 160, 161, 162, 164, 165, 166, 168, 169, 170, 172, 173, 174, 192, 193, 194, 196, 197, 198, 200, 201, 202, 204, 205, 206, 208, 209, 210, 212, 213, 214, 216, 217, 218, 220, 221, 222, 224, 225, 226, 228, 229, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242, 244, 245, 246, 248, 249, 250, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 270, 384, 385, 386, 388, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 453, 454, 456, 457, 458, 460, 461, 462, 480, 481, 482, 484, 485, 486, 488, 489, 490, 492, 493, 494, 496, 497, 498, 500, 501, 502, 504, 505, 506, 508, 509, 510, 512, 513, 514, 516, 517, 518, 520, 521, 522, 524, 525, 526, 528, 529, 530, 532, 533, 534, 536, 537, 538, 540, 541, 542, 544, 545, 546, 548, 549, 550, 552, 553, 554, 556, 557, 558, 672, 673, 674, 676, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 692, 693, 694, 696, 697, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 712, 713, 714, 716, 717, 718, 720, 721, 722, 724, 725, 726, 728, 729, 730, 732, 733, 734, 736, 737, 738, 740, 741, 742, 744, 745, 746, 748, 749, 750]\n    ];\n    static c960range = (function () {\n        const arr = [...Array(961).keys()];\n        arr.shift();\n        return arr;\n    })();\n    // prettier-ignore\n    static twins = [959, 955, 951, 947, 958, 954, 950, 946, 957, 953, 949, 945, 956, 952, 948, 944, 943, 939, 935, 931, 942, 938, 934, 930, 941, 937, 933, 929, 940, 936, 932, 928, 927, 923, 919, 915, 926, 922, 918, 914, 925, 921, 917, 913, 924, 920, 916, 912, 911, 907, 903, 899, 910, 906, 902, 898, 909, 905, 901, 897, 908, 904, 900, 896, 895, 891, 887, 883, 894, 890, 886, 882, 893, 889, 885, 881, 892, 888, 884, 880, 879, 875, 871, 867, 878, 874, 870, 866, 877, 873, 869, 865, 876, 872, 868, 864, 863, 859, 855, 851, 862, 858, 854, 850, 861, 857, 853, 849, 860, 856, 852, 848, 847, 843, 839, 835, 846, 842, 838, 834, 845, 841, 837, 833, 844, 840, 836, 832, 831, 827, 823, 819, 830, 826, 822, 818, 829, 825, 821, 817, 828, 824, 820, 816, 815, 811, 807, 803, 814, 810, 806, 802, 813, 809, 805, 801, 812, 808, 804, 800, 799, 795, 791, 787, 798, 794, 790, 786, 797, 793, 789, 785, 796, 792, 788, 784, 783, 779, 775, 771, 782, 778, 774, 770, 781, 777, 773, 769, 780, 776, 772, 768, 671, 667, 663, 659, 670, 666, 662, 658, 669, 665, 661, 657, 668, 664, 660, 656, 655, 651, 647, 643, 654, 650, 646, 642, 653, 649, 645, 641, 652, 648, 644, 640, 639, 635, 631, 627, 638, 634, 630, 626, 637, 633, 629, 625, 636, 632, 628, 624, 623, 619, 615, 611, 622, 618, 614, 610, 621, 617, 613, 609, 620, 616, 612, 608, 607, 603, 599, 595, 606, 602, 598, 594, 605, 601, 597, 593, 604, 600, 596, 592, 591, 587, 583, 579, 590, 586, 582, 578, 589, 585, 581, 577, 588, 584, 580, 576, 383, 379, 375, 371, 382, 378, 374, 370, 381, 377, 373, 369, 380, 376, 372, 368, 367, 363, 359, 355, 366, 362, 358, 354, 365, 361, 357, 353, 364, 360, 356, 352, 351, 347, 343, 339, 350, 346, 342, 338, 349, 345, 341, 337, 348, 344, 340, 336, 335, 331, 327, 323, 334, 330, 326, 322, 333, 329, 325, 321, 332, 328, 324, 320, 319, 315, 311, 307, 318, 314, 310, 306, 317, 313, 309, 305, 316, 312, 308, 304, 303, 299, 295, 291, 302, 298, 294, 290, 301, 297, 293, 289, 300, 296, 292, 288, 767, 763, 759, 755, 766, 762, 758, 754, 765, 761, 757, 753, 764, 760, 756, 752, 751, 747, 743, 739, 750, 746, 742, 738, 749, 745, 741, 737, 748, 744, 740, 736, 735, 731, 727, 723, 734, 730, 726, 722, 733, 729, 725, 721, 732, 728, 724, 720, 719, 715, 711, 707, 718, 714, 710, 706, 717, 713, 709, 705, 716, 712, 708, 704, 703, 699, 695, 691, 702, 698, 694, 690, 701, 697, 693, 689, 700, 696, 692, 688, 687, 683, 679, 675, 686, 682, 678, 674, 685, 681, 677, 673, 684, 680, 676, 672, 575, 571, 567, 563, 574, 570, 566, 562, 573, 569, 565, 561, 572, 568, 564, 560, 559, 555, 551, 547, 558, 554, 550, 546, 557, 553, 549, 545, 556, 552, 548, 544, 543, 539, 535, 531, 542, 538, 534, 530, 541, 537, 533, 529, 540, 536, 532, 528, 527, 523, 519, 515, 526, 522, 518, 514, 525, 521, 517, 513, 524, 520, 516, 512, 511, 507, 503, 499, 510, 506, 502, 498, 509, 505, 501, 497, 508, 504, 500, 496, 495, 491, 487, 483, 494, 490, 486, 482, 493, 489, 485, 481, 492, 488, 484, 480, 287, 283, 279, 275, 286, 282, 278, 274, 285, 281, 277, 273, 284, 280, 276, 272, 271, 267, 263, 259, 270, 266, 262, 258, 269, 265, 261, 257, 268, 264, 260, 256, 255, 251, 247, 243, 254, 250, 246, 242, 253, 249, 245, 241, 252, 248, 244, 240, 239, 235, 231, 227, 238, 234, 230, 226, 237, 233, 229, 225, 236, 232, 228, 224, 223, 219, 215, 211, 222, 218, 214, 210, 221, 217, 213, 209, 220, 216, 212, 208, 207, 203, 199, 195, 206, 202, 198, 194, 205, 201, 197, 193, 204, 200, 196, 192, 479, 475, 471, 467, 478, 474, 470, 466, 477, 473, 469, 465, 476, 472, 468, 464, 463, 459, 455, 451, 462, 458, 454, 450, 461, 457, 453, 449, 460, 456, 452, 448, 447, 443, 439, 435, 446, 442, 438, 434, 445, 441, 437, 433, 444, 440, 436, 432, 431, 427, 423, 419, 430, 426, 422, 418, 429, 425, 421, 417, 428, 424, 420, 416, 415, 411, 407, 403, 414, 410, 406, 402, 413, 409, 405, 401, 412, 408, 404, 400, 399, 395, 391, 387, 398, 394, 390, 386, 397, 393, 389, 385, 396, 392, 388, 384, 191, 187, 183, 179, 190, 186, 182, 178, 189, 185, 181, 177, 188, 184, 180, 176, 175, 171, 167, 163, 174, 170, 166, 162, 173, 169, 165, 161, 172, 168, 164, 160, 159, 155, 151, 147, 158, 154, 150, 146, 157, 153, 149, 145, 156, 152, 148, 144, 143, 139, 135, 131, 142, 138, 134, 130, 141, 137, 133, 129, 140, 136, 132, 128, 127, 123, 119, 115, 126, 122, 118, 114, 125, 121, 117, 113, 124, 120, 116, 112, 111, 107, 103, 99, 110, 106, 102, 98, 109, 105, 101, 97, 108, 104, 100, 96, 95, 91, 87, 83, 94, 90, 86, 82, 93, 89, 85, 81, 92, 88, 84, 80, 79, 75, 71, 67, 78, 74, 70, 66, 77, 73, 69, 65, 76, 72, 68, 64, 63, 59, 55, 51, 62, 58, 54, 50, 61, 57, 53, 49, 60, 56, 52, 48, 47, 43, 39, 35, 46, 42, 38, 34, 45, 41, 37, 33, 44, 40, 36, 32, 31, 27, 23, 19, 30, 26, 22, 18, 29, 25, 21, 17, 28, 24, 20, 16, 15, 11, 7, 3, 14, 10, 6, 2, 13, 9, 5, 1, 12, 8, 4, 0];\n    static legacy = {\n        legacy2PThreshold: 1000,\n        legacy2PRank: 3,\n        legacy4Prank: 0,\n        legacy2PTakeaway: 6160\n    };\n    static displacement = [3, 11];\n    static createBaseChess960mappings() {\n        return {\n            colorBoundPieces: [2, 5],\n            supermajorPieces: [3],\n            minorPieces: [1, 6],\n            royalPiece: [4],\n            edgePieces: [0, 7]\n        };\n    }\n    static regExp = /Chess960=(\\d{1,5})/i;\n    positionID;\n    constructor(positionID) {\n        super();\n        if (typeof positionID === \"number\") {\n            this.positionID = positionID;\n        }\n        else {\n            this.positionID = -1;\n        }\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: this.positionID,\n            information: {\n                name: \"Chess960\",\n                description: \"Initial position with randomly shuffled pieces on home ranks\",\n                tag,\n                color: variantRuleColors.startingPosition,\n                displayIcon: chessGlyphIndex.chess960\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        const matchArray = match.match(Chess960.regExp);\n        if (matchArray) {\n            const newID = Number(matchArray[1]);\n            if (newID < 0 || newID > 15760)\n                return false;\n            this.positionID = newID;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    serializeToParsingForm() {\n        return `Chess960=${this.positionID}`;\n    }\n    isDisabled() {\n        return false;\n    }\n    initDecoratorSettings() {\n        if (this.positionID === -1)\n            throw new Error(\"Position ID for Chess960 is not defined\");\n        let nr = this.positionID;\n        const boardSquares = this.decorator.board;\n        let rank = Chess960.chess960ranges.findIndex((r) => nr >= r[0] && nr <= r[1]);\n        if (rank === -1) {\n            if (nr > Chess960.legacy.legacy2PThreshold) {\n                rank = Chess960.legacy.legacy2PRank;\n                nr -= Chess960.legacy.legacy2PTakeaway;\n            }\n            else {\n                rank = Chess960.legacy.legacy4Prank;\n            }\n        }\n        const pieceArrays = [[], [], [], []];\n        const ranks = [13 - rank, rank, rank, 13 - rank];\n        pieceArrays[0] = boardSquares[ranks[0]].slice(Chess960.displacement[0], Chess960.displacement[1]);\n        pieceArrays[1] = boardSquares.map((row) => row[ranks[1]]).slice(Chess960.displacement[0], Chess960.displacement[1]);\n        pieceArrays[2] = boardSquares[ranks[2]].slice(Chess960.displacement[0], Chess960.displacement[1]);\n        pieceArrays[3] = boardSquares.map((row) => row[ranks[3]]).slice(Chess960.displacement[0], Chess960.displacement[1]);\n        const walls = pieceArrays.map((a) => a.map((p) => (p.isWall() ? true : false)));\n        const intersections = [];\n        for (const wall of walls) {\n            intersections.push(wall.reduce((p, c, i) => {\n                if (c) {\n                    return p.filter((v) => Chess960.pieceMasks[i].includes(v));\n                }\n                else\n                    return p;\n            }, Chess960.c960range));\n        }\n        const calcNr = nr - Chess960.chess960ranges[rank][0];\n        const positions = [];\n        const generatePositionIndexes = (calcNr) => {\n            const colorBoundIndexes = [2 * Math.floor((calcNr % 16) / 4), 1 + 2 * ((calcNr % 16) % 4)].sort();\n            const supermajorIndex = Math.floor(calcNr / 16) % 6;\n            const minorPieceIndexes = Chess960.minorPieceCache[Math.floor(calcNr / 96) % 10];\n            const position = {\n                colorBoundPieces: Array(8).fill(false),\n                supermajorPieces: Array(8).fill(false),\n                minorPieces: Array(8).fill(false),\n                royalPiece: Array(8).fill(false),\n                edgePieces: Array(8).fill(false)\n            };\n            let edgeSet = false, royalSet = false, colorDelta = 0, majorDelta = 0;\n            for (let i = 0; i < boardDimension - Chess960.displacement[0] * 2; i++) {\n                if (i === colorBoundIndexes[0] || i === colorBoundIndexes[1]) {\n                    position.colorBoundPieces[i] = true;\n                    colorDelta++;\n                }\n                else if (i === supermajorIndex + colorDelta) {\n                    position.supermajorPieces[i] = true;\n                    majorDelta++;\n                }\n                else if (i === minorPieceIndexes[0] + colorDelta + majorDelta || i === minorPieceIndexes[1] + colorDelta + majorDelta) {\n                    position.minorPieces[i] = true;\n                }\n                else {\n                    position[edgeSet ? (royalSet ? \"edgePieces\" : \"royalPiece\") : \"edgePieces\"][i] = true;\n                    royalSet = edgeSet;\n                    edgeSet = true;\n                }\n            }\n            return position;\n        };\n        for (const intersection of intersections) {\n            if (intersection.length === 0)\n                return null;\n            let calcTempNr = calcNr;\n            let cycles = 0;\n            while (cycles < 2) {\n                if (intersection.includes(calcTempNr)) {\n                    positions.push(generatePositionIndexes(calcTempNr));\n                    break;\n                }\n                else if (intersection.includes(Chess960.twins[calcTempNr - 1])) {\n                    positions.push(generatePositionIndexes(Chess960.twins[calcTempNr - 1]));\n                    break;\n                }\n                calcTempNr++;\n                if (calcTempNr === 960)\n                    (calcTempNr = 0), cycles++;\n            }\n            if (cycles === 2)\n                intersections.push([]);\n        }\n        const fenData = this.decorator.data;\n        const royalPieces = fenData.fenOptions.tag(\"royal\");\n        const royalOnCorrectRank = royalPieces.map((r, i) => r !== null ? (r[getVerticalPlacementModulus(i)] === ranks[i] ? r[getVerticalPlacementModulus(i)] : -1) : -1);\n        const replaceRow = (player) => {\n            const pieces = Chess960.createBaseChess960mappings();\n            const royal = royalPieces[player];\n            if (!royal)\n                return;\n            const r = royal[getVerticalPlacementModulus(player)];\n            const supermajorOverRoyal = royalOnCorrectRank[player] ? r <= 6 : false;\n            for (let i = Chess960.displacement[0]; i < Chess960.displacement[1]; i++) {\n                let k;\n                for (k in pieces) {\n                    if (!Object.prototype.hasOwnProperty.call(pieces, k) || !positions[player][k][i - 3])\n                        continue;\n                    if (royalOnCorrectRank[player] !== -1 && k === \"royalPiece\" && r !== i) {\n                        royal[getVerticalPlacementModulus(player)] = i;\n                    }\n                    const mI = supermajorOverRoyal ? (intersections[player].length === 960 ? boardDimension - 1 - i : i) : i;\n                    const piece = pieces[k].shift();\n                    if (piece !== undefined) {\n                        boardSquares[isVerticalPlacement(player) ? ranks[player] : mI][isVerticalPlacement(player) ? mI : ranks[player]] =\n                            pieceArrays[player][piece];\n                        break;\n                    }\n                }\n            }\n        };\n        for (const color of colors)\n            replaceRow(color);\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n}\nexport { Chess960 };\n","import { Board } from \"../../../Board/Board\";\nimport { boardDimension } from \"../../../GameInformation/GameData\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { FiftyMoveRule } from \"../FENDataDecorators/FiftyMoveRule\";\nimport { isVerticalPlacement } from \"@client/ts/logic/BaseInterfaces\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"crazyhouse\";\nexport class Crazyhouse extends VariantRule {\n    static {\n        VariantRule.initVariantRule(Crazyhouse);\n    }\n    dependencies = new Map([[FiftyMoveRule, [Infinity]]]);\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Crazyhouse\",\n                description: \"You can drop pieces from banks\",\n                tag,\n                color: variantRuleColors.extending,\n                displayIcon: chessGlyphIndex.crazyhouse\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Crazyhouse$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"Crazyhouse\";\n    }\n    isDisabled() {\n        return false;\n    }\n    getInsufficientMaterialData() {\n        return {\n            isPartiallyDisabled: false,\n            isDisabled: true\n        };\n    }\n    initDecoratorSettings() {\n        this.decorator.data.fenOptions.setTag(\"areBanksEnabled\", [true, true, true, true]);\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n    getDroppingMoves(piece, color = this.decorator.data.sideToMove) {\n        if (piece.color !== color)\n            return [];\n        const royal = this.decorator.data.fenOptions.tag(\"royal\")[color];\n        if (royal && this.decorator.preGeneratedAttacks[color].hoppingPieces[royal[0]][royal[1]])\n            return [];\n        const isPawn = pieceControlConfigSettings[piece.piece].moveGenerationSettings.isPawn;\n        const resultingMoveDrops = [];\n        const isRY = isVerticalPlacement(color);\n        const pawnPromotionRank = this.decorator.variantData.promotionRank === false ? -1 : this.decorator.variantData.promotionRank;\n        const pawnBaseRank = this.decorator.data.fenOptions.tag(\"pawnBaseRank\");\n        for (let i = 0; i < boardDimension; i++) {\n            if (isPawn && isRY && (pawnPromotionRank === i || pawnBaseRank === i)) {\n                continue;\n            }\n            for (let j = 0; j < boardDimension; j++) {\n                if (isPawn && !isRY && (pawnPromotionRank === j || pawnBaseRank === j)) {\n                    continue;\n                }\n                const square = this.decorator.board[i][j];\n                if (!square.isEmpty())\n                    continue;\n                resultingMoveDrops.push({ piece, endCoordinates: [i, j] });\n            }\n        }\n        if (this.decorator.isKingInCheck(color)) {\n            return resultingMoveDrops.filter((moveDrop) => {\n                const { checks, checkmates } = this.decorator.makeMove([moveDrop], true);\n                return !checks[color] || checkmates[color] || this.decorator.isKingInCheck(color);\n            });\n        }\n        else {\n            return resultingMoveDrops;\n        }\n    }\n}\n","import { Board } from \"../../../Board/Board\";\nimport { getLatestChainedMoves } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { CaptureTheKing } from \"./CaptureTheKing\";\nimport { duckPieceString } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { boardDimension } from \"../../../GameInformation/GameData\";\nimport { nonPlayablePieces } from \"../../../GameInformation/GameUnits/GameUnits\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"duckChess\";\nexport class DuckChess extends VariantRule {\n    static {\n        VariantRule.initVariantRule(DuckChess);\n    }\n    dependencies = new Map([[CaptureTheKing, []]]);\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Duck Chess\",\n                description: \"The duck must be moved to an empty square after every move\",\n                tag,\n                color: variantRuleColors.extending,\n                displayIcon: chessGlyphIndex.duck\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^DuckChess$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"DuckChess\";\n    }\n    isDisabled({ variantDataRules }) {\n        return variantDataRules.taboo;\n    }\n    getLegalMoves(i, j) {\n        const moves = this.callHandler(\"getLegalMoves\", arguments);\n        const latestMoves = getLatestChainedMoves(moves);\n        const ducks = [], emptySquares = [];\n        for (let i = 0; i < boardDimension; i++) {\n            for (let j = 0; j < boardDimension; j++) {\n                const pieceString = this.decorator.board[i][j];\n                if (pieceString.isWall() && pieceString.piece === nonPlayablePieces.duck) {\n                    ducks.push([i, j]);\n                }\n                else if (pieceString.isEmpty()) {\n                    emptySquares.push([i, j]);\n                }\n            }\n        }\n        const droppingChainedMoves = [];\n        const duckChainedMoves = [];\n        if (ducks.length === 0) {\n            for (const emptySquare of emptySquares) {\n                droppingChainedMoves.push({ piece: duckPieceString, endCoordinates: emptySquare });\n            }\n            droppingChainedMoves.push({ piece: duckPieceString, endCoordinates: [i, j] });\n        }\n        else {\n            for (const duck of ducks) {\n                for (const emptySquare of emptySquares) {\n                    duckChainedMoves.push({ startCoordinates: duck, endCoordinates: emptySquare });\n                }\n                duckChainedMoves.push({ startCoordinates: duck, endCoordinates: [i, j] });\n            }\n        }\n        for (const move of latestMoves) {\n            move.nextChainedMoves = droppingChainedMoves.length > 0 ? droppingChainedMoves : duckChainedMoves;\n        }\n        return moves;\n    }\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { initializeBoardSquares } from \"../../../../BaseInterfaces\";\nimport { Board } from \"../../../Board/Board\";\nimport { DisplaySettings, unstringifyCoordinate } from \"../../../Board/BoardInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { CaptureTheKing } from \"./CaptureTheKing\";\nconst tag = \"fogOfWar\";\nexport class FogOfWar extends VariantRule {\n    static {\n        VariantRule.initVariantRule(FogOfWar);\n    }\n    dependencies = new Map([[CaptureTheKing, []]]);\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Fog of War\",\n                description: \"Players can only see their pieces and the squares they can legally move to\",\n                tag,\n                color: variantRuleColors.widespread,\n                displayIcon: chessGlyphIndex.fogOfWar\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^FogOfWar$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"FogOfWar\";\n    }\n    isDisabled({ variantDataRules }) {\n        return variantDataRules.taboo;\n    }\n    getSquareVisibility() {\n        const currentPlayerMoves = initializeBoardSquares(() => false);\n        const preGeneratedAttacks = this.decorator.preGeneratedAttacks[this.decorator.data.sideToMove];\n        for (const [piece, moves] of preGeneratedAttacks.pieceMovements) {\n            const startingCoordinate = unstringifyCoordinate(piece);\n            currentPlayerMoves[startingCoordinate[0]][startingCoordinate[1]] = true;\n            for (const { move } of moves) {\n                currentPlayerMoves[move[0]][move[1]] = true;\n            }\n        }\n        for (const drop of [...preGeneratedAttacks.pieceDrops.pawn, ...preGeneratedAttacks.pieceDrops.piece]) {\n            currentPlayerMoves[drop.endCoordinates[0]][drop.endCoordinates[1]] = true;\n        }\n        const squareVisibility = this.callHandler(\"getSquareVisibility\", arguments);\n        return squareVisibility.map((r, i) => r.map((v, j) => {\n            if (this.decorator.board[i][j].isWall() || currentPlayerMoves[i][j]) {\n                return v;\n            }\n            else {\n                return [...v, DisplaySettings.Fogged];\n            }\n        }));\n    }\n}\n","import { Board } from \"../../../Board/Board\";\nimport { stringifyCoordinate } from \"../../../Board/BoardInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"forcedCapture\";\nexport class ForcedCapture extends VariantRule {\n    static {\n        VariantRule.initVariantRule(ForcedCapture);\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Forced Capture\",\n                description: \"Capturing is always compulsory\",\n                tag,\n                color: variantRuleColors.widespread,\n                displayIcon: chessGlyphIndex.target\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^ForcedCapture$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"ForcedCapture\";\n    }\n    isDisabled() {\n        return false;\n    }\n    getInsufficientMaterialData() {\n        return {\n            isPartiallyDisabled: true,\n            isDisabled: false\n        };\n    }\n    pregenerateAttacks() {\n        const { data: { sideToMove }, board, preGeneratedAttacks } = this.decorator;\n        this.callHandler(\"pregenerateAttacks\", arguments);\n        for (const piece of this.decorator.getPlayerPieces()[sideToMove]) {\n            const moves = preGeneratedAttacks[sideToMove].pieceMovements.get(stringifyCoordinate(piece));\n            if (moves) {\n                for (const { move: coordinate } of moves) {\n                    if (board[coordinate[0]][coordinate[1]].isPiece()) {\n                        preGeneratedAttacks[sideToMove].variantRuleCache.hasCaptures = true;\n                        return;\n                    }\n                }\n            }\n        }\n        preGeneratedAttacks[sideToMove].variantRuleCache.hasCaptures = false;\n    }\n    isTheMoveLegal(_, moveData) {\n        const isCapturing = this.decorator.data.getCapturedPieces(moveData).length > 0;\n        if (!isCapturing && this.decorator.preGeneratedAttacks[this.decorator.data.sideToMove].variantRuleCache.hasCaptures)\n            return false;\n        return this.callHandler(\"isTheMoveLegal\", arguments);\n    }\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { shuffleArray } from \"../../../../../utils/ArrayUtils\";\nimport { Board } from \"../../../Board/Board\";\nimport { totalPlayers, VariantType } from \"../../../GameInformation/GameData\";\nimport { verifyNumericColor } from \"../../../GameInformation/GameUnits/GameUnits\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nconst tag = \"anonymous\";\nexport class Anonymous extends VariantRule {\n    static {\n        VariantRule.initVariantRule(Anonymous);\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Anonymous\",\n                description: \"Players' names and ratings are hidden\",\n                tag,\n                color: variantRuleColors.metadata,\n                displayIcon: chessGlyphIndex.userInformation\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Anonymous$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"Anonymous\";\n    }\n    isDisabled() {\n        return false;\n    }\n    initDecoratorSettings() {\n        for (let i = 0; i < totalPlayers; i++) {\n            this.decorator.gameData.players[i].name = \"Anonymous\";\n            this.decorator.gameData.players[i].elo = undefined;\n        }\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n}\nconst semiAnonTag = \"semiAnonymous\";\nexport class SemiAnonymous extends VariantRule {\n    static {\n        VariantRule.initVariantRule(Anonymous);\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Semi-Anonymous\",\n                description: \"Players's colors are hidden\",\n                tag: semiAnonTag,\n                color: variantRuleColors.metadata,\n                displayIcon: chessGlyphIndex.userExtraInformation\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Semi-Anonymous$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"Semi-Anonymous\";\n    }\n    isDisabled() {\n        return false;\n    }\n    initDecoratorSettings() {\n        shuffleArray(this.decorator.gameData.players);\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n}\nconst spTag = \"selfPartner\";\nexport class SelfPartner extends VariantRule {\n    static {\n        VariantRule.initVariantRule(SelfPartner);\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Self-Partner\",\n                description: \"Both sides of the team were played by one player\",\n                tag: spTag,\n                color: variantRuleColors.metadata,\n                displayIcon: chessGlyphIndex.selfPartner\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^SelfPartner$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"SelfPartner\";\n    }\n    isDisabled({ gameType, fenTags }) {\n        return gameType !== VariantType.Teams || fenTags.resigned.value.filter(Boolean).length !== 0;\n    }\n    initDecoratorSettings() {\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n        const gameType = this.decorator.gameType;\n        const firstTeamPlayer = gameType.teamSettings.firstTeamColors.indexOf(true), secondTeamPlayer = gameType.teamSettings.secondTeamColors.indexOf(true);\n        if (verifyNumericColor(firstTeamPlayer)) {\n            this.decorator.gameData.players[gameType.getTeammateColor(firstTeamPlayer)].name =\n                this.decorator.gameData.players[firstTeamPlayer].name;\n        }\n        if (verifyNumericColor(secondTeamPlayer)) {\n            this.decorator.gameData.players[gameType.getTeammateColor(secondTeamPlayer)].name =\n                this.decorator.gameData.players[secondTeamPlayer].name;\n        }\n    }\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { Board } from \"../../../Board/Board\";\nimport { DisplaySettings } from \"../../../Board/BoardInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nconst tag = \"ghostboard\";\nexport class Ghostboard extends VariantRule {\n    static {\n        VariantRule.initVariantRule(Ghostboard);\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Ghostboard\",\n                description: \"Board, clocks and players are invisible\",\n                tag,\n                color: variantRuleColors.visual,\n                displayIcon: chessGlyphIndex.crossedBinoculars\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Ghostboard$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"Ghostboard\";\n    }\n    isDisabled() {\n        return false;\n    }\n    getSquareVisibility() {\n        const squareVisibility = this.callHandler(\"getSquareVisibility\", arguments);\n        return squareVisibility.map((r) => r.map((v) => [...v, DisplaySettings.Ghosted]));\n    }\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { Board } from \"../../../Board/Board\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nconst tag = \"paradigmChess30\";\nclass ParadigmChess30 extends VariantRule {\n    static {\n        VariantRule.initVariantRule(ParadigmChess30);\n    }\n    static paradigmRanges = [...Array.from({ length: 14 }, (_, i) => [30 * (i + 1) + 1, 30 + 30 * (i + 1)])];\n    // 0 = color bound, 1 = minor, 2 = major\n    static permutations = [\n        [0, 0, 1, 1, 2],\n        [0, 0, 1, 2, 1],\n        [0, 0, 2, 1, 1],\n        [0, 1, 0, 1, 2],\n        [0, 1, 0, 2, 1],\n        [0, 1, 1, 0, 2],\n        [0, 1, 1, 2, 0],\n        [0, 1, 2, 0, 1],\n        [0, 1, 2, 1, 0],\n        [0, 2, 0, 1, 1],\n        [0, 2, 1, 0, 1],\n        [0, 2, 1, 1, 0],\n        [1, 0, 0, 1, 2],\n        [1, 0, 0, 2, 1],\n        [1, 0, 1, 0, 2],\n        [1, 0, 1, 2, 0],\n        [1, 0, 2, 0, 1],\n        [1, 0, 2, 1, 0],\n        [1, 1, 0, 0, 2],\n        [1, 1, 0, 2, 0],\n        [1, 1, 2, 0, 0],\n        [1, 2, 0, 0, 1],\n        [1, 2, 0, 1, 0],\n        [1, 2, 1, 0, 0],\n        [2, 0, 0, 1, 1],\n        [2, 0, 1, 0, 1],\n        [2, 0, 1, 1, 0],\n        [2, 1, 0, 0, 1],\n        [2, 1, 0, 1, 0],\n        [2, 1, 1, 0, 0]\n    ];\n    static legacy = {\n        twoPlayerRank: 3,\n        twoPlayerAdjustment: 30 * 4\n    };\n    preMethodExecution = false;\n    positionId;\n    constructor(positionId) {\n        super();\n        if (typeof positionId === \"number\") {\n            this.positionId = positionId;\n        }\n        else {\n            this.positionId = -1;\n        }\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: this.positionId,\n            information: {\n                name: \"Paradigm Chess30\",\n                description: \"Paradigm Chess30: Dragon bishops combine the movement of bishop and xiangqi horse. 30 semi-random starting positions\",\n                tag,\n                color: variantRuleColors.startingPosition,\n                displayIcon: chessGlyphIndex.bishop\n            }\n        };\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    matchesPGNDeclaration(match) {\n        const matchArray = match.match(/^ParadigmChess30=((\\d{1,3}))$/i);\n        if (matchArray) {\n            const newID = Number(matchArray[1]);\n            if (newID < 0 || newID > 450)\n                return false;\n            this.positionId = newID;\n            return true;\n        }\n        else\n            return false;\n    }\n    serializeToParsingForm() {\n        return `ParadigmChess30=${this.positionId}`;\n    }\n    isDisabled() {\n        return false;\n    }\n    getInformation() {\n        return {\n            name: \"Paradigm Chess30\",\n            description: \"Paradigm Chess30: Dragon bishops combine the movement of bishop and xiangqi horse. 30 semi-random starting positions\",\n            tag\n        };\n    }\n    initDecoratorSettings() {\n        if (this.positionId === -1)\n            throw new Error(\"Position ID for Paradigm Chess30 is not defined\");\n        let nr = this.positionId;\n        const boardSquares = this.decorator.board;\n        const data = this.decorator.data;\n        let rank = ParadigmChess30.paradigmRanges.findIndex((r) => nr >= r[0] && nr <= r[1]);\n        if (rank === -1) {\n            rank = ParadigmChess30.legacy.twoPlayerRank;\n            nr += ParadigmChess30.legacy.twoPlayerAdjustment;\n        }\n        const calcNr = nr - ParadigmChess30.paradigmRanges[rank][0];\n        const ranks = [13 - rank, rank, rank, 13 - rank];\n        const pieceArrays = [[], [], [], []];\n        pieceArrays[0] = boardSquares[ranks[0]].slice(4, 10);\n        pieceArrays[1] = boardSquares.map((row) => row[ranks[1]]).slice(4, 10);\n        pieceArrays[2] = boardSquares[ranks[2]].slice(4, 10);\n        pieceArrays[3] = boardSquares.map((row) => row[ranks[3]]).slice(4, 10);\n        const royalPieces = data.fenOptions.tag(\"royal\"), dead = data.fenOptions.tag(\"dead\");\n        const replaceRow = (player) => {\n            const r = royalPieces[player]?.[player % 2 === 0 ? 1 : 0];\n            const pieceCoordinates = [[5, 8], [4, 9], [r === undefined || r >= 7 ? 6 : 7]];\n            const moveCoordinate = (i, iter) => {\n                if (dead[player])\n                    return;\n                const coordinateA = player % 2 === 0 ? ranks[player] : iter;\n                const coordinateB = player % 2 === 0 ? iter : ranks[player];\n                if (pieceArrays[player][pieceCoordinates[i][0] - 4].isWall() || boardSquares[coordinateA][coordinateB].isWall())\n                    return;\n                royalPieces.some((r) => {\n                    if (r && r[0] === coordinateA && r[1] === coordinateB) {\n                        (r[0] = coordinateB), (r[1] = coordinateA);\n                        return true;\n                    }\n                    return false;\n                });\n                boardSquares[coordinateA][coordinateB] = pieceArrays[player][(pieceCoordinates[i].shift() ?? 4) - 4];\n            };\n            let c = 0;\n            const rp = r === undefined || r >= 7 ? 7 : 6;\n            const permutations = rp === 6 ? ParadigmChess30.permutations[calcNr].slice().reverse() : ParadigmChess30.permutations[calcNr];\n            for (let i = 4; i < 10; i++) {\n                if (i === rp)\n                    continue;\n                moveCoordinate(permutations[c++], i);\n            }\n        };\n        for (let i = 0; i < 4; i++)\n            replaceRow(i);\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n}\nexport { ParadigmChess30 };\n","import { Board } from \"../../../Board/Board\";\nimport { DisplaySettings } from \"../../../Board/BoardInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"piecesFaceCenter\";\nexport class PiecesFaceCenter extends VariantRule {\n    static {\n        VariantRule.initVariantRule(PiecesFaceCenter);\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Pieces Face Center\",\n                description: \"Pieces are rotated to face center\",\n                tag,\n                color: variantRuleColors.visual,\n                displayIcon: chessGlyphIndex.pawn3dLarge\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^PiecesFaceCenter$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"PiecesFaceCenter\";\n    }\n    isDisabled() {\n        return false;\n    }\n    getSquareVisibility() {\n        const squareVisibility = this.callHandler(\"getSquareVisibility\", arguments);\n        return squareVisibility.map((r, i) => r.map((v, j) => {\n            if (!this.decorator.board[i][j].isPiece()) {\n                return v;\n            }\n            else {\n                return [...v, DisplaySettings.PieceFacesCenter];\n            }\n        }));\n    }\n}\n","import { Board } from \"../../../Board/Board\";\nimport { stringifyCoordinate } from \"../../../Board/BoardInterface\";\nimport { colors } from \"../../../GameInformation/GameData\";\nimport { verifyRequiredMove, verifyStandardMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"seirawanSetup\";\nexport class SeirawanSetup extends VariantRule {\n    static {\n        VariantRule.initVariantRule(SeirawanSetup);\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Seirawan Setup\",\n                description: \"When moving a piece for the first time, a piece from the bank can be placed on the vacated square, as part of the move\",\n                tag,\n                color: variantRuleColors.extending,\n                displayIcon: chessGlyphIndex.pieceMeal\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^SeirawanSetup$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"SeirawanSetup\";\n    }\n    isDisabled({ variantDataRules }) {\n        return variantDataRules.crazyhouse || variantDataRules.setupChess !== false;\n    }\n    initDecoratorSettings() {\n        const fenOptions = this.decorator.data.fenOptions;\n        const areBanksEnabled = fenOptions.tag(\"areBanksEnabled\"), dead = fenOptions.tag(\"dead\"), seirawanDrops = fenOptions.tag(\"seirawanDrops\"), bank = fenOptions.tag(\"bank\");\n        for (const color of colors) {\n            if (!dead[color] && seirawanDrops[color].size > 0 && bank[color].size > 0) {\n                areBanksEnabled[color] = true;\n            }\n        }\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n    makeMove(move) {\n        const { fenOptions, sideToMove } = this.decorator.data;\n        const areBanksEnabled = fenOptions.tag(\"areBanksEnabled\"), seirawanDrops = fenOptions.tag(\"seirawanDrops\"), bank = fenOptions.tag(\"bank\");\n        let disabledIndex = false;\n        if (verifyStandardMove(move[0])) {\n            seirawanDrops[sideToMove].delete(stringifyCoordinate(move[0].startCoordinates));\n            if (seirawanDrops[sideToMove].size === 0 || bank[sideToMove].size === 0) {\n                disabledIndex = true;\n            }\n        }\n        const returnValue = this.callHandler(\"makeMove\", arguments);\n        if (disabledIndex) {\n            seirawanDrops[sideToMove].clear();\n            bank[sideToMove].clear();\n            areBanksEnabled[sideToMove] = false;\n        }\n        return returnValue;\n    }\n    getLegalMoves(i, j) {\n        const { fenOptions, sideToMove } = this.decorator.data;\n        const seirawanDrops = fenOptions.tag(\"seirawanDrops\"), bank = fenOptions.tag(\"bank\");\n        const startCoordinates = [i, j];\n        const stringifiedCoordinate = stringifyCoordinate(startCoordinates);\n        const coordinate = [...seirawanDrops[sideToMove]].find((c) => c === stringifiedCoordinate);\n        const validateWithDrops = bank[sideToMove].size !== 0 && coordinate !== undefined;\n        const moves = this.callHandler(\"getLegalMoves\", arguments);\n        const continuations = [];\n        for (const piece of bank[sideToMove].keys()) {\n            continuations.push({ piece, endCoordinates: startCoordinates });\n        }\n        if (validateWithDrops && verifyRequiredMove(continuations)) {\n            for (const move of moves) {\n                move.nextChainedMoves = continuations;\n            }\n        }\n        return moves;\n    }\n}\n","import { Board } from \"../../../Board/Board\";\nimport { compareCoordinates, stringifyCoordinate } from \"../../../Board/BoardInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"selfCheck\";\nexport class SelfCheck extends VariantRule {\n    static {\n        VariantRule.initVariantRule(SelfCheck);\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Self-checks cost lives\",\n                description: \"Self-checks cost lives. Checkmate yourself to earn points\",\n                tag,\n                color: variantRuleColors.minor,\n                displayIcon: chessGlyphIndex.donut\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^SelfCheck$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"SelfCheck\";\n    }\n    isDisabled({ variantDataRules }) {\n        return !variantDataRules.nCheck || !variantDataRules.captureTheKing;\n    }\n    getCurrentChecks(baseColor = this.decorator.data.sideToMove) {\n        const { data: { fenOptions, sideToMove }, preGeneratedAttacks } = this.decorator;\n        const baseChecks = this.callHandler(\"getCurrentChecks\", arguments);\n        const royal = fenOptions.tag(\"royal\")[baseColor];\n        const newCoordinates = [];\n        if (royal) {\n            for (const [attackingPiece, attackCoordinates] of preGeneratedAttacks[sideToMove].hoppingPieceLines) {\n                if (compareCoordinates(attackCoordinates, royal)) {\n                    newCoordinates.push(stringifyCoordinate(attackingPiece));\n                }\n            }\n            for (const [attackingPiece, attackLine] of preGeneratedAttacks[sideToMove].slidingPiecesLines) {\n                for (const attackCoordinates of attackLine) {\n                    if (compareCoordinates(attackCoordinates, royal)) {\n                        newCoordinates.push(stringifyCoordinate(attackingPiece));\n                        break;\n                    }\n                }\n            }\n        }\n        baseChecks[baseColor] = newCoordinates;\n        return baseChecks;\n    }\n}\n","import { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { createTupleFromCallback } from \"../../../../../baseTypes\";\nimport { Board } from \"../../../Board/Board\";\nimport { boardDimension, colors } from \"../../../GameInformation/GameData\";\nimport { InternalMoveSignature, verifyDroppingMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"setupChess\";\nexport class SetupChess extends VariantRule {\n    static {\n        VariantRule.initVariantRule(SetupChess);\n    }\n    disabled = false;\n    setupPoints;\n    wereBanksEnabled = [false, false, false, false];\n    permutationCoordinates = [[], [], [], []];\n    pawnPermutationCoordinates = [[], [], [], []];\n    constructor(setupPoints) {\n        super();\n        if (typeof setupPoints === \"number\") {\n            this.setupPoints = setupPoints;\n        }\n        else {\n            this.setupPoints = 39;\n        }\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: this.setupPoints,\n            information: {\n                name: `Setup ${this.setupPoints}`,\n                description: `Set up ${this.setupPoints} points before the game starts`,\n                tag,\n                color: variantRuleColors.phased,\n                displayIcon: chessGlyphIndex.movePawn\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        const matchArray = match.match(/^Setup=(\\d+)$/);\n        if (matchArray) {\n            this.setupPoints = Number(matchArray[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    serializeToParsingForm() {\n        return `Setup=${this.setupPoints}`;\n    }\n    isDisabled() {\n        return false;\n    }\n    getInsufficientMaterialData() {\n        return {\n            isPartiallyDisabled: false,\n            isDisabled: true\n        };\n    }\n    initDecoratorSettings() {\n        const fenOptions = this.decorator.data.fenOptions;\n        const areBanksEnabled = fenOptions.tag(\"areBanksEnabled\"), dead = fenOptions.tag(\"dead\"), setupComplete = fenOptions.tag(\"setupComplete\"), setupPoints = fenOptions.tag(\"setupPoints\"), pawnBaseRank = fenOptions.tag(\"pawnBaseRank\"), royal = fenOptions.tag(\"royal\"), castleKingside = fenOptions.tag(\"castleKingside\"), castleQueenside = fenOptions.tag(\"castleQueenside\");\n        const areSetupPointsUnset = setupPoints === null;\n        const modifyDisplacements = (i, j, color) => {\n            const baseDisplacements = [\n                [13 - i, j],\n                [j, i],\n                [i, j],\n                [13 - j, i]\n            ];\n            return baseDisplacements[color];\n        };\n        for (const color of colors) {\n            let bankEnabled = false;\n            if (areBanksEnabled[color]) {\n                this.wereBanksEnabled[color] = true;\n                bankEnabled = true;\n            }\n            else if (!setupComplete[color]) {\n                areBanksEnabled[color] = true;\n                bankEnabled = true;\n            }\n            if (bankEnabled) {\n                const files = createTupleFromCallback((_, i) => i, boardDimension);\n                const pawnRanks = [pawnBaseRank, pawnBaseRank + 1].filter((rank) => rank >= 0 && rank <= 13);\n                const ranks = [pawnBaseRank - 1, ...pawnRanks];\n                this.permutationCoordinates[color] = files.flatMap((file) => ranks.map((rank) => modifyDisplacements(rank, file, color)));\n                this.pawnPermutationCoordinates[color] = files.flatMap((file) => pawnRanks.map((rank) => modifyDisplacements(rank, file, color)));\n            }\n            if (!areSetupPointsUnset && !dead[color]) {\n                setupPoints[color] = this.setupPoints;\n            }\n            if (!royal[color]) {\n                castleKingside[color] = false;\n                castleQueenside[color] = false;\n            }\n        }\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n    getLegalMoves() {\n        if (!this.disabled)\n            return [];\n        return this.callHandler(\"getLegalMoves\", arguments);\n    }\n    getCoordinateList(piece) {\n        return pieceControlConfigSettings[piece.piece].moveGenerationSettings.isPawn\n            ? this.pawnPermutationCoordinates\n            : this.permutationCoordinates;\n    }\n    getDroppingMoves(piece, color = this.decorator.data.sideToMove) {\n        if (piece.color !== color)\n            return [];\n        if (!this.disabled && !this.decorator.data.fenOptions.tag(\"setupComplete\")[color]) {\n            const coordinateList = this.getCoordinateList(piece);\n            const resultingMoveDrops = [];\n            for (const coordinate of coordinateList[color]) {\n                if (this.decorator.board[coordinate[0]][coordinate[1]].isEmpty()) {\n                    resultingMoveDrops.push({ piece, endCoordinates: coordinate });\n                }\n            }\n            return resultingMoveDrops;\n        }\n        else\n            return this.callHandler(\"getDroppingMoves\", arguments);\n    }\n    makeMove(move, ignoreNextMoves = false) {\n        const fenOptions = this.decorator.data.fenOptions;\n        const areBanksEnabled = fenOptions.tag(\"areBanksEnabled\"), dead = fenOptions.tag(\"dead\"), setupComplete = fenOptions.tag(\"setupComplete\"), setupPoints = fenOptions.tag(\"setupPoints\"), bank = fenOptions.tag(\"bank\"), royal = fenOptions.tag(\"royal\");\n        const color = this.decorator.data.sideToMove, moveData = move[0];\n        const results = this.callHandler(\"makeMove\", arguments);\n        if (!this.disabled && !setupComplete[color] && verifyDroppingMove(moveData) && setupPoints) {\n            const pointValue = pieceControlConfigSettings[moveData.piece.piece].points.singlesPoints;\n            if (moveData.piece.piece === \"K\") {\n                bank[color].delete(moveData.piece);\n                royal[color] = moveData.endCoordinates;\n            }\n            else {\n                setupPoints[color] -= pointValue;\n            }\n            const pointsLeft = setupPoints[color];\n            for (const [piece] of bank[color]) {\n                if (piece.piece !== \"K\" && pointValue > pointsLeft) {\n                    bank[color].delete(piece);\n                }\n            }\n            if (bank[color].size === 0) {\n                setupComplete[color] = true;\n            }\n            else {\n                const coordinateList = this.getCoordinateList(moveData.piece);\n                let anyDrop = false;\n                for (const coordinate of coordinateList[color]) {\n                    if (this.decorator.board[coordinate[0]][coordinate[1]].isEmpty()) {\n                        anyDrop = true;\n                        break;\n                    }\n                }\n                if (!anyDrop) {\n                    setupComplete[color] = true;\n                }\n            }\n        }\n        if (setupComplete.every((v, i) => v || dead[i])) {\n            this.disabled = true;\n            for (const color of colors) {\n                if (!this.wereBanksEnabled[color]) {\n                    areBanksEnabled[color] = false;\n                    bank[color].clear();\n                }\n            }\n        }\n        if (!this.disabled && !ignoreNextMoves && setupComplete[this.decorator.data.sideToMove]) {\n            Board.prototype.makeMove.call(this.decorator, [{ type: InternalMoveSignature.Pass }]);\n        }\n        return results;\n    }\n}\n","import { Board } from \"../../../Board/Board\";\nimport { colors } from \"../../../GameInformation/GameData\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"taboo\";\nexport class Taboo extends VariantRule {\n    static {\n        VariantRule.initVariantRule(Taboo);\n    }\n    getDecoratorType() {\n        return Board;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Taboo\",\n                description: \"Giving check is forbidden\",\n                tag,\n                color: variantRuleColors.widespread,\n                displayIcon: chessGlyphIndex.equal\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Taboo$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"Taboo\";\n    }\n    isDisabled() {\n        return false;\n    }\n    isSetupComplex() {\n        return true;\n    }\n    isTheMoveLegal(_, moveData) {\n        const initialDead = this.decorator.data.fenOptions.tag(\"dead\").slice();\n        const snapshot = this.decorator.createSnapshot();\n        try {\n            this.decorator.makeMove([moveData], true);\n            const newDead = this.decorator.data.fenOptions.tag(\"dead\").slice();\n            for (const color of colors) {\n                if ((!initialDead[color] && newDead[color]) || this.decorator.isKingInCheck(color))\n                    return false;\n            }\n            return true;\n        }\n        finally {\n            this.decorator.loadSnapshot(snapshot);\n        }\n    }\n}\n","import { createTuple } from \"@client/ts/baseTypes\";\nimport { initializeBoardSquares } from \"@client/ts/logic/BaseInterfaces\";\nimport { stringifyCoordinate } from \"@moveGeneration/Board/BoardInterface\";\nimport { totalPlayers, colors, VariantType, boardDimension } from \"@moveGeneration/GameInformation/GameData\";\nimport { pawnPieceString } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport { InternalMoveSignature, SpecialMove, verifyInternalMove, verifyStandardMove } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { createBotAlgorithm, ZombieType } from \"../BotInterface\";\nimport { randomlyPickNextChainedMoves } from \"./RandomEvaluation\";\nconst onlyUnique = (value, index, self) => self.indexOf(value) === index;\nconst stringifyKey = (i, j, color) => `${i},${j}/${color ?? \"\"}`;\nfunction getPieceInFront(i, j, color) {\n    switch (color) {\n        case 0:\n            return [i - 1, j];\n        case 1:\n            return [i, j + 1];\n        case 2:\n            return [i + 1, j];\n        case 3:\n            return [i, j - 1];\n    }\n}\nfunction createComfuterAlgorithm() {\n    let boardAccessors;\n    function augmentBoardAccessorsFromBoard(board) {\n        return {\n            board,\n            boardSquares: board.board,\n            data: board.data,\n            remainingReal: board.data.getRealPlayers(),\n            remaining: board.data.fenOptions\n                .tag(\"dead\")\n                .map((v, i) => (v ? false : i))\n                .filter((v) => v === false),\n            coverage: initializeBoardSquares(() => []),\n            pieces: board.getPlayerPieces(),\n            controls: board.controls,\n            royal: board.data.fenOptions.tag(\"royal\"),\n            hangingCache: new Map(),\n            coverageCache: new Map(),\n            pieceValueCache: new Map()\n        };\n    }\n    function initializeBoardAccessorsFromBoard(board) {\n        const promotionRank = board.variantData.promotionRank !== false\n            ? [\n                boardDimension - board.variantData.promotionRank,\n                board.variantData.promotionRank - 1,\n                board.variantData.promotionRank - 1,\n                boardDimension - board.variantData.promotionRank\n            ]\n            : createTuple(99, totalPlayers);\n        boardAccessors = {\n            ...augmentBoardAccessorsFromBoard(board),\n            variantData: board.variantData,\n            promotionRank,\n            isFFA: board.gameType.isFFA(),\n            isTeams: !board.gameType.isFFA(),\n            zombieType: board.data.fenOptions.tag(\"zombieType\"),\n            defaultSideToMove: board.data.sideToMove\n        };\n    }\n    function getDistanceFromPromotion(color, i, j) {\n        if (i === -1)\n            return 99;\n        return Math.abs(boardAccessors.promotionRank[color] - (color & 1 ? i : j)) || 99;\n    }\n    function getDistanceFromKing(i, j, color) {\n        if (i === -1)\n            return 999;\n        const royalPiece = boardAccessors.royal[color];\n        if (!royalPiece)\n            return 999;\n        const x = Math.abs(i - royalPiece[0]), y = Math.abs(j - royalPiece[1]);\n        if (x === 0 && y === 0)\n            return 999;\n        return Math.max(x, y);\n    }\n    function inspectCoverage() {\n        const { board, boardSquares, pieces, coverage } = boardAccessors;\n        for (const color of colors) {\n            for (const coordinate of pieces[color]) {\n                const pc = boardSquares[coordinate[0]][coordinate[1]];\n                if (!pc.isPiece())\n                    continue;\n                const destinations = board.preGeneratedAttacks[color].pieceMovements.get(stringifyCoordinate(coordinate));\n                if (!destinations)\n                    continue;\n                for (const dest of destinations) {\n                    coverage[dest.move[0]][dest.move[1]].push(coordinate);\n                }\n            }\n        }\n    }\n    function getCoverage(i, j, color) {\n        const { coverageCache, coverage, boardSquares, data, board, zombieType, defaultSideToMove } = boardAccessors;\n        const resigned = data.fenOptions.tag(\"resigned\");\n        const key = stringifyKey(i, j, color);\n        if (coverageCache.has(key))\n            return coverageCache.get(key);\n        const attackers = [], defenders = [];\n        const cvg = coverage[i][j];\n        if (cvg.length) {\n            for (const pieceC of cvg) {\n                const piece = boardSquares[pieceC[0]][pieceC[1]];\n                if (!piece.isPiece())\n                    continue;\n                const pieceColor = piece.color;\n                if (resigned[pieceColor] && zombieType[pieceColor] === ZombieType.Rando)\n                    continue;\n                if (board.gameType.isSameTeam(pieceColor, defaultSideToMove)) {\n                    defenders.push(pieceC);\n                }\n                else {\n                    attackers.push(pieceC);\n                }\n            }\n        }\n        const cache = color === defaultSideToMove ? { attackers, defenders } : { defenders: attackers, attackers: defenders };\n        coverageCache.set(key, cache);\n        return cache;\n    }\n    function getPieceValue(i, j) {\n        const { boardSquares, pieceValueCache, isFFA, isTeams, remainingReal, royal, board } = boardAccessors;\n        const coordinates = [i, j];\n        const pieceString = boardSquares[i][j];\n        if (!pieceString.isPiece())\n            return 0;\n        const piece = pieceString.piece;\n        const key = `${coordinates[0]},${coordinates[1]}/${pieceString.color}`;\n        if (pieceValueCache.has(key))\n            return pieceValueCache.get(key);\n        let value = 0;\n        const controlSetting = pieceControlConfigSettings[piece];\n        if (!controlSetting.moveGenerationSettings.isPawn) {\n            value = isTeams ? controlSetting.points.botTeamsValue : controlSetting.points.botFFAValue;\n        }\n        else {\n            value = isFFA ? 1 : 0.4;\n            const promotionDistance = getDistanceFromPromotion(pieceString.color, ...coordinates);\n            value += (2 / (getDistanceFromKing(...coordinates, pieceString.color) * 3)) * (remainingReal / 4);\n            value += 3 / (promotionDistance * 3);\n            if (promotionDistance < 2) {\n                const inFront = getPieceInFront(...coordinates, pieceString.color);\n                const { attackers, defenders } = getCoverage(...inFront, pieceString.color);\n                if (!defenders.length) {\n                    value += 3 / promotionDistance;\n                }\n                if (attackers.length < defenders.length) {\n                    value += 2 / promotionDistance;\n                }\n            }\n        }\n        let isRoyal = false;\n        for (const royalPiece of royal) {\n            if (!royalPiece)\n                continue;\n            if (royalPiece[0] === coordinates[0] && royalPiece[1] === coordinates[1]) {\n                isRoyal = true;\n                break;\n            }\n        }\n        if (!isRoyal && piece !== pawnPieceString.piece) {\n            for (const color of colors) {\n                if (!board.gameType.isSameTeam(color, pieceString.color)) {\n                    let d = getDistanceFromKing(...coordinates, color);\n                    if (d < 3)\n                        d = 2;\n                    value += (5 - remainingReal) / d;\n                }\n            }\n        }\n        pieceValueCache.set(key, value);\n        return value;\n    }\n    function getCoordinationEval(player) {\n        const { pieces, remainingReal } = boardAccessors;\n        let e = 0;\n        for (const piece of pieces[player]) {\n            const { defenders } = getCoverage(piece[0], piece[1], player);\n            for (const d of defenders)\n                e += 30 / (getPieceValue(d[0], d[1]) * 2);\n        }\n        if (remainingReal === 2) {\n            e *= 0.4;\n        }\n        else if (remainingReal === 3) {\n            e *= 0.7;\n        }\n        return e / 55;\n    }\n    function firstPlayerMovesBefore(p1, p2) {\n        const { data, defaultSideToMove } = boardAccessors;\n        let next = data.nextTurn();\n        do {\n            if (p1 === next)\n                return true;\n            if (p2 === next)\n                return false;\n            next = data.nextTurn(next);\n        } while (next !== defaultSideToMove);\n        return true;\n    }\n    function canRespondDirectlyToThreat(player, attackers) {\n        const { boardSquares } = boardAccessors;\n        let attackingPlayers = [];\n        for (const pc of attackers) {\n            const square = boardSquares[pc[0]][pc[1]];\n            if (!square.isPiece())\n                continue;\n            attackingPlayers.push(square.color);\n        }\n        attackingPlayers = attackingPlayers.filter(onlyUnique);\n        for (const a of attackingPlayers) {\n            if (firstPlayerMovesBefore(player, a))\n                return false;\n        }\n        return true;\n    }\n    function hanging(i, j, pieceValue = getPieceValue(i, j)) {\n        const { hangingCache, boardSquares, remaining, data } = boardAccessors;\n        const key = stringifyKey(i, j);\n        if (hangingCache.has(key))\n            return hangingCache.get(key);\n        const square = boardSquares[i][j];\n        if (!square.isPiece())\n            return 0;\n        const { attackers, defenders } = getCoverage(i, j, square.color);\n        let attackerValue = 999;\n        for (const pc of attackers) {\n            attackerValue = Math.min(attackerValue, getPieceValue(pc[0], pc[1]));\n        }\n        let attackedFromLeft = false;\n        const nextTurn = data.nextTurn(square.color);\n        if (remaining.length > 2) {\n            for (const pc of attackers) {\n                if (boardSquares[pc[0]][pc[1]].color === nextTurn) {\n                    attackedFromLeft = true;\n                    break;\n                }\n            }\n        }\n        const threatened = pieceValue - attackerValue;\n        let pawnDefends;\n        for (const pc of defenders) {\n            if (boardSquares[pc[0]][pc[1]].piece === pawnPieceString.piece) {\n                pawnDefends = pc;\n                break;\n            }\n        }\n        let h = 0;\n        const underDefended = attackers.length - defenders.length > 0;\n        if (underDefended)\n            h = pieceValue;\n        if (underDefended && pawnDefends)\n            h = 0;\n        if (pawnDefends && attackers.length - defenders.length > 1) {\n            h = getPieceValue(pawnDefends[0], pawnDefends[1]);\n        }\n        if (!h && threatened > 0)\n            h = threatened;\n        if (!h && attackedFromLeft && threatened >= -2) {\n            h = -threatened;\n        }\n        if (h && canRespondDirectlyToThreat(square.color, attackers)) {\n            h /= 6;\n        }\n        hangingCache.set(key, h);\n        return h;\n    }\n    function getMobilityEval(player) {\n        const { pieces, boardSquares, isTeams, royal, defaultSideToMove, board } = boardAccessors;\n        let e = 0;\n        for (const coordinate of pieces[player]) {\n            if (hanging(coordinate[0], coordinate[1]) > 2)\n                continue;\n            const piece = boardSquares[coordinate[0]][coordinate[1]];\n            if (!piece.isPiece())\n                continue;\n            let destinations = board.preGeneratedAttacks[player].pieceMovements.get(stringifyCoordinate(coordinate))?.length ?? 0;\n            if (/[QDAEHΔ]/.test(piece.piece))\n                destinations /= isTeams ? 2 : 3;\n            if (/[RBV]]/.test(piece.piece))\n                destinations /= isTeams ? 1.5 : 2;\n            e += destinations / (isTeams ? 10 : board.gameType.type === VariantType.Solo ? 21 : 16);\n            let isRoyal = false;\n            for (const royalPiece of royal) {\n                if (!royalPiece)\n                    continue;\n                if (royalPiece[0] === coordinate[0] && royalPiece[1] === coordinate[1]) {\n                    isRoyal = true;\n                    break;\n                }\n            }\n            if (!isRoyal && !isTeams && piece.piece === pawnPieceString.piece) {\n                const blockedBy = getPieceInFront(coordinate[0], coordinate[1], player);\n                const bSqr = boardSquares[blockedBy[0]][blockedBy[1]];\n                if (bSqr.isEmpty())\n                    continue;\n                if (!bSqr.isPiece()) {\n                    e -= 2;\n                }\n                else if (board.gameType.isSameTeam(bSqr.color, defaultSideToMove)) {\n                    e -= 0.5;\n                }\n                else if (bSqr.piece === pawnPieceString.piece) {\n                    e -= 1.8;\n                }\n                else if (player === bSqr.color) {\n                    e -= 0.5;\n                }\n            }\n        }\n        return e;\n    }\n    function getDistFromHill(player) {\n        const royalPiece = boardAccessors.royal[player];\n        if (!royalPiece)\n            return 999;\n        const x = Math.abs(6.5 - royalPiece[0]);\n        const y = Math.abs(6.5 - royalPiece[1]);\n        const d = (x + y) / 2 + Math.max(x, y) / 2;\n        if (!d)\n            return 999;\n        return d;\n    }\n    function getMatesEval() {\n        const { board, variantData, data, pieces, remainingReal } = boardAccessors;\n        board.data.sideToMove = board.data.previousTurn();\n        const { checkmates, stalemates, checks } = board.getCheckmatesAndStalemates();\n        board.data.sideToMove = board.data.nextTurn();\n        let e = 0;\n        for (const color of colors) {\n            if (checkmates[color]) {\n                e += 500;\n            }\n            else if (stalemates[color])\n                e -= 300;\n        }\n        const checksLength = checks.filter(Boolean).length;\n        if (checksLength === 3) {\n            e += 10;\n        }\n        else if (checksLength === 2) {\n            e += 1;\n        }\n        else if (checksLength === 1) {\n            const prev = data.previousTurn();\n            if (remainingReal > 2 && checks[prev]) {\n                e += 1.2;\n            }\n            else if (remainingReal === 2) {\n                e += 0.1;\n            }\n            else {\n                e += 0.4;\n            }\n        }\n        if (checksLength && variantData.nCheck) {\n            for (const color of colors) {\n                const lives = data.fenOptions.tag(\"lives\")[color];\n                if (lives && checks[color])\n                    e += 4 / (lives + 1);\n            }\n            e += 0.3;\n        }\n        if (variantData.barePieceRule) {\n            for (const color of colors) {\n                if (pieces[color].length <= 1)\n                    e += 300;\n            }\n        }\n        return e;\n    }\n    function getMaterialEval() {\n        const { board, pieces, isTeams, remainingReal, defaultSideToMove, variantData } = boardAccessors;\n        let myMaterial = 0, oppMaterial = 0;\n        for (const color of colors) {\n            if (board.gameType.isSameTeam(color, defaultSideToMove)) {\n                for (const pc of pieces[color]) {\n                    let pieceValue = getPieceValue(pc[0], pc[1]);\n                    pieceValue -= hanging(pc[0], pc[1]);\n                    myMaterial += pieceValue;\n                }\n            }\n            else {\n                for (const pc of pieces[color]) {\n                    let pcVal = getPieceValue(pc[0], pc[1]);\n                    if (!isTeams && remainingReal === 4 && Math.abs(color - defaultSideToMove) === 2 && !variantData.giveaway) {\n                        pcVal /= board.gameType.type === VariantType.Solo ? 2 : 3;\n                    }\n                    pcVal -= hanging(pc[0], pc[1], pcVal);\n                    oppMaterial -= pcVal;\n                }\n            }\n        }\n        if (!isTeams && remainingReal === 4) {\n            oppMaterial /= 1.4;\n            myMaterial *= 1.2;\n        }\n        if (!isTeams && remainingReal === 3) {\n            oppMaterial /= 1.25;\n            myMaterial *= 1.1;\n        }\n        myMaterial *= 2;\n        oppMaterial *= 2;\n        return { myMaterial, oppMaterial };\n    }\n    function getPinsEval() {\n        const { board, royal, pieces, defaultSideToMove, remainingReal } = boardAccessors;\n        let pinnedEval = 0, discovsEval = 0;\n        for (const i of colors) {\n            const discovered = [];\n            const pins = [];\n            for (const piece of pieces[i]) {\n                const royalPiece = royal[i];\n                if (!royalPiece)\n                    break;\n                if (royalPiece[0] === piece[0] && royalPiece[1] === piece[1])\n                    continue;\n                const [royalX, royalY] = royalPiece;\n                const pieceX = piece[0], pieceY = piece[1];\n                for (const [attackPiece, attackLine] of board.preGeneratedAttacks[i].slidingPiecesRayTracing) {\n                    let isPieceUnderAttack = false, isRoyalUnderAttack = false;\n                    for (const [attackedX, attackedY] of attackLine) {\n                        if (!isPieceUnderAttack && attackedX === pieceX && attackedY === pieceY)\n                            isPieceUnderAttack = true;\n                        if (!isRoyalUnderAttack && attackedX === royalX && attackedY === royalY)\n                            isRoyalUnderAttack = true;\n                        if (isPieceUnderAttack && isRoyalUnderAttack) {\n                            pins.push(piece);\n                        }\n                        else if (isRoyalUnderAttack && !isPieceUnderAttack) {\n                            discovered.push([attackPiece[0], attackPiece[1]]);\n                        }\n                    }\n                }\n            }\n            for (const coordinate of pins) {\n                if (hanging(coordinate[0], coordinate[1]) > 2)\n                    continue;\n                const pieceValue = Math.sqrt(getPieceValue(coordinate[0], coordinate[1]));\n                if (!board.gameType.isSameTeam(i, defaultSideToMove)) {\n                    pinnedEval += pieceValue / 2;\n                }\n                else {\n                    pinnedEval -= pieceValue;\n                }\n            }\n            for (const coordinate of discovered) {\n                if (hanging(coordinate[0], coordinate[1]) > 2)\n                    continue;\n                const pieceValue = Math.sqrt(getPieceValue(coordinate[0], coordinate[1]));\n                if (board.gameType.isSameTeam(i, defaultSideToMove)) {\n                    discovsEval += pieceValue / 2;\n                }\n                else {\n                    discovsEval -= pieceValue;\n                }\n            }\n        }\n        pinnedEval *= remainingReal / 6;\n        discovsEval *= remainingReal / 6;\n        if (discovsEval < 0)\n            discovsEval /= 10;\n        return { pinnedEval, discovsEval };\n    }\n    function getKingSafetyEval(player) {\n        const { board, royal, boardSquares, remainingReal, data, variantData, defaultSideToMove } = boardAccessors;\n        let kingEval = 0, checkableEval = 0, exposedEval = 0;\n        if (variantData.giveaway)\n            return { kingEval, checkableEval, exposedEval };\n        const baseReferences = initializeBoardSquares(() => []);\n        for (const [coordinate, attack] of board.preGeneratedAttacks[player].hoppingPieceLines) {\n            baseReferences[attack[0]][attack[1]].push([coordinate[0], coordinate[1]]);\n        }\n        for (const [coordinate, line] of board.preGeneratedAttacks[player].slidingPiecesLines) {\n            for (const attack of line) {\n                baseReferences[attack[0]][attack[1]].push([coordinate[0], coordinate[1]]);\n            }\n        }\n        const royalPiece = royal[player];\n        const squareAccessDefinitions = new Set();\n        if (royalPiece) {\n            const isChecked = Boolean(board.preGeneratedAttacks[player].slidingPieces[royalPiece[0]][royalPiece[1]] ||\n                board.preGeneratedAttacks[player].hoppingPieces[royalPiece[0]][royalPiece[1]]);\n            for (let i = 0; i < boardDimension; i++) {\n                for (let j = 0; j < boardDimension; j++) {\n                    if (isChecked) {\n                        let checkableSq = 0;\n                        if (remainingReal === 2) {\n                            checkableSq -= 0.8;\n                        }\n                        else {\n                            const players = baseReferences[i][j].map((coord) => {\n                                const piece = boardSquares[coord[0]][coord[1]];\n                                if (!piece.isPiece())\n                                    return player;\n                                return piece.color;\n                            });\n                            const prev = data.nextTurn(player);\n                            const next = data.previousTurn(player);\n                            for (const player of players) {\n                                if (remainingReal === 3) {\n                                    checkableSq -= player === next ? 3 : 2;\n                                }\n                                else if (remainingReal === 4) {\n                                    checkableSq -= player === next ? 5 : player === prev ? 2 : 3;\n                                }\n                            }\n                        }\n                        const { defenders } = getCoverage(i, j, player);\n                        if (defenders.length)\n                            checkableSq += 2.5;\n                        if (checkableSq > 0)\n                            checkableSq = 0;\n                        const accessKey = stringifyKey(i, j);\n                        if (!squareAccessDefinitions.has(accessKey)) {\n                            exposedEval -= 0.123;\n                            squareAccessDefinitions.add(accessKey);\n                        }\n                        checkableEval += checkableSq;\n                    }\n                }\n            }\n            const ki = royalPiece[0], kj = royalPiece[1];\n            for (let d = 1; d < 3; d++) {\n                const x = [ki, ki + d, ki - d];\n                const y = [kj, kj + d, kj - d];\n                for (const i of x) {\n                    for (const j of y) {\n                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                        if (!boardSquares[i]?.[j])\n                            continue;\n                        if (i === ki && j === kj)\n                            continue;\n                        const pieceString = boardSquares[i][j];\n                        if (!pieceString.isPiece())\n                            continue;\n                        if (board.gameType.isSameTeam(pieceString.color, player)) {\n                            kingEval += pieceString.piece === pawnPieceString.piece ? 2 : 1;\n                        }\n                        else {\n                            kingEval -= getPieceValue(i, j);\n                        }\n                    }\n                }\n            }\n            for (let k = -1; k < 2; k++) {\n                for (let h = -1; h < 2; h++) {\n                    const i = ki + k;\n                    const j = kj + h;\n                    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                    if (!boardSquares[i]?.[j])\n                        continue;\n                    const { attackers, defenders } = getCoverage(i, j, player);\n                    kingEval -= 2 * attackers.length;\n                    kingEval += 1 * defenders.length;\n                }\n            }\n            kingEval /= 10;\n        }\n        if (variantData.nCheck && !board.gameType.isSameTeam(board.data.sideToMove, defaultSideToMove)) {\n            const lives = data.fenOptions.tag(\"lives\")[board.data.sideToMove];\n            switch (lives) {\n                case null:\n                    break;\n                case 2:\n                    checkableEval *= 1.5;\n                    break;\n                case 1:\n                    checkableEval *= 3;\n                    break;\n                default:\n                    checkableEval *= 1.3;\n            }\n        }\n        return { kingEval, checkableEval, exposedEval };\n    }\n    function isZombieEatZombie(move) {\n        if (!verifyStandardMove(move))\n            return false;\n        const { data, defaultSideToMove, boardSquares, variantData } = boardAccessors;\n        if (variantData.giveaway)\n            return false;\n        const resigned = data.fenOptions.tag(\"resigned\");\n        if (!resigned[defaultSideToMove])\n            return false;\n        const targetPiece = boardSquares[move.endCoordinates[0]][move.endCoordinates[1]];\n        if (!targetPiece.isPiece())\n            return false;\n        if (resigned[targetPiece.color])\n            return true;\n        return false;\n    }\n    function getEval(move) {\n        let totalEval = 0;\n        const { board, data, defaultSideToMove, variantData, royal, isTeams } = boardAccessors;\n        const snapshot = board.createSnapshot();\n        const isKingsideCastle = data.fenOptions.isKingsideCastlingAvailable(data.sideToMove, board), isQueensideCastle = data.fenOptions.isQueensideCastlingAvailable(data.sideToMove, board);\n        board.makeMove([move], true);\n        board.pregenerateAttacks();\n        boardAccessors = { ...boardAccessors, ...augmentBoardAccessorsFromBoard(board) };\n        inspectCoverage();\n        const { myMaterial, oppMaterial } = getMaterialEval();\n        const hillEval = variantData.kingOfTheHill ? 416 / (3 * getDistFromHill(defaultSideToMove)) : 0;\n        if (variantData.giveaway) {\n            totalEval = -3 * myMaterial - oppMaterial - getCoordinationEval(defaultSideToMove) * 10 + hillEval;\n        }\n        else {\n            totalEval += getMatesEval();\n            const royalPiece = royal[defaultSideToMove];\n            if (royalPiece) {\n                const { attackers } = getCoverage(royalPiece[0], royalPiece[1], defaultSideToMove);\n                if (attackers.length)\n                    totalEval -= 700;\n            }\n            totalEval += getMobilityEval(defaultSideToMove);\n            totalEval += getCoordinationEval(defaultSideToMove);\n            if (isTeams) {\n                const partner = colors.find((v) => v !== defaultSideToMove && board.gameType.isSameTeam(defaultSideToMove, v));\n                if (partner)\n                    Object.values(getKingSafetyEval(partner)).forEach((v) => (totalEval += v));\n            }\n            Object.values(getPinsEval()).forEach((v) => (totalEval += v));\n            Object.values(getKingSafetyEval(defaultSideToMove)).forEach((v) => (totalEval += v));\n            totalEval += myMaterial + oppMaterial + hillEval;\n        }\n        const isCastling = \"specialType\" in move && (move.specialType === SpecialMove.CastlingKingside || move.specialType === SpecialMove.CastlingQueenside);\n        if (!isCastling && (isKingsideCastle || isQueensideCastle))\n            totalEval -= 0.5;\n        if (isZombieEatZombie(move)) {\n            totalEval -= 10000;\n        }\n        switch (board.moves.getHash(board.moves.constructPreliminaryHashString(board))) {\n            case 1:\n                totalEval -= 10000;\n                break;\n            case 2:\n                totalEval -= 20000;\n                break;\n        }\n        if (variantData.fiftyMoveRule && variantData.fiftyMoveRule - board.data.plyCount < 8)\n            totalEval -= 150000;\n        board.loadSnapshot(snapshot);\n        return totalEval;\n    }\n    return {\n        stringifiedType: ZombieType.Futer,\n        evaluate(moves, board) {\n            initializeBoardAccessorsFromBoard(board.createClone());\n            const moveValues = new Map();\n            for (const move of moves) {\n                if (verifyInternalMove(move)) {\n                    switch (move.type) {\n                        case InternalMoveSignature.Resign:\n                        case InternalMoveSignature.Timeout:\n                            moveValues.set(move, -Infinity);\n                            break;\n                        case InternalMoveSignature.ClaimWin:\n                            moveValues.set(move, Infinity);\n                            break;\n                    }\n                }\n                else\n                    moveValues.set(move, getEval(move));\n            }\n            return moveValues;\n        },\n        pickPreferredMove(evaluations) {\n            const sorted = [...evaluations.entries()].sort((a, b) => b[1] - a[1]);\n            const best = [];\n            for (const [move, evaluated] of sorted) {\n                if (sorted[0][1] - evaluated > 0.5)\n                    break;\n                best.push(move);\n            }\n            if (best.length > 5)\n                best.length = 5;\n            let pick = Math.floor(Math.random() * best.length);\n            if (pick > 0 && Math.random() > 0.8)\n                pick = 0;\n            if (pick > 1 && Math.random() > 0.8)\n                pick = 1;\n            if (pick > 2 && Math.random() > 0.8)\n                pick = 2;\n            return randomlyPickNextChainedMoves(best[pick]);\n        }\n    };\n}\nexport const comfuterAlgorithm = createBotAlgorithm(createComfuterAlgorithm());\n","import { verifyStandardMove, SpecialMove, verifyInternalMove } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { createBotAlgorithm, ZombieType } from \"../BotInterface\";\nimport { comfuterAlgorithm } from \"./ComfuterEvaluation\";\nexport const createComfuterBasedAlgorithm = (algorithm) => ({\n    ...algorithm,\n    pickPreferredMove(...args) {\n        return comfuterAlgorithm.pickPreferredMove.apply(this, args);\n    }\n});\nexport const comfuterCheckerAlgorithm = createBotAlgorithm(createComfuterBasedAlgorithm({\n    stringifiedType: ZombieType.F_Checker,\n    evaluate(moves, board) {\n        const baseEvaluations = comfuterAlgorithm.evaluate.call(this, moves, board);\n        for (const [move, evaluation] of baseEvaluations) {\n            if (verifyInternalMove(move))\n                continue;\n            const snapshot = board.createSnapshot();\n            const { checks, checkmates } = board.makeMove([move]);\n            const checksLength = checks.filter(Boolean).length;\n            baseEvaluations.set(move, evaluation + (checkmates.includes(true) ? checksLength * 500 : checksLength * 1500));\n            board.moves.deleteMove(board.moves.currentMove);\n            board.loadSnapshot(snapshot);\n        }\n        return baseEvaluations;\n    }\n}));\nexport const comfuterMuncherAlgorithm = createBotAlgorithm(createComfuterBasedAlgorithm({\n    stringifiedType: ZombieType.F_Muncher,\n    evaluate(moves, board) {\n        const baseEvaluations = comfuterAlgorithm.evaluate.call(this, moves, board);\n        for (const [move, evaluation] of baseEvaluations) {\n            if (!verifyStandardMove(move))\n                continue;\n            if (move.specialType === SpecialMove.EnPassant || board.board[move.endCoordinates[0]][move.endCoordinates[1]].isEmpty())\n                continue;\n            baseEvaluations.set(move, evaluation + 5000);\n        }\n        return baseEvaluations;\n    }\n}));\nexport const comfuterPusherAlgorithm = createBotAlgorithm(createComfuterBasedAlgorithm({\n    stringifiedType: ZombieType.F_Pusher,\n    evaluate(moves, board) {\n        const baseEvaluations = comfuterAlgorithm.evaluate.call(this, moves, board);\n        for (const [move, evaluation] of baseEvaluations) {\n            if (!verifyStandardMove(move))\n                continue;\n            const pieceString = board.board[move.startCoordinates[0]][move.startCoordinates[1]];\n            if (pieceString.isPiece() && !pieceControlConfigSettings[pieceString.piece].moveGenerationSettings.isPawn) {\n                baseEvaluations.set(move, evaluation + 5000);\n            }\n        }\n        return baseEvaluations;\n    }\n}));\nexport const patzerAlgorithm = createBotAlgorithm(createComfuterBasedAlgorithm({\n    stringifiedType: ZombieType.Patzer,\n    evaluate(moves, defaultBoard) {\n        const baseEvaluations = comfuterAlgorithm.evaluate.call(this, moves, defaultBoard);\n        for (const [move, evaluation] of baseEvaluations) {\n            baseEvaluations.set(move, -evaluation);\n        }\n        return baseEvaluations;\n    }\n}));\n","import { createBotAlgorithm, ZombieType } from \"../BotInterface\";\nimport { comfuterAlgorithm } from \"./ComfuterEvaluation\";\nimport { createComfuterBasedAlgorithm } from \"./ComfuterEvaluationExtensions\";\nimport { randoBotAlgorithm } from \"./RandomEvaluation\";\nexport const RanterAlgorithm = createBotAlgorithm(createComfuterBasedAlgorithm({\n    stringifiedType: ZombieType.Ranter,\n    evaluate(...args) {\n        if (Math.random() < 0.5) {\n            return randoBotAlgorithm.evaluate.apply(this, args);\n        }\n        else\n            return comfuterAlgorithm.evaluate.apply(this, args);\n    }\n}));\n","import { verifyRequiredMove, verifyStandardMove } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport { createBotAlgorithm, ZombieType } from \"../BotInterface\";\nexport function randomlyPickNextChainedMoves(move, resultingMove = []) {\n    const newMove = [...resultingMove, move];\n    if (move.nextChainedMoves && !move.isForcedContinuation && Math.random() > 0.5) {\n        return randomlyPickNextChainedMoves(move.nextChainedMoves[Math.floor(Math.random() * move.nextChainedMoves.length)], newMove);\n    }\n    else {\n        if (!verifyRequiredMove(newMove))\n            throw new Error(\"Required move length is 0\");\n        return newMove;\n    }\n}\nexport const randoBotAlgorithm = createBotAlgorithm({\n    stringifiedType: ZombieType.Rando,\n    evaluate(moves, board) {\n        const copyOfMoves = moves.slice();\n        for (let i = moves.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [copyOfMoves[i], copyOfMoves[j]] = [moves[j], moves[i]];\n        }\n        const data = board.data, boardSquares = board.board;\n        const zombieEatZombieMoves = [];\n        const otherMoves = [];\n        for (const move of copyOfMoves) {\n            if (verifyStandardMove(move)) {\n                const targetPiece = boardSquares[move.endCoordinates[1]][move.endCoordinates[0]];\n                if (targetPiece.isPiece() && data.fenOptions.tag(\"resigned\")[targetPiece.color]) {\n                    zombieEatZombieMoves.push(move);\n                    continue;\n                }\n            }\n            otherMoves.push(move);\n        }\n        let startingEvaluation = 0;\n        return new Map([\n            ...otherMoves.reduce((p, n) => (p.push([n, --startingEvaluation]), p), []),\n            ...zombieEatZombieMoves.reduce((p, n) => (p.push([n, --startingEvaluation / 2]), p), [])\n        ]);\n    },\n    pickPreferredMove(evaluations) {\n        return randomlyPickNextChainedMoves([...evaluations.entries()].reduce((p, n) => (n[1] > p[1] ? n : p))[0]);\n    }\n});\n","import { verifyStandardMove, SpecialMove } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { createBotAlgorithm, ZombieType } from \"../BotInterface\";\nimport { randoBotAlgorithm } from \"./RandomEvaluation\";\nexport const createRandomBasedAlgorithm = (algorithm) => ({\n    ...algorithm,\n    pickPreferredMove(...args) {\n        return randoBotAlgorithm.pickPreferredMove.apply(this, args);\n    }\n});\nexport const checkerAlgorithm = createBotAlgorithm(createRandomBasedAlgorithm({\n    stringifiedType: ZombieType.Checker,\n    evaluate(moves, board) {\n        const baseEvaluations = randoBotAlgorithm.evaluate.call(this, moves, board);\n        for (const [move, evaluation] of baseEvaluations) {\n            const snapshot = board.createSnapshot();\n            const { checks, checkmates } = board.makeMove([move]);\n            if (checks.filter((c, i) => c && !checkmates[i] === c).length === 0) {\n                baseEvaluations.set(move, evaluation / (evaluation / 2));\n            }\n            board.loadSnapshot(snapshot);\n        }\n        return baseEvaluations;\n    }\n}));\nexport const muncherAlgorithm = createBotAlgorithm(createRandomBasedAlgorithm({\n    stringifiedType: ZombieType.Muncher,\n    evaluate(moves, board) {\n        const baseEvaluations = randoBotAlgorithm.evaluate.call(this, moves, board);\n        for (const [move, evaluation] of baseEvaluations) {\n            if (!verifyStandardMove(move))\n                continue;\n            if (move.specialType === SpecialMove.EnPassant || board.board[move.endCoordinates[0]][move.endCoordinates[1]].isEmpty())\n                continue;\n            baseEvaluations.set(move, evaluation / (evaluation / 2));\n        }\n        return baseEvaluations;\n    }\n}));\nexport const pusherAlgorithm = createBotAlgorithm(createRandomBasedAlgorithm({\n    stringifiedType: ZombieType.Pusher,\n    evaluate(moves, board) {\n        const baseEvaluations = randoBotAlgorithm.evaluate.call(this, moves, board);\n        for (const [move, evaluation] of baseEvaluations) {\n            if (!verifyStandardMove(move))\n                continue;\n            const pieceString = board.board[move.startCoordinates[0]][move.startCoordinates[1]];\n            if (pieceString.isPiece() && !pieceControlConfigSettings[pieceString.piece].moveGenerationSettings.isPawn) {\n                baseEvaluations.set(move, evaluation / (evaluation / 2));\n            }\n        }\n        return baseEvaluations;\n    }\n}));\n","export var ZombieType;\n(function (ZombieType) {\n    ZombieType[\"Rando\"] = \"rando\";\n    ZombieType[\"Futer\"] = \"comfuter\";\n    ZombieType[\"Ranter\"] = \"ranter\";\n    ZombieType[\"Patzer\"] = \"patzer\";\n    ZombieType[\"Pusher\"] = \"pusher\";\n    ZombieType[\"Checker\"] = \"checker\";\n    ZombieType[\"Muncher\"] = \"muncher\";\n    ZombieType[\"F_Pusher\"] = \"pusher_comfuter\";\n    ZombieType[\"F_Checker\"] = \"checker_comfuter\";\n    ZombieType[\"F_Muncher\"] = \"muncher_comfuter\";\n})(ZombieType || (ZombieType = {}));\nexport const verifyZombieType = (zombieType) => zombieType in ZombieType;\nexport const botAlgorithms = new Map();\nexport function createBotAlgorithm(algorithm) {\n    botAlgorithms.set(algorithm.stringifiedType, algorithm);\n    return algorithm;\n}\n","import { InsufficientMaterialConstructor } from \"./InsufficientMaterialConstructor\";\nimport { assertNonUndefined, createTuple, createTupleFromCallback } from \"@client/ts/baseTypes\";\nimport { colors, totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport { stalemateOptionsValues } from \"../../FENDataDecorators/StalemateOptions\";\nimport { pieceControlConfigSettings, verifyPieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { disabledRank } from \"../../PieceControlDecorators/PromotionRank\";\nimport { compareCoordinates } from \"@moveGeneration/Board/BoardInterface\";\nexport class InsufficientMaterialChecker {\n    state;\n    noRoyalsToMate = false;\n    isDisabled = false;\n    promotionPieces;\n    hasPromotion;\n    constructor(state, board) {\n        this.state = state;\n        for (const variantRule of board.variantRules) {\n            const { isDisabled, isPartiallyDisabled } = variantRule.getInsufficientMaterialData();\n            if (isDisabled) {\n                this.isDisabled = true;\n                break;\n            }\n            else if (isPartiallyDisabled)\n                this.noRoyalsToMate = true;\n        }\n        this.hasPromotion = board.variantData.promotionRank !== disabledRank;\n        this.promotionPieces = board.variantData.promotionPieces || [];\n    }\n    getRoyalPieceMedians(board) {\n        const { walls, royalMoveMedians } = this.state, royal = board.data.fenOptions.tag(\"royal\"), variantData = board.variantData, boardSquares = board.board;\n        const extraWalls = boardSquares.reduce((accumulator, row, i) => {\n            return (accumulator +\n                row.reduce((accumulator, square, j) => {\n                    if (square.isWall() && !walls[i][j]) {\n                        return accumulator + 1;\n                    }\n                    else\n                        return accumulator;\n                }, 0));\n        }, 0);\n        return royalMoveMedians.map((median, i) => {\n            if (!royal[i])\n                return;\n            let minimumMedian;\n            if (variantData.stalemateOptions === stalemateOptionsValues.stalemateLoses) {\n                minimumMedian = 1;\n                median--;\n            }\n            else {\n                median++;\n                minimumMedian = 2;\n            }\n            median -= extraWalls;\n            if (median < minimumMedian)\n                median = minimumMedian;\n            return median;\n        });\n    }\n    obtainPieceSymbolFromCoordinate(board, coordinate) {\n        const { optimizedPieces, pieceSquareMedians, backwardsPieceRegistry } = this.state;\n        const piece = board.board[coordinate[0]][coordinate[1]];\n        if (pieceControlConfigSettings[piece.piece].moveGenerationSettings.isPawn && this.hasPromotion) {\n            const availableSymbols = [...optimizedPieces]\n                .filter((p) => verifyPieceLetter(p) && !pieceControlConfigSettings[p].moveGenerationSettings.isPawn)\n                .map((p) => pieceSquareMedians[p]);\n            if (availableSymbols.length === 0) {\n                return { selectedSymbol: InsufficientMaterialConstructor.NON_INDEXED_PIECE_SYMBOL, piece };\n            }\n            else {\n                const candidates = availableSymbols.map((s) => {\n                    return s[Object.getOwnPropertySymbols(s)[0]].reduce((p, n) => p + (n ?? 0), 0);\n                });\n                const candidateIndex = candidates.indexOf(Math.max(...candidates));\n                const symbol = Object.getOwnPropertySymbols(availableSymbols[candidateIndex])[0];\n                return {\n                    selectedSymbol: symbol,\n                    piece\n                };\n            }\n        }\n        else {\n            const availableSymbols = Object.getOwnPropertySymbols(pieceSquareMedians[piece.piece]);\n            const selectedSymbol = availableSymbols.length === 1 ? availableSymbols[0] : backwardsPieceRegistry[piece.piece][coordinate[0]][coordinate[1]];\n            assertNonUndefined(selectedSymbol);\n            return { selectedSymbol, piece };\n        }\n    }\n    getPartialIntersection(parameters) {\n        const { pieceSquareMedians } = this.state, { board, army, pieces, royalColor } = parameters;\n        for (const coordinate of army) {\n            const { piece, selectedSymbol } = this.obtainPieceSymbolFromCoordinate(board, coordinate);\n            const symbolsLength = Object.getOwnPropertySymbols(pieceSquareMedians[piece.piece]).length;\n            if (symbolsLength > 1 || pieceControlConfigSettings[piece.piece].moveGenerationSettings.isColorBound) {\n                for (const enemyCoordinate of pieces[royalColor]) {\n                    const { selectedSymbol: enemySymbol } = this.obtainPieceSymbolFromCoordinate(board, enemyCoordinate);\n                    if (selectedSymbol === enemySymbol)\n                        return Infinity;\n                }\n            }\n            else\n                return Infinity;\n        }\n        return -1;\n    }\n    checkCurrentState(board) {\n        const fenOptions = board.data.fenOptions;\n        const dead = fenOptions.tag(\"dead\"), royal = fenOptions.tag(\"royal\");\n        const pieces = board.getPlayerPieces(), resultingInsufficientPieces = createTuple(false, totalPlayers);\n        if (this.isDisabled)\n            return resultingInsufficientPieces;\n        const royalPieceMedians = this.getRoyalPieceMedians(board), { oppositionMedians, pieceSquareMedians } = this.state;\n        const squaresPlayerCanOutrange = createTupleFromCallback(() => createTuple(0, totalPlayers), totalPlayers);\n        for (const color of colors) {\n            const army = pieces[color];\n            if (dead[color])\n                continue;\n            for (const royalColor of colors) {\n                if (color === royalColor || dead[royalColor])\n                    continue;\n                if (!royal[royalColor] || this.noRoyalsToMate) {\n                    squaresPlayerCanOutrange[royalColor][color] = this.getPartialIntersection({ board, army, pieces, royalColor });\n                }\n                else {\n                    const royalSquares = royalPieceMedians[royalColor];\n                    if (royalSquares === undefined)\n                        continue;\n                    const fenRoyal = royal[color], currentColorBounds = [];\n                    for (const coordinate of army) {\n                        if (fenRoyal && compareCoordinates(coordinate, fenRoyal)) {\n                            if (board.variantData.royalsCannotCapture) {\n                                squaresPlayerCanOutrange[color][royalColor]++;\n                            }\n                            else {\n                                squaresPlayerCanOutrange[color][royalColor] += oppositionMedians[color][royalColor];\n                            }\n                        }\n                        else {\n                            const { piece, selectedSymbol } = this.obtainPieceSymbolFromCoordinate(board, coordinate);\n                            if (this.hasPromotion && pieceControlConfigSettings[piece.piece].moveGenerationSettings.isPawn) {\n                                const medians = this.promotionPieces.map((piece) => {\n                                    const subSymbol = Object.getOwnPropertySymbols(pieceSquareMedians[piece])[0];\n                                    return pieceSquareMedians[piece][subSymbol][royalColor] ?? 0;\n                                });\n                                squaresPlayerCanOutrange[color][royalColor] += Math.max(...medians);\n                            }\n                            else {\n                                if (pieceControlConfigSettings[piece.piece].moveGenerationSettings.isColorBound) {\n                                    if (currentColorBounds.includes(selectedSymbol))\n                                        continue;\n                                    currentColorBounds.push(selectedSymbol);\n                                }\n                                squaresPlayerCanOutrange[color][royalColor] += pieceSquareMedians[piece.piece][selectedSymbol][royalColor] ?? 0;\n                            }\n                        }\n                    }\n                    squaresPlayerCanOutrange[color][royalColor] += pieces[royalColor].length - 1;\n                }\n            }\n        }\n        for (const color of colors) {\n            if (dead[color])\n                continue;\n            let sum = 0;\n            for (let i = 0; i < totalPlayers; i++) {\n                if (i === color)\n                    continue;\n                sum += squaresPlayerCanOutrange[i][color];\n            }\n            const royal = royalPieceMedians[color];\n            if ((royal !== undefined && sum <= royal) || sum < 0)\n                resultingInsufficientPieces[color] = true;\n        }\n        return resultingInsufficientPieces;\n    }\n}\n","import { createTuple, createTupleFromCallback } from \"@client/ts/baseTypes\";\nimport { initializeBoardSquares } from \"@client/ts/logic/BaseInterfaces\";\nimport { baseImmunes } from \"@moveGeneration/Board/Board\";\nimport { boardDimension, colors, totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport { createPieceFromData, emptyPieceString } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport { defaultPieces, grasshopperPieceLetter, pieceControlConfigSettings, verifyPieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { binaryMasks, findMinimumOnBoardSquares, oneBitMask, optimizePieceSet } from \"./Utilities\";\nimport { disabledRank } from \"../../PieceControlDecorators/PromotionRank\";\nimport { stringifyCoordinate } from \"@moveGeneration/Board/BoardInterface\";\nimport { bitCount } from \"@utils/NumberUtils\";\nclass InsufficientMaterialConstructor {\n    callback;\n    static NON_INDEXED_PIECE_SYMBOL = Symbol();\n    board;\n    emptyBoard;\n    pieceMoveRegistry = {};\n    possibleRoyals = createTupleFromCallback(() => [], totalPlayers);\n    boardDestinations = new Map();\n    royalPieceSets = createTupleFromCallback(() => new Set(), totalPlayers);\n    state;\n    constructor(board, callback) {\n        this.callback = callback;\n        this.board = board.createClone();\n        this.emptyBoard = this.board.board.map((row) => row.map((square) => (square.isWall() ? square : emptyPieceString)));\n        this.state = {\n            walls: this.emptyBoard.map((row) => row.map((square) => square.isWall())),\n            backwardsPieceRegistry: {},\n            royalMoveMedians: createTuple(0, totalPlayers),\n            pieceSquareMedians: {\n                [grasshopperPieceLetter]: {\n                    [InsufficientMaterialConstructor.NON_INDEXED_PIECE_SYMBOL]: [2, 2, 2, 2]\n                }\n            },\n            optimizedPieces: optimizePieceSet(this.board.variantData.promotionPieces || [], true),\n            oppositionMedians: createTupleFromCallback(() => createTuple(0, totalPlayers), totalPlayers)\n        };\n    }\n    initializeRoyals() {\n        const boardSquares = this.board.board, promotionPieces = this.board.variantData.promotionPieces || [];\n        this.board.data.fenOptions.tag(\"royal\").forEach((royal, color) => {\n            if (royal) {\n                const piece = boardSquares[royal[0]][royal[1]].piece;\n                if (pieceControlConfigSettings[piece].moveGenerationSettings.isPawn) {\n                    this.possibleRoyals[color] = [piece, ...promotionPieces];\n                }\n                else\n                    this.possibleRoyals[color] = [piece];\n            }\n            else if (promotionPieces.includes(defaultPieces.king)) {\n                this.possibleRoyals[color] = [defaultPieces.king];\n            }\n        });\n        for (const color of colors) {\n            if (this.possibleRoyals[color].length > 1) {\n                this.royalPieceSets[color] = optimizePieceSet(this.possibleRoyals[color], false);\n            }\n            else if (this.possibleRoyals[color].length === 1) {\n                this.royalPieceSets[color].add(this.possibleRoyals[color][0]);\n            }\n        }\n    }\n    recurseThroughSquares(i, j, piece) {\n        const { emptyBoard, board: { controls }, pieceMoveRegistry } = this;\n        const currentSquares = new Set(), unvisitedSquares = new Set();\n        if (!piece.isPiece())\n            throw new TypeError(`Wrong piece signature detected at ${piece.value}`);\n        const baseBuilder = controls[piece.piece]().setColor(piece.color).setBoard(emptyBoard).setBaseImmunePieces(baseImmunes);\n        const registryResult = initializeBoardSquares(() => new Uint16Array(boardDimension).fill(oneBitMask));\n        function recurse(x, y) {\n            const control = baseBuilder.setCoordinates(x, y).constructPieceControl();\n            const moves = control.getPseudoLegalMoves(), moveLength = moves.length;\n            if (moveLength === 0)\n                return;\n            for (let i = 0; i < moveLength; i++) {\n                const move = moves[i].move;\n                const moveString = stringifyCoordinate(move);\n                registryResult[x][y][move[0]] |= binaryMasks[move[1]];\n                if (!currentSquares.has(moveString)) {\n                    unvisitedSquares.add(moveString);\n                }\n            }\n            for (const value of unvisitedSquares) {\n                const [x, y] = value.split(\":\");\n                if (!currentSquares.has(value)) {\n                    currentSquares.add(value);\n                    recurse(parseInt(x, 10), parseInt(y, 10));\n                }\n            }\n        }\n        recurse(i, j);\n        if (!(piece.piece in pieceMoveRegistry))\n            pieceMoveRegistry[piece.piece] = {};\n        pieceMoveRegistry[piece.piece][Symbol()] = registryResult;\n        const permutations = new Uint16Array(14).fill(oneBitMask);\n        currentSquares.forEach((value) => {\n            const valueArr = value.split(\":\");\n            permutations[parseInt(valueArr[0], 10)] |= binaryMasks[parseInt(valueArr[1], 10)];\n        });\n        unvisitedSquares.forEach((value) => {\n            const valueArr = value.split(\":\");\n            permutations[parseInt(valueArr[0], 10)] |= binaryMasks[parseInt(valueArr[1], 10)];\n        });\n        return permutations;\n    }\n    addToBoardDestinations(i, j, piece) {\n        const permutations = this.recurseThroughSquares(i, j, piece);\n        const boardPiece = this.boardDestinations.get(piece.piece);\n        if (boardPiece) {\n            this.boardDestinations.set(piece.piece, boardPiece.concat(permutations));\n        }\n        else {\n            this.boardDestinations.set(piece.piece, [permutations]);\n        }\n    }\n    getBoardDestinations() {\n        const boardSquares = this.board.board, promotionRank = this.board.variantData.promotionRank || disabledRank, promotionPieces = this.board.variantData.promotionPieces || [];\n        for (let i = 0; i < boardDimension; i++) {\n            for (let j = 0; j < boardDimension; j++) {\n                if (boardSquares[i][j].isPiece())\n                    this.addToBoardDestinations(i, j, boardSquares[i][j]);\n            }\n        }\n        const hasPromotion = promotionRank !== disabledRank && promotionPieces.some((p) => verifyPieceLetter(p));\n        const promotionRanks = [boardDimension - promotionRank, promotionRank - 1, promotionRank - 1, boardDimension - promotionRank];\n        const optimizedPieces = optimizePieceSet(promotionPieces, true);\n        if (hasPromotion) {\n            for (let color of colors) {\n                color &= 1;\n                for (let x = 0; x < boardDimension; x++) {\n                    const [i, j] = [color ? promotionRanks[color] : x, color ? x : promotionRanks[color]];\n                    if (this.state.walls[i][j])\n                        continue;\n                    for (const piece of optimizedPieces) {\n                        this.addToBoardDestinations(i, j, createPieceFromData(0, piece));\n                    }\n                }\n            }\n        }\n    }\n    initializeBackwardsPieceRegistry() {\n        const entries = this.boardDestinations.entries(), { state: { backwardsPieceRegistry }, pieceMoveRegistry } = this;\n        for (const [entry, uintArray] of entries) {\n            if (pieceControlConfigSettings[entry].moveGenerationSettings.isPawn || entry === grasshopperPieceLetter || !verifyPieceLetter(entry))\n                continue;\n            let isAlwaysIntersecting = true;\n            const permutationArray = [];\n            for (const permutationEntry of uintArray) {\n                if (permutationArray.length === 0) {\n                    permutationArray.push(permutationEntry);\n                }\n                else {\n                    const index = permutationArray.findIndex((uintArr) => {\n                        if (typeof uintArr !== \"number\")\n                            return uintArr.every((n, j) => n === permutationEntry[j]);\n                        return false;\n                    });\n                    if (~index) {\n                        permutationArray.push(index);\n                    }\n                    else {\n                        permutationArray.push(permutationEntry);\n                        isAlwaysIntersecting = false;\n                    }\n                }\n            }\n            if (isAlwaysIntersecting) {\n                pieceMoveRegistry[entry] = {\n                    [Symbol()]: pieceMoveRegistry[entry][Object.getOwnPropertySymbols(pieceMoveRegistry[entry])[0]]\n                };\n            }\n            else {\n                if (!(entry in backwardsPieceRegistry)) {\n                    backwardsPieceRegistry[entry] = initializeBoardSquares(() => null);\n                }\n                const remappedSymbols = [];\n                for (const squares of permutationArray) {\n                    let remappedSymbol;\n                    if (typeof squares === \"number\") {\n                        remappedSymbols.push(squares);\n                        continue;\n                    }\n                    for (let i = 0; i < boardDimension; i++) {\n                        for (let j = 0; j < boardDimension; j++) {\n                            if ((squares[i] & binaryMasks[j]) ^ oneBitMask) {\n                                if (!remappedSymbol) {\n                                    remappedSymbol = Symbol();\n                                    remappedSymbols.push(remappedSymbol);\n                                }\n                                this.state.backwardsPieceRegistry[entry][i][j] ??= remappedSymbol;\n                            }\n                        }\n                    }\n                }\n                const uintValues = Object.getOwnPropertySymbols(pieceMoveRegistry[entry]).map((sym) => pieceMoveRegistry[entry][sym]);\n                pieceMoveRegistry[entry] = {};\n                for (let i = 0; i < uintValues.length; i++) {\n                    const remapped = remappedSymbols[i];\n                    if (typeof remapped === \"number\")\n                        continue;\n                    if (typeof remapped === \"undefined\")\n                        break;\n                    pieceMoveRegistry[entry][remapped] = uintValues[i];\n                }\n            }\n        }\n    }\n    generateOppositionSquares() {\n        const boardSquares = this.board.board, controls = this.board.controls, { emptyBoard } = this;\n        const royalMoves = createTuple(initializeBoardSquares(() => new Uint16Array(boardDimension).fill(oneBitMask)), totalPlayers);\n        const oppositionRowEchelon = createTuple(undefined, totalPlayers);\n        this.board.data.fenOptions.tag(\"royal\").forEach((royal, color) => {\n            if (!royal)\n                return;\n            const royalPiece = boardSquares[royal[0]][royal[1]];\n            const controlBuilder = controls[royalPiece.piece];\n            const builder = controlBuilder().setColor(0).setBaseImmunePieces(baseImmunes).setBoard(emptyBoard);\n            const finalArray = initializeBoardSquares(() => new Uint16Array(14).fill(oneBitMask));\n            for (let i = 0; i < boardSquares.length; i++) {\n                for (let j = 0; j < boardSquares[0].length; j++) {\n                    if (emptyBoard[i][j].isWall())\n                        continue;\n                    const control = builder.setCoordinates(i, j).constructPieceControl();\n                    const moves = control.getPseudoLegalMoves();\n                    const permutationArray = new Uint16Array(boardDimension).fill(oneBitMask);\n                    for (const { move } of moves)\n                        permutationArray[move[0]] |= binaryMasks[move[1]];\n                    finalArray[i][j] = permutationArray;\n                    royalMoves[color][i][j] = permutationArray;\n                }\n            }\n            oppositionRowEchelon[color] = finalArray;\n        });\n        for (const color of colors) {\n            this.state.royalMoveMedians[color] = findMinimumOnBoardSquares(royalMoves[color]);\n        }\n        return { oppositionRowEchelon, royalMoves };\n    }\n    generateOppositeMedians(rowEchelon) {\n        const { emptyBoard, state: { oppositionMedians } } = this, royals = this.board.data.fenOptions.tag(\"royal\");\n        for (let i = 0; i < totalPlayers; i++) {\n            for (let j = 0; j < totalPlayers; j++) {\n                if (i === j || rowEchelon[i] === undefined)\n                    continue;\n                const royalPieceA = royals[i], royalPieceB = royals[j];\n                if (!royalPieceA || !royalPieceB)\n                    continue;\n                const finalArray = Array.from({ length: 14 }, () => Array.from({ length: 14 }, () => 0));\n                for (let i2 = 0; i2 < boardDimension; i2++) {\n                    for (let j2 = 0; j2 < boardDimension; j2++) {\n                        if (emptyBoard[i2][j2].isWall())\n                            continue;\n                        const jjIndex = rowEchelon[j];\n                        const iiIndex = rowEchelon[i];\n                        if (!jjIndex || !iiIndex)\n                            throw new Error(`Central opposition matrix indexes are undefined: ${jjIndex?.toString() ?? \"undefined\"}  ${iiIndex?.toString() ?? \"undefined\"}`);\n                        if ((jjIndex[i2][j2][royalPieceA[1]] & binaryMasks[royalPieceA[0]]) ^ oneBitMask &&\n                            (iiIndex[i2][j2][royalPieceB[1]] & binaryMasks[royalPieceB[0]]) ^ oneBitMask) {\n                            continue;\n                        }\n                        const uintArray = jjIndex[i2][j2].map((e, x) => e & iiIndex[i2][j2][x]);\n                        let newResultingSquares = 0;\n                        for (let dimSquare = 0; dimSquare < boardDimension; dimSquare++) {\n                            newResultingSquares += bitCount(uintArray[dimSquare]) - 1;\n                        }\n                        finalArray[i2][j2] = newResultingSquares;\n                    }\n                }\n                let minimum = Infinity;\n                for (let i2 = 0; i2 < boardDimension; i2++) {\n                    for (let j2 = 0; j2 < boardDimension; j2++) {\n                        if (finalArray[i2][j2] !== 0 && finalArray[i2][j2] < minimum) {\n                            minimum = finalArray[i2][j2];\n                        }\n                    }\n                }\n                oppositionMedians[i][j] = minimum - 1;\n            }\n        }\n    }\n    generatePieceMoveMedians(royalMoves) {\n        const { pieceMoveRegistry, state: { pieceSquareMedians, walls }, royalPieceSets } = this;\n        let currentMessages = 0, requiredMessages = 0;\n        for (const pieceLetter in pieceMoveRegistry) {\n            if (!verifyPieceLetter(pieceLetter) || !Object.prototype.hasOwnProperty.call(pieceMoveRegistry, pieceLetter))\n                continue;\n            if (pieceLetter in pieceSquareMedians)\n                continue;\n            pieceSquareMedians[pieceLetter] = {};\n            const registeredSymbols = Object.getOwnPropertySymbols(pieceMoveRegistry[pieceLetter]);\n            for (const registeredSymbol of registeredSymbols) {\n                const pieceMedianCounter = new Worker(new URL(\"./PieceMedianCounter.ts\", import.meta.url));\n                pieceMedianCounter.postMessage({\n                    walls,\n                    moveRegistryArray: pieceMoveRegistry[pieceLetter][registeredSymbol].map((r) => r.map((uint) => uint.buffer)),\n                    royalMoves: royalMoves.map((board) => board.map((r) => r.map((uint) => uint.buffer))),\n                    royalPieceSet: royalPieceSets.map((s) => [...s])\n                });\n                requiredMessages++;\n                pieceMedianCounter.onmessage = (e) => {\n                    pieceSquareMedians[pieceLetter][registeredSymbol] = e.data;\n                    pieceMedianCounter.terminate();\n                    if (requiredMessages === ++currentMessages) {\n                        this.callback(this.state);\n                    }\n                };\n            }\n        }\n    }\n    generateInsufficientMaterialState() {\n        this.initializeRoyals();\n        this.getBoardDestinations();\n        this.initializeBackwardsPieceRegistry();\n        const { royalMoves, oppositionRowEchelon } = this.generateOppositionSquares();\n        this.generateOppositeMedians(oppositionRowEchelon);\n        this.generatePieceMoveMedians(royalMoves);\n    }\n}\nexport { InsufficientMaterialConstructor };\n","import { createTupleFromCallback } from \"@client/ts/baseTypes\";\nimport { initializeBoardSquares } from \"@client/ts/logic/BaseInterfaces\";\nimport { boardDimension, colors, totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport { countMinimumOf2DArrayExcludingZero } from \"@client/ts/utils/ArrayUtils\";\nimport { countBitsOnBoard } from \"./Utilities\";\nself.onmessage = (e) => {\n    const { walls, royalPieceSet, royalMoves, moveRegistryArray } = e.data;\n    const resultingMedianArray = createTupleFromCallback(() => initializeBoardSquares(() => 0), totalPlayers);\n    for (let i = 0; i < boardDimension; i++) {\n        for (let j = 0; j < boardDimension; j++) {\n            if (walls[i][j])\n                continue;\n            const moves = new Uint16Array(moveRegistryArray[i][j]);\n            for (const color of colors) {\n                if (royalPieceSet[color].length === 0) {\n                    resultingMedianArray[color] = undefined;\n                    continue;\n                }\n                else {\n                    let resultingSquares = 0;\n                    for (let royalI = 0; royalI < boardDimension; royalI++) {\n                        for (let royalJ = 0; royalJ < boardDimension; royalJ++) {\n                            const royalMoveSet = new Uint16Array(royalMoves[color][royalI][royalJ]);\n                            const result = moves.map((e, x) => e & royalMoveSet[x]);\n                            const newResultingSquares = countBitsOnBoard(result);\n                            if (newResultingSquares > resultingSquares) {\n                                resultingSquares = newResultingSquares;\n                            }\n                        }\n                    }\n                    const resultingMedian = resultingMedianArray[color];\n                    if (resultingMedian)\n                        resultingMedian[i][j] = resultingSquares;\n                }\n            }\n        }\n    }\n    postMessage(resultingMedianArray.map((arr) => {\n        if (arr) {\n            const minimum = countMinimumOf2DArrayExcludingZero(arr);\n            return minimum === Infinity ? 0 : minimum;\n        }\n        else\n            return arr;\n    }));\n};\n","export function serializeInsufficientMaterialState(state) {\n    const backwardsPieceRegistry = {};\n    const counters = {};\n    let individualCounter = 0;\n    let key;\n    for (key in state.backwardsPieceRegistry) {\n        if (!Object.prototype.hasOwnProperty.call(state.backwardsPieceRegistry, key))\n            continue;\n        backwardsPieceRegistry[key] = state.backwardsPieceRegistry[key].map((r) => r.map((e) => {\n            if (e !== null) {\n                if (e in counters) {\n                    return counters[e];\n                }\n                else {\n                    counters[e] = individualCounter++;\n                    return counters[e];\n                }\n            }\n            else\n                return e;\n        }));\n    }\n    const pieceSquareMedians = {};\n    for (key in state.pieceSquareMedians) {\n        if (!Object.prototype.hasOwnProperty.call(state.pieceSquareMedians, key))\n            continue;\n        const result = {};\n        for (const symbol of Object.getOwnPropertySymbols(state.pieceSquareMedians[key])) {\n            if (symbol in counters) {\n                result[counters[symbol]] = state.pieceSquareMedians[key][symbol];\n            }\n            else\n                result[individualCounter--] = state.pieceSquareMedians[key][symbol];\n        }\n        pieceSquareMedians[key] = result;\n    }\n    return {\n        ...state,\n        backwardsPieceRegistry,\n        pieceSquareMedians,\n        optimizedPieces: [...state.optimizedPieces]\n    };\n}\nexport function deserializeInsufficientMaterialState(state) {\n    const backwardsPieceRegistry = {};\n    const counters = {};\n    let key;\n    for (key in state.backwardsPieceRegistry) {\n        if (!Object.prototype.hasOwnProperty.call(state.backwardsPieceRegistry, key))\n            continue;\n        counters[key] = {};\n        backwardsPieceRegistry[key] = state.backwardsPieceRegistry[key].map((r) => r.map((e) => {\n            if (e !== null) {\n                if (!(e in counters[key]))\n                    counters[key][e] = Symbol();\n                return counters[key][e];\n            }\n            else\n                return e;\n        }));\n    }\n    const pieceSquareMedians = {};\n    for (key in state.pieceSquareMedians) {\n        if (!Object.prototype.hasOwnProperty.call(state.pieceSquareMedians, key))\n            continue;\n        const result = {};\n        for (const numericKey in state.pieceSquareMedians[key]) {\n            if (!Object.prototype.hasOwnProperty.call(state.pieceSquareMedians[key], numericKey))\n                continue;\n            const indexingNumber = Number(numericKey);\n            if (key in counters && indexingNumber in counters[key]) {\n                result[counters[key][indexingNumber]] = state.pieceSquareMedians[key][indexingNumber];\n            }\n            else\n                result[Symbol()] = state.pieceSquareMedians[key][indexingNumber];\n        }\n        pieceSquareMedians[key] = result;\n    }\n    return {\n        ...state,\n        backwardsPieceRegistry,\n        pieceSquareMedians,\n        optimizedPieces: new Set(state.optimizedPieces)\n    };\n}\n","import { boardDimension } from \"@moveGeneration/GameInformation/GameData\";\nimport { verifyPieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { bitCount } from \"@utils/NumberUtils\";\nexport const binaryMasks = Array(boardDimension)\n    .fill(1)\n    .map((v, i) => (v << boardDimension) | (v << (boardDimension - 1 - i)));\nexport const oneBitMask = 1 << boardDimension;\nexport function countBitsOnBoard(board) {\n    let setBits = 0;\n    for (let x = 0; x < boardDimension; x++) {\n        setBits += bitCount(board[x] ^ oneBitMask);\n    }\n    return setBits;\n}\nexport function findMinimumOnBoardSquares(board) {\n    let minimum = Infinity;\n    for (let i = 0; i < boardDimension; i++) {\n        for (let j = 0; j < boardDimension; j++) {\n            const setBits = countBitsOnBoard(board[i][j]);\n            if (setBits !== 0 && setBits < minimum) {\n                minimum = setBits;\n            }\n        }\n    }\n    return minimum;\n}\nexport function optimizePieceSet(possiblePieces, maximumTarget) {\n    const optimalRoyalMoveSets = [\n        [\"β\", \"W\", \"R\", \"E\", \"M\", \"Q\", \"D\", \"A\"],\n        [\"γ\", \"F\", \"B\", \"H\", \"M\", \"Q\", \"D\", \"A\", \"Δ\"],\n        [\"Y\", \"Z\"],\n        [\"I\", \"J\"],\n        [\"S\", \"T\"],\n        [\"S\", \"Y\"],\n        [\"I\", \"Y\"],\n        [\"U\", \"N\", \"O\"],\n        [\"H\", \"A\"],\n        [\"E\", \"A\"],\n        [\"Δ\", \"H\"],\n        [\"C\", \"L\"],\n        [\"C\", \"V\"]\n    ];\n    const moveSet = new Set();\n    for (const optimalMoveSet of optimalRoyalMoveSets) {\n        const detractionSet = maximumTarget ? optimalMoveSet.slice().reverse() : optimalMoveSet;\n        for (const piece of possiblePieces) {\n            if (detractionSet.includes(piece)) {\n                const target = detractionSet.slice(0, -detractionSet.indexOf(piece));\n                target.forEach((t) => {\n                    if (possiblePieces.includes(t) && verifyPieceLetter(t))\n                        moveSet.add(t);\n                });\n                break;\n            }\n        }\n    }\n    if (moveSet.size === 0) {\n        possiblePieces.forEach((p) => {\n            if (verifyPieceLetter(p))\n                moveSet.add(p);\n        });\n    }\n    return moveSet;\n}\n","import { boardDimension } from \"@moveGeneration/GameInformation/GameData\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { RoyalsCannotCapture } from \"../PieceControlDecorators/RoyalsCannotCapture\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"atomic\";\nclass Atomic extends VariantRule {\n    static {\n        VariantRule.initVariantRule(Atomic);\n    }\n    dependencies = new Map([[RoyalsCannotCapture, []]]);\n    static atomicCoordinates = [\n        [-1, -1],\n        [-1, 0],\n        [0, -1],\n        [-1, 1],\n        [1, -1],\n        [1, 0],\n        [0, 1],\n        [1, 1]\n    ];\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Atomic\",\n                description: \"Captures cause all surrounding pieces except pawns to explode\",\n                tag,\n                color: variantRuleColors.extending,\n                displayIcon: chessGlyphIndex.atomic\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Atomic$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"Atomic\";\n    }\n    isDisabled() {\n        return false;\n    }\n    isComplexEvaluation() {\n        return true;\n    }\n    getCapturedPieces(moveData) {\n        const baseCoordinates = this.callHandler(\"getCapturedPieces\", arguments);\n        const addCoordinate = (disI, disJ) => {\n            const coordinateI = moveData.endCoordinates[0] + disI;\n            const coordinateJ = moveData.endCoordinates[1] + disJ;\n            if (coordinateI >= 0 && coordinateI <= boardDimension && coordinateJ >= 0 && coordinateJ <= boardDimension) {\n                const pieceString = this.decorator.board.board[coordinateI][coordinateJ];\n                if ((pieceString.isPiece() || pieceString.isDead()) &&\n                    !pieceControlConfigSettings[pieceString.piece].moveGenerationSettings.isPawn) {\n                    baseCoordinates.push([coordinateI, coordinateJ]);\n                }\n            }\n        };\n        if (baseCoordinates.length !== 0) {\n            for (const [i, j] of Atomic.atomicCoordinates) {\n                addCoordinate(i, j);\n            }\n            baseCoordinates.push([...moveData.startCoordinates]);\n        }\n        return baseCoordinates;\n    }\n}\nexport { Atomic };\n","import { FENData } from \"@moveGeneration/FENData/FENData\";\nimport { totalPlayers, VariantType } from \"@moveGeneration/GameInformation/GameData\";\nimport { verifyNumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { createPieceFromData, deadColorIndex } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport { InternalMoveSignature } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { VariantRule } from \"@moveGeneration/VariantRules/VariantRule\";\nimport { variantRuleColors } from \"@moveGeneration/VariantRules/VariantRuleInterface\";\nconst tag = \"deadKingWalking\";\nexport class DeadKingWalking extends VariantRule {\n    static {\n        VariantRule.initVariantRule(DeadKingWalking);\n    }\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Dead King Walking\",\n                description: \"Resigned players are controlled by a bot\",\n                tag,\n                color: variantRuleColors.autogenous,\n                displayIcon: \"\"\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^DeadKingWalking$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"DeadKingWalking\";\n    }\n    isDisabled({ variantDataRules, gameType, fenTags }) {\n        return (gameType === VariantType.Teams ||\n            fenTags.dead.value.reduce((p, n, i) => p + Number(n || fenTags.resigned.value[i]), 0) <= totalPlayers - 1 ||\n            (variantDataRules.pointsForMate !== false && variantDataRules.pointsForMate < 6));\n    }\n    processInternalMove(internalMove) {\n        if (internalMove.type === InternalMoveSignature.Resign ||\n            internalMove.type === InternalMoveSignature.ClaimWin ||\n            internalMove.type === InternalMoveSignature.Timeout) {\n            const { sideToMove, fenOptions, board } = this.decorator;\n            const dead = fenOptions.tag(\"dead\"), resigned = fenOptions.tag(\"resigned\");\n            resigned[sideToMove] = true;\n            dead[sideToMove] = true;\n            for (const coordinate of board.getPlayerPieces()[sideToMove]) {\n                const piece = board.board[coordinate[0]][coordinate[1]].piece;\n                if (pieceControlConfigSettings[piece].moveGenerationSettings.isPawn) {\n                    board.board[coordinate[0]][coordinate[1]] = createPieceFromData(deadColorIndex, piece);\n                }\n            }\n            const deadPlayers = dead.map((d, i) => d || resigned[i]).filter(Boolean);\n            if (deadPlayers.length === totalPlayers - 1) {\n                const alivePlayer = deadPlayers.findIndex((d) => !d);\n                if (verifyNumericColor(alivePlayer)) {\n                    this.decorator.assignPoints(alivePlayer, this.decorator.countTotalPointsOnBoard().reduce((p, n, i) => p + (i === alivePlayer ? n : 0), 0));\n                }\n            }\n            return { stalemates: [false, false, false, false] };\n        }\n        else\n            return this.callHandler(\"processInternalMove\", arguments);\n    }\n}\n","import { SpecialMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { emptyPieceString } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { nonPlayablePieces } from \"../../../GameInformation/GameUnits/GameUnits\";\nimport { assertNonUndefined } from \"@client/ts/baseTypes\";\nimport { isVerticalPlacement } from \"@client/ts/logic/BaseInterfaces\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"enPassant\";\nexport class EnPassant extends VariantRule {\n    static {\n        VariantRule.initVariantRule(EnPassant);\n    }\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"En Passant\",\n                description: \"Pawns can capture en passant\",\n                tag,\n                color: variantRuleColors.minor,\n                displayIcon: chessGlyphIndex.pawnConnection\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^EnPassant$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"EnPassant\";\n    }\n    isDisabled() {\n        return false;\n    }\n    processStandardMove(moveData) {\n        const enPassants = this.decorator.fenOptions.tag(\"enPassant\");\n        const { startCoordinates: [startI, startJ], endCoordinates: [endI, endJ] } = moveData;\n        if (moveData.specialType === SpecialMove.EnPassant) {\n            const eligibleEnPassants = [];\n            enPassants.forEach((e, i) => {\n                if (!e)\n                    return;\n                if (e[0][0] === endI && e[0][1] === endJ)\n                    eligibleEnPassants.push(i);\n            });\n            for (const enPassantCoordinate of eligibleEnPassants) {\n                const enPassant = enPassants[enPassantCoordinate];\n                assertNonUndefined(enPassant);\n                this.decorator.board.board[enPassant[1][0]][enPassant[1][1]] = emptyPieceString;\n                enPassants[enPassantCoordinate] = null;\n            }\n        }\n        else {\n            const pieceString = this.decorator.board.board[startI][startJ];\n            if (!pieceString.isEmpty() && pieceString.piece !== nonPlayablePieces.duck) {\n                enPassants[this.decorator.sideToMove] = null;\n                const setting = pieceControlConfigSettings[pieceString.piece];\n                if (setting.moveGenerationSettings.isPawn &&\n                    Math.abs(isVerticalPlacement(this.decorator.sideToMove) ? startI - endI : startJ - endJ) === 2) {\n                    const enPassantInfo = [\n                        [Math.ceil((startI + endI) / 2), Math.ceil((startJ + endJ) / 2)],\n                        [endI, endJ]\n                    ];\n                    enPassants[this.decorator.sideToMove] = enPassantInfo;\n                }\n            }\n        }\n        return this.callHandler(\"processStandardMove\", arguments);\n    }\n}\n","import { createTuple } from \"../../../../../baseTypes\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { totalPlayers } from \"../../../GameInformation/GameData\";\nimport { createPieceFromData, deadColorIndex } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { RoyalsCannotCapture } from \"../PieceControlDecorators/RoyalsCannotCapture\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { verifyStandardMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"fatalCapture\";\nexport class FatalCapture extends VariantRule {\n    static {\n        VariantRule.initVariantRule(FatalCapture);\n    }\n    dependencies = new Map([[RoyalsCannotCapture, []]]);\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Fatal Capture\",\n                description: \"Pieces (but not pawns) die when they capture\",\n                tag,\n                color: variantRuleColors.extending,\n                displayIcon: chessGlyphIndex.trashBin\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^FatalCapture$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"FatalCapture\";\n    }\n    isDisabled() {\n        return false;\n    }\n    affectOptions(move) {\n        let endCaptureCoordinates;\n        if (verifyStandardMove(move)) {\n            const { startCoordinates: [startI, startJ], endCoordinates: [endI, endJ] } = move;\n            const isCapture = this.decorator.board.board[endI][endJ].isPiece();\n            const royal = this.decorator.fenOptions.tag(\"royal\")[this.decorator.sideToMove];\n            if (royal && startI === royal[0] && startJ === royal[1] && isCapture) {\n                return {\n                    checkmates: this.decorator.board.gameType.getBaseColors(this.decorator.sideToMove),\n                    checks: createTuple(false, totalPlayers),\n                    stalemates: createTuple(false, totalPlayers)\n                };\n            }\n            endCaptureCoordinates = isCapture ? move.endCoordinates : undefined;\n        }\n        const returnType = this.callHandler(\"affectOptions\", arguments);\n        if (endCaptureCoordinates) {\n            const pieceString = this.decorator.board.board[endCaptureCoordinates[0]][endCaptureCoordinates[1]];\n            if (!pieceControlConfigSettings[pieceString.piece].moveGenerationSettings.isPawn) {\n                this.decorator.board.board[endCaptureCoordinates[0]][endCaptureCoordinates[1]] = createPieceFromData(deadColorIndex, this.decorator.board.board[endCaptureCoordinates[0]][endCaptureCoordinates[1]].piece);\n            }\n        }\n        return returnType;\n    }\n}\n","import { FENData } from \"../../../FENData/FENData\";\nimport { totalPlayers } from \"../../../GameInformation/GameData\";\nimport { VariantRule } from \"../../VariantRule\";\nconst tag = \"fiftyMoveRule\";\nexport class FiftyMoveRule extends VariantRule {\n    static {\n        VariantRule.initVariantRule(FiftyMoveRule);\n    }\n    totalFullMoves;\n    constructor(fullMoves) {\n        super();\n        if (typeof fullMoves === \"number\" && fullMoves > 0) {\n            this.totalFullMoves = fullMoves;\n        }\n        else {\n            this.totalFullMoves = 50;\n        }\n    }\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        const isDisabled = this.totalFullMoves === Infinity;\n        return {\n            parameterValue: this.totalFullMoves,\n            information: {\n                name: isDisabled ? \"50 move rule disabled\" : `${this.totalFullMoves} move rule`,\n                textualForm: \"\",\n                description: isDisabled\n                    ? \"50 move rule disabled\"\n                    : `After ${this.totalFullMoves} full moves without captures or pawn pushes game is over`,\n                tag\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        const matchArray = match.match(/^FiftyMoveRule=((?:\\d+)|(?:Infinity))$/i);\n        if (matchArray) {\n            this.totalFullMoves = Number(matchArray[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    serializeToParsingForm() {\n        return `FiftyMoveRule=${this.totalFullMoves}`;\n    }\n    isDisabled() {\n        return false;\n    }\n    processStandardMove(moveData) {\n        if (this.decorator.getCapturedPieces(moveData).length > 0) {\n            this.decorator.plyCount = 0;\n        }\n        return this.callHandler(\"processStandardMove\", arguments);\n    }\n    affectOptions(move) {\n        const results = this.callHandler(\"affectOptions\", arguments);\n        if (move.isIrreversible) {\n            this.decorator.plyCount = 0;\n        }\n        else {\n            this.decorator.plyCount++;\n        }\n        const alivePlayers = totalPlayers - this.decorator.fenOptions.tag(\"dead\").filter(Boolean).length;\n        if (alivePlayers > 0 && Math.floor(this.decorator.plyCount / alivePlayers) > this.totalFullMoves) {\n            this.decorator.assignGeneralTermination(\"50-move Rule\");\n            this.injectIntoBaseClass(function () {\n                this.spreadPointsBetweenPlayersEvenly();\n            })();\n        }\n        return results;\n    }\n}\n","import { FENData } from \"../../../FENData/FENData\";\nimport { totalPlayers } from \"../../../GameInformation/GameData\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { ForcedCapture } from \"../BoardDecorators/ForcedCapture\";\nimport { StalemateOptions, stalemateOptionsValues } from \"./StalemateOptions\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"giveaway\";\nclass Giveaway extends VariantRule {\n    static {\n        VariantRule.initVariantRule(Giveaway);\n    }\n    static pointsForPiece = 3;\n    static stalematePoints = {\n        [1]: 200,\n        [2]: 400,\n        [3]: 600\n    };\n    dependencies = new Map([\n        [ForcedCapture, []],\n        [StalemateOptions, [stalemateOptionsValues.stalemateWins]]\n    ]);\n    initiallyAliveColors = totalPlayers;\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Giveaway\",\n                description: \"First to lose all pieces or stalemate wins\",\n                tag,\n                color: variantRuleColors.widespread,\n                displayIcon: chessGlyphIndex.gift\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Giveaway$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"Giveaway\";\n    }\n    isDisabled({ variantDataRules }) {\n        return variantDataRules.taboo;\n    }\n    initDecoratorSettings() {\n        this.decorator.fenOptions.setTag(\"royal\", [null, null, null, null]);\n        this.initiallyAliveColors = this.decorator.fenOptions\n            .tag(\"dead\")\n            .map((d, i) => d || this.decorator.fenOptions.tag(\"resigned\")[i])\n            .filter(Boolean).length;\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n    processStandardMove(moveData) {\n        const capturedPieces = this.decorator.getCapturedPieces(moveData);\n        const board = this.decorator.board.board;\n        for (const capturedPiece of capturedPieces) {\n            const pieceString = board[capturedPiece[0]][capturedPiece[1]];\n            if (pieceString.isPiece()) {\n                this.assignPoints(pieceString.color, Giveaway.pointsForPiece, true);\n            }\n        }\n        this.callHandler(\"processStandardMove\", arguments);\n        return { endPiece: [] };\n    }\n    affectOptions() {\n        const returnType = this.callHandler(\"affectOptions\", arguments);\n        this.decorator.fenOptions.setTag(\"royal\", [null, null, null, null]);\n        return returnType;\n    }\n    obtainPointsForMate() {\n        // Checkmates do not exist, so the only scenario in which this gets called is stalemate\n        const aliveColors = this.decorator.fenOptions.tag(\"dead\").filter(Boolean).length;\n        switch (aliveColors) {\n            case 1:\n                if (this.initiallyAliveColors === totalPlayers) {\n                    return Giveaway.stalematePoints[1];\n                }\n            // * Fallthrough\n            case 2:\n                if (this.initiallyAliveColors >= totalPlayers - 1) {\n                    return Giveaway.stalematePoints[2];\n                }\n            // * Fallthrough\n            case 3:\n                return Giveaway.stalematePoints[3];\n            default:\n                console.error(`Unexpected players length ${aliveColors}`);\n                return 0;\n        }\n    }\n    assignPoints(sideToMove, points, isGiveawayAssigned = false) {\n        if (isGiveawayAssigned) {\n            for (const decorator of this.wrappingDecorators) {\n                if (decorator.assignPoints) {\n                    decorator.assignPoints(sideToMove, points);\n                    return;\n                }\n            }\n            FENData.prototype.assignPoints.call(this.decorator, sideToMove, points);\n        }\n    }\n}\nexport { Giveaway };\n","import { compareArrays } from \"@client/ts/utils/ArrayUtils\";\nimport { compareCoordinates } from \"../../../Board/BoardInterface\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { colors, convertCoordinateToPGN4, getPlayerNameFromColor } from \"../../../GameInformation/GameData\";\nimport { InternalMoveSignature } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { parseSingleCoordinate } from \"@client/ts/logic/utils/Tags/Utils\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"kingOfTheHill\";\nclass KingOfTheHill extends VariantRule {\n    static {\n        VariantRule.initVariantRule(KingOfTheHill);\n    }\n    static defaultCoordinates = [\n        [7, 7],\n        [7, 6],\n        [6, 7],\n        [6, 6]\n    ];\n    static defaultRoyal = \"K\";\n    hillSquares;\n    constructor(hillSquares) {\n        super();\n        if (Array.isArray(hillSquares) &&\n            hillSquares.every((c) => Array.isArray(c) && c.length === 2 && c.every((n) => typeof n === \"number\"))) {\n            this.hillSquares = hillSquares;\n        }\n        else {\n            this.hillSquares = KingOfTheHill.defaultCoordinates;\n        }\n    }\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: this.hillSquares,\n            information: {\n                name: \"King of the Hill\",\n                description: \"A king reaching the hill will checkmate all opponents\",\n                tag,\n                color: variantRuleColors.autogenous,\n                displayIcon: chessGlyphIndex.kingOfTheHill\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        const matchArray = match.toLowerCase().match(/^KotH(?:=(.+))?$/i);\n        if (matchArray) {\n            if (matchArray[1]) {\n                const coordinatesArray = [];\n                const presumedOption = matchArray[1].split(\",\");\n                for (const coordinate of presumedOption) {\n                    const parsedCoordinate = parseSingleCoordinate(coordinate);\n                    if (parsedCoordinate) {\n                        coordinatesArray.push(parsedCoordinate);\n                    }\n                }\n                if (coordinatesArray.length > 0) {\n                    this.hillSquares = coordinatesArray;\n                }\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    serializeToParsingForm() {\n        if (compareArrays(this.hillSquares, KingOfTheHill.defaultCoordinates)) {\n            return \"KotH\";\n        }\n        else {\n            return `KotH=${this.hillSquares.map((c) => convertCoordinateToPGN4(c)).join(\",\")}`;\n        }\n    }\n    isDisabled() {\n        return false;\n    }\n    getInsufficientMaterialData() {\n        return {\n            isPartiallyDisabled: true,\n            isDisabled: true\n        };\n    }\n    affectOptions() {\n        const { board, sideToMove, fenOptions } = this.decorator;\n        const returnValues = this.callHandler(\"affectOptions\", arguments);\n        const royal = fenOptions.tag(\"royal\")[sideToMove], dead = fenOptions.tag(\"dead\"), wb = fenOptions.tag(\"wb\");\n        if (board.variantData.giveaway &&\n            this.hillSquares.some((c) => {\n                const pieceString = board.board[c[0]][c[1]];\n                return pieceString.isPiece() && pieceString.piece === KingOfTheHill.defaultRoyal;\n            })) {\n            this.decorator.processInternalMove({ type: InternalMoveSignature.Stalemate });\n            returnValues.stalemates[sideToMove] = true;\n        }\n        else if (royal && this.hillSquares.some((c) => compareCoordinates(c, royal))) {\n            const pointsForMate = this.decorator.obtainPointsForMate();\n            for (const color of colors) {\n                if (color === sideToMove)\n                    continue;\n                if (!dead[color]) {\n                    dead[color] = true;\n                    this.decorator.assignPoints(sideToMove, pointsForMate);\n                }\n            }\n            if (this.decorator.board.variantData.taboo) {\n                this.decorator.gameOver = `${getPlayerNameFromColor(sideToMove, wb).toUpperCase()} WON THE RACE!`;\n            }\n            else {\n                this.decorator.assignGeneralTermination(\"King of the Hill\");\n            }\n        }\n        return returnValues;\n    }\n}\nexport { KingOfTheHill };\n","import { createTuple, verifyTupleType } from \"@client/ts/baseTypes\";\nimport { compareCoordinates } from \"../../../Board/BoardInterface\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { createDefaultFENEffectSettings } from \"../../../FENData/FENDataInterface\";\nimport { colors, totalPlayers } from \"../../../GameInformation/GameData\";\nimport { verifyStandardMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nconst tag = \"nCheck\";\nexport class NCheck extends VariantRule {\n    static {\n        VariantRule.initVariantRule(NCheck);\n    }\n    defaultChecks;\n    constructor(defaultChecks) {\n        super();\n        if (Array.isArray(defaultChecks) &&\n            verifyTupleType(defaultChecks, totalPlayers) &&\n            defaultChecks.every((check) => typeof check === \"number\")) {\n            this.defaultChecks = defaultChecks;\n        }\n        else {\n            this.defaultChecks = createTuple(3, totalPlayers);\n        }\n    }\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        const checks = this.defaultChecks\n            .filter(Boolean)\n            .reduce((p, n, i, arr) => p + (arr[i - 1] === arr[i] ? \"\" : `-${n}`), \"\")\n            .slice(1);\n        return {\n            parameterValue: this.defaultChecks,\n            information: {\n                name: `${checks}-Check`,\n                textualForm: `${checks}+`,\n                description: `Checking a king ${checks} times is checkmate`,\n                tag\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        const matchArray = match.toLowerCase().match(/^(\\d\\d?\\d?(?:-\\d\\d?\\d?){0,3})-check$/i);\n        if (matchArray) {\n            const checks = matchArray[1].split(\"-\");\n            for (let i = 0; i <= checks.length; i++) {\n                if (checks[i]) {\n                    this.defaultChecks[i] = Number(checks[i]);\n                }\n                else {\n                    while (i !== totalPlayers) {\n                        this.defaultChecks[i] = this.defaultChecks[i - 1];\n                        i++;\n                    }\n                }\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    serializeToParsingForm() {\n        return `${this.defaultChecks.join(\"-\")}-check`;\n    }\n    isDisabled({ variantDataRules }) {\n        return variantDataRules.giveaway;\n    }\n    getInsufficientMaterialData() {\n        return {\n            isPartiallyDisabled: true,\n            isDisabled: false\n        };\n    }\n    initDecoratorSettings() {\n        const lives = this.decorator.fenOptions.tag(\"lives\");\n        for (const color of colors) {\n            if (lives[color] === null) {\n                lives[color] = this.defaultChecks[color];\n            }\n        }\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n    affectOptions(move, settings = createDefaultFENEffectSettings()) {\n        const { board, sideToMove } = this.decorator;\n        const currentChecks = board.getCurrentChecks().map((arr) => new Set(arr));\n        const isNCheckValidated = !settings.ignoreCheckmateChecks && !settings.ignoreNextTurn;\n        const royal = this.decorator.fenOptions.tag(\"royal\"), lives = this.decorator.fenOptions.tag(\"lives\");\n        const results = this.callHandler(\"affectOptions\", arguments);\n        const isStandardMove = verifyStandardMove(move);\n        if (isNCheckValidated) {\n            const updatedChecks = board.getCurrentChecks(sideToMove);\n            const playerChecks = createTuple(0, totalPlayers);\n            for (const color of colors) {\n                for (const coordinate of updatedChecks[color]) {\n                    const royalPiece = royal[color];\n                    if (!currentChecks[color].has(coordinate) ||\n                        (royalPiece && isStandardMove && compareCoordinates(move.endCoordinates, royalPiece))) {\n                        playerChecks[color]++;\n                    }\n                }\n            }\n            if (lives.every((live) => live !== null)) {\n                for (const color of colors) {\n                    lives[color] -= playerChecks[color];\n                    if (lives[color] <= 0) {\n                        this.decorator.assignPoints(sideToMove, this.decorator.obtainPointsForMate());\n                        this.decorator.turnPiecesDead(color);\n                        lives[color] = 0;\n                    }\n                }\n            }\n            if (this.decorator.getRealPlayers() > 1) {\n                this.decorator.sideToMove = this.decorator.nextTurn(sideToMove);\n                board.pregenerateAttacks();\n            }\n        }\n        return results;\n    }\n}\n","import { FENData } from \"../../../FENData/FENData\";\nimport { getOppositePlacedColor, totalPlayers, VariantType } from \"../../../GameInformation/GameData\";\nimport { pieceControlConfigSettings } from \"../../../PieceControl/PieceControlInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nconst tag = \"oppositeMultiplier\";\nexport class OppositeMultiplier extends VariantRule {\n    static {\n        VariantRule.initVariantRule(OppositeMultiplier);\n    }\n    oppositeMultiplierValue = 2;\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: this.oppositeMultiplierValue,\n            information: {\n                name: \"Opposite's piece value\",\n                textualForm: `Ox${this.oppositeMultiplierValue}`,\n                description: `Opposite's pieces are worth ${this.oppositeMultiplierValue} times their normal points value until one player is eliminated`,\n                tag\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        const matchArray = match.toLowerCase().match(/^OppX=(2|3|4|5|6)$/i);\n        if (matchArray) {\n            this.oppositeMultiplierValue = Number(matchArray[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    serializeToParsingForm() {\n        return `OppX=${this.oppositeMultiplierValue}`;\n    }\n    isDisabled({ variantDataRules, gameType, fenTags }) {\n        return (gameType === VariantType.Teams ||\n            variantDataRules.giveaway ||\n            fenTags.dead.value.reduce((p, n, i) => p + Number(n || fenTags.resigned.value[i]), 0) <= totalPlayers - 1);\n    }\n    getPointsForPiece(pieceString) {\n        const dead = this.decorator.fenOptions.tag(\"dead\"), resigned = this.decorator.fenOptions.tag(\"resigned\");\n        const aliveColors = dead.map((d, i) => d || resigned[i]).filter(Boolean).length;\n        if (aliveColors === totalPlayers && pieceString.isPiece() && pieceString.color === getOppositePlacedColor(this.decorator.sideToMove)) {\n            return pieceControlConfigSettings[pieceString.piece].points.singlesPoints * this.oppositeMultiplierValue;\n        }\n        else\n            return this.callHandler(\"getPointsForPiece\", arguments);\n    }\n}\n","import { SpecialMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { getOppositePlacedColor } from \"../../../GameInformation/GameData\";\nconst tag = \"oppositeSideCastling\";\nexport class OppositeSideCastling extends VariantRule {\n    static {\n        VariantRule.initVariantRule(OppositeSideCastling);\n    }\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Opposite-side Castling\",\n                description: \"Once your opponent has castled, you can only castle to the opposite side\",\n                tag,\n                color: variantRuleColors.minor,\n                displayIcon: \"ὸ\"\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^OppositeSideCastling$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"OppositeSideCastling\";\n    }\n    isDisabled() {\n        return false;\n    }\n    processStandardMove(moveData) {\n        const result = this.callHandler(\"processStandardMove\", arguments);\n        if (\"specialType\" in moveData) {\n            let castlingDataReference;\n            if (moveData.specialType === SpecialMove.CastlingKingside) {\n                castlingDataReference = this.decorator.fenOptions.tag(\"castleKingside\");\n            }\n            else if (moveData.specialType === SpecialMove.CastlingQueenside) {\n                castlingDataReference = this.decorator.fenOptions.tag(\"castleQueenside\");\n            }\n            if (castlingDataReference) {\n                castlingDataReference[getOppositePlacedColor(this.decorator.sideToMove)] = false;\n            }\n        }\n        return result;\n    }\n}\n","import { FENData } from \"../../../FENData/FENData\";\nimport { createPieceFromData } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { verifyInternalMove, verifyStandardMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"piecesGoToBanks\";\nexport class PiecesGoToBanks extends VariantRule {\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Bank Captures\",\n                description: \"Captured pieces go to banks\",\n                tag,\n                color: variantRuleColors.extending,\n                displayIcon: chessGlyphIndex.copyToClipboard\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Crazy(?:house|wan)$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"\";\n    }\n    isDisabled() {\n        return false;\n    }\n    processStandardMove(moveData) {\n        const promotedFrom = this.decorator.fenOptions.tag(\"promotedFrom\");\n        if (moveData.promotion) {\n            const pieceLetter = this.decorator.board.board[moveData.startCoordinates[0]][moveData.startCoordinates[1]].piece;\n            promotedFrom.set(moveData.endCoordinates, pieceLetter);\n        }\n        else {\n            for (const [key, value] of promotedFrom) {\n                if (key[0] === moveData.startCoordinates[0] && key[1] === moveData.endCoordinates[1]) {\n                    promotedFrom.delete(key);\n                    promotedFrom.set(moveData.endCoordinates, value);\n                    break;\n                }\n            }\n        }\n        return this.callHandler(\"processStandardMove\", arguments);\n    }\n    affectOptions(move) {\n        const fenOptions = this.decorator.fenOptions;\n        const areBanksEnabled = fenOptions.tag(\"areBanksEnabled\"), bank = fenOptions.tag(\"bank\"), promotedFrom = fenOptions.tag(\"promotedFrom\");\n        if (areBanksEnabled[this.decorator.sideToMove]) {\n            if (!verifyInternalMove(move)) {\n                if (verifyStandardMove(move)) {\n                    const captures = this.decorator.getCapturedPieces(move);\n                    const sideToMove = this.decorator.sideToMove;\n                    const addPieceToBank = (piece) => {\n                        for (const [key, value] of bank[sideToMove]) {\n                            if (key.piece === piece && key.color === sideToMove) {\n                                bank[sideToMove].set(key, value + 1);\n                                return;\n                            }\n                        }\n                        bank[sideToMove].set(createPieceFromData(sideToMove, piece), 1);\n                    };\n                    captures.forEach((c) => {\n                        for (const [key, value] of promotedFrom) {\n                            if (key[0] === c[0] && key[1] === c[1]) {\n                                promotedFrom.delete(key);\n                                addPieceToBank(value);\n                                return;\n                            }\n                        }\n                        addPieceToBank(this.decorator.board.board[c[0]][c[1]].piece);\n                    });\n                }\n            }\n        }\n        return this.callHandler(\"affectOptions\", arguments);\n    }\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { totalPlayers, VariantType } from \"../../../GameInformation/GameData\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nconst tag = \"playForMate\";\nclass PlayForMate extends VariantRule {\n    static {\n        VariantRule.initVariantRule(PlayForMate);\n    }\n    initiallyAliveColors = totalPlayers;\n    static checkmatePoints = {\n        [1]: 24,\n        [2]: 32,\n        [3]: 48\n    };\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Play for mate\",\n                description: \"No points for pieces, only checkmates matter\",\n                tag,\n                color: variantRuleColors.pointsAlternation,\n                displayIcon: chessGlyphIndex.hashtag\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Play4Mate$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"Play4Mate\";\n    }\n    isDisabled({ gameType }) {\n        return gameType === VariantType.Teams;\n    }\n    initDecoratorSettings() {\n        this.initiallyAliveColors = this.decorator.fenOptions\n            .tag(\"dead\")\n            .map((d, i) => d || this.decorator.fenOptions.tag(\"resigned\")[i])\n            .filter(Boolean).length;\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n    obtainPointsForMate() {\n        const aliveColors = this.decorator.fenOptions.tag(\"dead\").filter(Boolean).length;\n        switch (aliveColors) {\n            case 1:\n                if (this.initiallyAliveColors === totalPlayers) {\n                    return PlayForMate.checkmatePoints[1];\n                }\n            // * Fallthrough\n            case 2:\n                if (this.initiallyAliveColors >= totalPlayers - 1) {\n                    return PlayForMate.checkmatePoints[2];\n                }\n            // * Fallthrough\n            case 3:\n                return PlayForMate.checkmatePoints[3];\n            default:\n                console.error(`Unexpected players length ${aliveColors}`);\n                return 0;\n        }\n    }\n    getPointsForPiece() {\n        return 0;\n    }\n}\nexport { PlayForMate };\n","import { VariantType } from \"@moveGeneration/GameInformation/GameData\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { VariantRule } from \"../../VariantRule\";\nconst tag = \"pointsForMate\";\nexport class PointsForMate extends VariantRule {\n    static {\n        VariantRule.initVariantRule(PointsForMate);\n    }\n    pointsForMate;\n    constructor(pointsForMate) {\n        super();\n        if (typeof pointsForMate === \"number\") {\n            this.pointsForMate = pointsForMate;\n        }\n        else {\n            this.pointsForMate = 20;\n        }\n    }\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: this.pointsForMate,\n            information: {\n                name: `${this.pointsForMate}-point checkmate`,\n                textualForm: `+${this.pointsForMate}`,\n                description: `Checkmates & king captures are worth ${this.pointsForMate} points`,\n                tag\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        const matchArray = match.match(/^PointsForMate=(3|5|10|40)$/i);\n        if (matchArray) {\n            this.pointsForMate = Number(matchArray[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    serializeToParsingForm() {\n        return `PointsForMate=${this.pointsForMate}`;\n    }\n    isDisabled({ variantDataRules, gameType }) {\n        return variantDataRules.giveaway || variantDataRules.playForMate || gameType === VariantType.Teams;\n    }\n    obtainPointsForMate() {\n        return this.pointsForMate;\n    }\n}\n","import { throwOnNever } from \"@client/ts/baseTypes\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { InternalMoveSignature } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"stalemateOptions\";\nexport const stalemateOptionsValues = {\n    stalemateLoses: \"loss\",\n    stalemateWins: \"win\",\n    stalemateDraws: \"draw\"\n};\nexport const verifyCustomStalemateValue = (v) => Object.values(stalemateOptionsValues).includes(v);\nexport class StalemateOptions extends VariantRule {\n    static {\n        VariantRule.initVariantRule(StalemateOptions);\n    }\n    type;\n    isFFA = false;\n    constructor(type) {\n        super();\n        if (typeof type === \"string\" && verifyCustomStalemateValue(type)) {\n            this.type = type;\n        }\n        else {\n            this.type = false;\n        }\n    }\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        const description = this.type === \"draw\"\n            ? `Stalemate is a draw`\n            : this.isFFA\n                ? `The remaining players share the points`\n                : `The stalemated player ${this.type === \"loss\" ? \"loses\" : \"wins\"}`;\n        return {\n            parameterValue: this.type,\n            information: {\n                name: description,\n                description,\n                tag,\n                color: variantRuleColors.minor,\n                displayIcon: chessGlyphIndex.dollarSign\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        const matchArray = match.toLowerCase().match(/^Stalemate=(.+)$/i);\n        if (matchArray) {\n            const presumedOption = matchArray[1];\n            if (verifyCustomStalemateValue(presumedOption)) {\n                this.type = presumedOption;\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    serializeToParsingForm() {\n        return `Stalemate=${this.type || \"draw\"}`;\n    }\n    isDisabled() {\n        return false;\n    }\n    initDecoratorSettings() {\n        if (this.type === false) {\n            if (this.decorator.board.gameType.isFFA() && this.decorator.fenOptions.tag(\"dead\").filter(Boolean).length > 2) {\n                this.type = \"win\";\n                this.isFFA = true;\n            }\n            else {\n                this.type = \"draw\";\n                this.isFFA = false;\n            }\n        }\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n    processInternalMove(internalMove) {\n        const currentTurn = this.decorator.sideToMove;\n        const returnValues = this.callHandler(\"processInternalMove\", arguments);\n        if (internalMove.type === InternalMoveSignature.Stalemate) {\n            const pointsForMate = this.decorator.obtainPointsForMate();\n            switch (this.type) {\n                case \"loss\":\n                    if (!this.isFFA) {\n                        this.decorator.points[currentTurn] += pointsForMate;\n                        break;\n                    }\n                // * Fallthrough\n                case \"draw\":\n                    this.injectIntoBaseClass(function () {\n                        this.spreadPointsBetweenPlayersEvenly();\n                    })();\n                    break;\n                case \"win\":\n                    this.decorator.points[this.decorator.sideToMove] += pointsForMate;\n                    break;\n                case false:\n                    break;\n                default:\n                    throwOnNever(this.type);\n            }\n            if (this.decorator.getRealPlayers() === 1) {\n                this.decorator.assignGeneralTermination(\"Stalemate\", currentTurn);\n            }\n        }\n        return returnValues;\n    }\n}\n","import { compareCoordinates } from \"../../../Board/BoardInterface\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { colors, VariantType } from \"../../../GameInformation/GameData\";\nimport { createPieceFromData } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { pieceControlConfigSettings } from \"../../../PieceControl/PieceControlInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { DeadKingWalking } from \"./DeadKingWalking\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"takeover\";\nexport class Takeover extends VariantRule {\n    static {\n        VariantRule.initVariantRule(Takeover);\n    }\n    dependencies = new Map([[DeadKingWalking, []]]);\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Takeover\",\n                description: \"Checkmate players to take control of their pieces\",\n                tag,\n                color: variantRuleColors.phased,\n                displayIcon: chessGlyphIndex.exchange\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Takeover$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"Takeover\";\n    }\n    isDisabled({ gameType }) {\n        return gameType === VariantType.Teams;\n    }\n    affectOptions() {\n        const sideToMove = this.decorator.sideToMove, detectedPieces = this.decorator.board.getPlayerPieces();\n        const results = this.callHandler(\"affectOptions\", arguments);\n        for (const color of colors) {\n            if (!results.checkmates[color])\n                continue;\n            for (const piece of detectedPieces[sideToMove]) {\n                const pieceString = this.decorator.board.board[piece[0]][piece[1]];\n                if (!pieceString.isDead() || pieceControlConfigSettings[pieceString.piece].moveGenerationSettings.isPawn)\n                    continue;\n                this.decorator.board.board[piece[0]][piece[1]] = createPieceFromData(sideToMove, pieceString.piece);\n            }\n        }\n        return results;\n    }\n    countTotalPointsOnBoard() {\n        const zombieImmune = this.decorator.fenOptions.tag(\"zombieImmune\"), royals = this.decorator.fenOptions.tag(\"royal\");\n        const resultingPoints = [0, 0, 0, 0];\n        this.decorator.board.getPlayerPieces().forEach((army, color) => {\n            if (zombieImmune[color])\n                return;\n            const royal = royals[color];\n            for (const coordinate of army) {\n                if (royal && compareCoordinates(coordinate, royal)) {\n                    resultingPoints[color] += this.decorator.obtainPointsForMate();\n                }\n                else {\n                    const piece = this.decorator.board.board[coordinate[0]][coordinate[1]].piece;\n                    resultingPoints[color] += pieceControlConfigSettings[piece].points.singlesPoints;\n                }\n            }\n        });\n        return resultingPoints;\n    }\n}\n","import { FENData } from \"../../../FENData/FENData\";\nimport { VariantRule } from \"../../VariantRule\";\nconst tag = \"threefoldRepetition\";\nexport class ThreefoldRepetition extends VariantRule {\n    static {\n        VariantRule.initVariantRule(ThreefoldRepetition);\n    }\n    totalRepetitionsRequired;\n    constructor(totalRepetitions) {\n        super();\n        if (typeof totalRepetitions === \"number\" && totalRepetitions > 0) {\n            this.totalRepetitionsRequired = totalRepetitions;\n        }\n        else {\n            this.totalRepetitionsRequired = 3;\n        }\n    }\n    getDecoratorType() {\n        return FENData;\n    }\n    getPublicProperties() {\n        const isDisabled = this.totalRepetitionsRequired === Infinity;\n        return {\n            parameterValue: this.totalRepetitionsRequired,\n            information: {\n                name: isDisabled ? \"3-fold repetition disabled\" : `${this.totalRepetitionsRequired}-fold repetition`,\n                textualForm: \"\",\n                description: isDisabled\n                    ? \"3-fold repetition disabled\"\n                    : `After position repeats ${this.totalRepetitionsRequired} times game is over`,\n                tag\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        const matchArray = match.match(/^ThreefoldRepetition=((?:\\d+)|(?:Infinity))$/i);\n        if (matchArray) {\n            this.totalRepetitionsRequired = Number(matchArray[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    serializeToParsingForm() {\n        return `ThreefoldRepetition=${this.totalRepetitionsRequired}`;\n    }\n    isDisabled() {\n        return false;\n    }\n    affectOptions() {\n        const results = this.callHandler(\"affectOptions\", arguments);\n        const repetitions = this.decorator.board.moves.getHash(this.decorator.board.moves.constructPreliminaryHashString(this.decorator.board));\n        if (repetitions + 1 >= this.totalRepetitionsRequired) {\n            this.decorator.assignGeneralTermination(\"Threefold Repetition\");\n            this.injectIntoBaseClass(function () {\n                this.spreadPointsBetweenPlayersEvenly();\n            })();\n        }\n        return results;\n    }\n}\n","import { createTuple } from \"../../../../../baseTypes\";\nimport { totalPlayers } from \"../../../GameInformation/GameData\";\nimport { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"anyCapture\";\nexport class AnyCapture extends VariantRule {\n    static {\n        VariantRule.initVariantRule(AnyCapture);\n    }\n    getDecoratorType() {\n        return PieceControl;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Any Capture\",\n                description: \"You can capture your own pieces\",\n                tag,\n                color: variantRuleColors.autogenous,\n                displayIcon: chessGlyphIndex.captureAnything\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^AnyCapture$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"AnyCapture\";\n    }\n    isDisabled() {\n        return false;\n    }\n    configure(configuration) {\n        const modifiedConfiguration = {\n            ...configuration,\n            immunePieces: createTuple(false, totalPlayers)\n        };\n        for (const decorator of this.wrappingDecorators) {\n            if (decorator.configure)\n                return decorator.configure(modifiedConfiguration);\n        }\n        return PieceControl.prototype.configure.call(this.decorator, modifiedConfiguration);\n    }\n}\n","import { verifyPieceLetter, pieceControlConfigSettings, defaultPieces } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { compileEnumeration, prefixWithIndefiniteArticle } from \"@client/ts/utils/StringFormatUtils\";\nimport { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport { VariantRule } from \"../../VariantRule\";\nconst tag = \"promotionPieces\";\nexport class PromoteTo extends VariantRule {\n    static {\n        VariantRule.initVariantRule(PromoteTo);\n    }\n    promotionPieces;\n    constructor(promotionPieces) {\n        super();\n        this.promotionPieces =\n            Array.isArray(promotionPieces) &&\n                promotionPieces.every((p) => typeof p === \"string\" && verifyPieceLetter(p))\n                ? promotionPieces\n                : [defaultPieces.queen, defaultPieces.rook, defaultPieces.bishop, defaultPieces.knight];\n    }\n    getDecoratorType() {\n        return PieceControl;\n    }\n    getPublicProperties() {\n        const pieceNames = this.promotionPieces.reduce((p, c) => {\n            const pieceName = pieceControlConfigSettings[c].naming.name;\n            return [...p, pieceName];\n        }, []);\n        return {\n            parameterValue: this.promotionPieces,\n            information: {\n                name: \"Promotion Pieces\",\n                textualForm: \"\",\n                description: `Pawns promote to ${prefixWithIndefiniteArticle(compileEnumeration(pieceNames))}`,\n                tag\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        const matchArray = match.match(/^PromoteTo=([A-Zx]+)$/i);\n        if (matchArray) {\n            const inputPromotion = matchArray[1].split(\"\").filter((p) => verifyPieceLetter(p));\n            if (inputPromotion.length)\n                this.promotionPieces = inputPromotion;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    serializeToParsingForm() {\n        return `PromoteTo=${this.promotionPieces.join(\"\")}`;\n    }\n    isDisabled() {\n        return false;\n    }\n    initDecoratorSettings() {\n        if (this.decorator.hooks.usePawnLogic) {\n            this.decorator.hooks.usePawnLogic.promotionPieces = this.promotionPieces;\n        }\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n}\n","import { formatOrdinalNumber } from \"@client/ts/utils/StringFormatUtils\";\nimport { boardDimension } from \"../../../GameInformation/GameData\";\nimport { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport { VariantRule } from \"../../VariantRule\";\nconst tag = \"promotionRank\";\nexport const disabledRank = 99;\nexport class PromotionRank extends VariantRule {\n    static {\n        VariantRule.initVariantRule(PromotionRank);\n    }\n    promotionRank;\n    constructor(promotionRank) {\n        super();\n        this.promotionRank = typeof promotionRank === \"number\" ? promotionRank : 8;\n    }\n    getDecoratorType() {\n        return PieceControl;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: this.promotionRank,\n            information: {\n                name: \"Promotion Rank\",\n                textualForm: \"\",\n                description: `on the ${this.promotionRank}${formatOrdinalNumber(this.promotionRank)} rank`,\n                tag\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        const matchArray = match.match(/^Prom=(\\d\\d?)$/i);\n        if (matchArray) {\n            this.promotionRank = Number(matchArray[1]);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    serializeToParsingForm() {\n        return `Prom=${this.promotionRank}`;\n    }\n    isDisabled() {\n        return false;\n    }\n    initDecoratorSettings() {\n        if (this.decorator.hooks.usePawnLogic) {\n            this.decorator.hooks.usePawnLogic.promotionRanks = [\n                boardDimension - this.promotionRank,\n                this.promotionRank - 1,\n                this.promotionRank - 1,\n                boardDimension - this.promotionRank\n            ];\n        }\n        for (const decorator of this.wrappingDecorators)\n            decorator.initDecoratorSettings?.();\n    }\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport { AttackType } from \"../../../PieceControl/PieceControlInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nconst tag = \"royalsCannotCapture\";\nexport class RoyalsCannotCapture extends VariantRule {\n    getDecoratorType() {\n        return PieceControl;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Royals Cannot Capture\",\n                description: \"Royal pieces cannot capture pieces.\",\n                tag,\n                color: variantRuleColors.autogenous,\n                displayIcon: chessGlyphIndex.handshake\n            }\n        };\n    }\n    matchesPGNDeclaration() {\n        return false;\n    }\n    serializeToParsingForm() {\n        return \"\";\n    }\n    isDisabled() {\n        return false;\n    }\n    getMovePossibility(configuration) {\n        const royal = this.decorator.fenData.fenOptions.tag(\"royal\")[this.decorator.color];\n        if (royal && royal[0] === this.decorator.i && royal[1] === this.decorator.j) {\n            configuration.special = AttackType.MoveOnly;\n        }\n        for (const decorator of this.wrappingDecorators) {\n            if (decorator.getMovePossibility)\n                return decorator.getMovePossibility(configuration);\n        }\n        return PieceControl.prototype.getMovePossibility.call(this.decorator, configuration);\n    }\n}\n","import { AttackType } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"sideways\";\nexport class Sideways extends VariantRule {\n    static {\n        VariantRule.initVariantRule(Sideways);\n    }\n    getDecoratorType() {\n        return PieceControl;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Sideways\",\n                description: \"Pawns can also move one square sideways\",\n                tag,\n                color: variantRuleColors.autogenous,\n                displayIcon: chessGlyphIndex.pawnSideways\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Sideways$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"Sideways\";\n    }\n    isDisabled() {\n        return false;\n    }\n    getPossibleCells() {\n        if (this.decorator.hooks.usePawnLogic) {\n            this.injectIntoBaseClass(function () {\n                this.generateJumpAttack({ displacement: [0, -1], special: AttackType.MoveOnly });\n                this.generateJumpAttack({ displacement: [0, 1], special: AttackType.MoveOnly });\n            })();\n        }\n        for (const decorator of this.wrappingDecorators) {\n            if (decorator.getPossibleCells)\n                return decorator.getPossibleCells();\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const prototype = Object.getPrototypeOf(this.decorator);\n        prototype.getPossibleCells.call(this.decorator);\n    }\n}\n","import { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport { AttackType } from \"../../../PieceControl/PieceControlInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nconst tag = \"stonewall\";\nexport class Stonewall extends VariantRule {\n    static {\n        VariantRule.initVariantRule(Stonewall);\n    }\n    getDecoratorType() {\n        return PieceControl;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Stonewall\",\n                textualForm: \"\",\n                description: \"Dead pieces cannot be captured\",\n                tag\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Deadwall$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"Deadwall\";\n    }\n    isDisabled() {\n        return false;\n    }\n    getMovePossibility(configuration) {\n        const { displacement: [i, j], special } = configuration;\n        let modifiedConfiguration = configuration;\n        if ((special === AttackType.AttackOnly || special === AttackType.Normal || special === AttackType.RayGen) &&\n            this.decorator.board[i] &&\n            this.decorator.board[i][j] &&\n            this.decorator.board[i][j].isDead()) {\n            modifiedConfiguration = {\n                ...configuration,\n                special: AttackType.MoveOnly\n            };\n        }\n        for (const decorator of this.wrappingDecorators) {\n            if (decorator.getMovePossibility)\n                return decorator.getMovePossibility(configuration);\n        }\n        return PieceControl.prototype.getMovePossibility.call(this.decorator, modifiedConfiguration);\n    }\n}\n","import { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nconst tag = \"torpedo\";\nexport class Torpedo extends VariantRule {\n    static {\n        VariantRule.initVariantRule(Torpedo);\n    }\n    getDecoratorType() {\n        return PieceControl;\n    }\n    getPublicProperties() {\n        return {\n            parameterValue: true,\n            information: {\n                name: \"Torpedo\",\n                description: \"Pawns can always jump two squares\",\n                tag,\n                color: variantRuleColors.autogenous,\n                displayIcon: chessGlyphIndex.torpedo\n            }\n        };\n    }\n    matchesPGNDeclaration(match) {\n        return /^Torpedo$/i.test(match);\n    }\n    serializeToParsingForm() {\n        return \"Torpedo\";\n    }\n    isDisabled() {\n        return false;\n    }\n    configure(configuration) {\n        const modifiedConfiguration = {\n            ...configuration,\n            baseRank: true\n        };\n        for (const decorator of this.wrappingDecorators) {\n            if (decorator.configure)\n                return decorator.configure(modifiedConfiguration);\n        }\n        PieceControl.prototype.configure.call(this.decorator, modifiedConfiguration);\n    }\n}\n","import { createHexColor } from \"@client/ts/interfaces/Colors\";\nexport const variantRuleColors = {\n    minor: createHexColor(\"#e01492\"),\n    visual: createHexColor(\"#ad5709\"),\n    autogenous: createHexColor(\"#f2791e\"),\n    metadata: createHexColor(\"#89a5d3\"),\n    startingPosition: createHexColor(\"#7030a0\"),\n    extending: createHexColor(\"#fbaa07\"),\n    widespread: createHexColor(\"#d40c0c\"),\n    pointsAlternation: createHexColor(\"#00b0f0\"),\n    phased: createHexColor(\"#00b050\")\n};\n","import { Board } from \"../Board/Board\";\nimport { FENData } from \"../FENData/FENData\";\nimport { PieceControl } from \"../PieceControl/PieceControl\";\nimport { ForcedCapture } from \"./VariantRuleDefinitions/BoardDecorators/ForcedCapture\";\nimport { SeirawanSetup } from \"./VariantRuleDefinitions/BoardDecorators/SeirawanSetup\";\nimport { SetupChess } from \"./VariantRuleDefinitions/BoardDecorators/SetupChess\";\nimport { Taboo } from \"./VariantRuleDefinitions/BoardDecorators/Taboo\";\nimport { FiftyMoveRule } from \"./VariantRuleDefinitions/FENDataDecorators/FiftyMoveRule\";\nimport { Giveaway } from \"./VariantRuleDefinitions/FENDataDecorators/Giveaway\";\nimport { StalemateOptions } from \"./VariantRuleDefinitions/FENDataDecorators/StalemateOptions\";\nimport { ThreefoldRepetition } from \"./VariantRuleDefinitions/FENDataDecorators/ThreefoldRepetition\";\nimport { PromoteTo } from \"./VariantRuleDefinitions/PieceControlDecorators/PromoteTo\";\nimport { PromotionRank } from \"./VariantRuleDefinitions/PieceControlDecorators/PromotionRank\";\nimport { VariantRule } from \"./VariantRule\";\nexport const createBaseParsingTypes = () => ({\n    boardDecorators: [],\n    pieceControlDecorators: [],\n    fenDataDecorators: [],\n    *[Symbol.iterator]() {\n        for (const rv of [...this.boardDecorators, ...this.pieceControlDecorators, ...this.fenDataDecorators]) {\n            const variantRule = rv;\n            yield variantRule;\n        }\n    }\n});\nconst variantRulePriorities = [SetupChess, ForcedCapture, Taboo, SeirawanSetup, PromoteTo, PromotionRank, Giveaway].reverse();\nfunction differentiateDecoratorMethods(variant, methods) {\n    const verifyDecorator = (rv, type) => rv.getDecoratorType() === type;\n    if (verifyDecorator(variant, Board)) {\n        methods.boardDecorators(variant);\n    }\n    else if (verifyDecorator(variant, PieceControl)) {\n        methods.pieceControlDecorators(variant);\n    }\n    else if (verifyDecorator(variant, FENData)) {\n        methods.fenDataDecorators(variant);\n    }\n}\nexport function parseVariantRules(rules) {\n    const variantClasses = new Set();\n    const variantRuleList = new Set();\n    const forcedRules = [PromotionRank, PromoteTo, StalemateOptions, FiftyMoveRule, ThreefoldRepetition];\n    for (const variantRule of VariantRule.variantRuleList) {\n        const rv = new variantRule();\n        variantRuleList.add(rv);\n        variantClasses.add(variantRule);\n    }\n    const finalList = createBaseParsingTypes();\n    const rulesStrings = rules.split(/\\s+/);\n    const insertVariantRule = (variant) => {\n        differentiateDecoratorMethods(variant, {\n            boardDecorators: (variant) => {\n                finalList.boardDecorators.push(variant);\n            },\n            pieceControlDecorators: (variant) => {\n                finalList.pieceControlDecorators.push(variant);\n            },\n            fenDataDecorators: (variant) => {\n                finalList.fenDataDecorators.push(variant);\n            }\n        });\n        for (const [dependency, dependencyArgs] of variant.dependencies) {\n            if (!Object.values(finalList).some((decorators) => decorators.some((rv) => rv instanceof dependency))) {\n                insertVariantRule(new dependency(...dependencyArgs));\n            }\n        }\n    };\n    for (const variant of variantRuleList) {\n        for (const ruleString of rulesStrings) {\n            if (variant.matchesPGNDeclaration(ruleString)) {\n                insertVariantRule(variant);\n                variantRuleList.delete(variant);\n            }\n        }\n    }\n    for (const forcedRule of forcedRules) {\n        const variant = new forcedRule();\n        differentiateDecoratorMethods(variant, {\n            boardDecorators: (variant) => {\n                if (!finalList.boardDecorators.some((rule) => rule instanceof forcedRule)) {\n                    finalList.boardDecorators.push(variant);\n                }\n            },\n            pieceControlDecorators: (variant) => {\n                if (!finalList.pieceControlDecorators.some((rule) => rule instanceof forcedRule)) {\n                    finalList.pieceControlDecorators.push(variant);\n                }\n            },\n            fenDataDecorators: (variant) => {\n                if (!finalList.fenDataDecorators.some((rule) => rule instanceof forcedRule)) {\n                    finalList.fenDataDecorators.push(variant);\n                }\n            }\n        });\n    }\n    for (const rule of variantRulePriorities) {\n        const resultingRule = new rule();\n        differentiateDecoratorMethods(resultingRule, {\n            boardDecorators: () => {\n                const index = finalList.boardDecorators.findIndex((c) => c instanceof rule);\n                if (index !== -1) {\n                    finalList.boardDecorators.unshift(finalList.boardDecorators.splice(index, 1)[0]);\n                }\n            },\n            pieceControlDecorators: () => {\n                const index = finalList.pieceControlDecorators.findIndex((c) => c instanceof rule);\n                if (index !== -1) {\n                    finalList.pieceControlDecorators.unshift(finalList.pieceControlDecorators.splice(index, 1)[0]);\n                }\n            },\n            fenDataDecorators: () => {\n                const index = finalList.fenDataDecorators.findIndex((c) => c instanceof rule);\n                if (index !== -1) {\n                    finalList.fenDataDecorators.unshift(finalList.fenDataDecorators.splice(index, 1)[0]);\n                }\n            }\n        });\n    }\n    return finalList;\n}\nexport function compileVariantRuleData(rules) {\n    const finalObject = {};\n    const variantRuleList = VariantRule.variantRuleList.map((rv) => new rv());\n    for (const rule of variantRuleList) {\n        finalObject[rule.getPublicProperties().information.tag] = false;\n    }\n    const setFinalObjectProperty = (properties) => {\n        finalObject[properties.information.tag] = properties.parameterValue;\n    };\n    for (const rule of rules)\n        setFinalObjectProperty(rule.getPublicProperties());\n    return finalObject;\n}\nexport function copyVariantRules(rvs) {\n    return rvs.map((rv) => {\n        const parameterValue = rv.getPublicProperties().parameterValue;\n        const parameterArray = parameterValue !== false ? [parameterValue] : [];\n        return new rv.constructor(parameterArray);\n    });\n}\nexport function validateVariantRules(board) {\n    const configuration = {\n        variantDataRules: board.variantData,\n        gameType: board.gameType.type,\n        fenTags: board.data.fenOptions.tags\n    };\n    return {\n        ...board.variantRules,\n        boardDecorators: board.variantRules.boardDecorators.filter((rv) => !rv.isDisabled(configuration)),\n        pieceControlDecorators: board.variantRules.pieceControlDecorators.filter((rv) => !rv.isDisabled(configuration)),\n        fenDataDecorators: board.variantRules.fenDataDecorators.filter((rv) => !rv.isDisabled(configuration))\n    };\n}\n","export function serializePGNMoves(moveTree) {\n    let resultingString = \"\";\n    const traverse = (moves) => {\n        for (const moveWrapper of moves) {\n            if (moveWrapper.metadata.currentFullMove) {\n                resultingString = resultingString.replace(/\\s\\.\\.\\s$/, \"\");\n                resultingString += ` ${moveWrapper.metadata.currentFullMove}. `;\n            }\n            resultingString += moveWrapper.cachedNames.fullMoveNotation;\n            if (moveWrapper.comment)\n                resultingString += ` {${moveWrapper.comment}}`;\n            resultingString += \" .. \";\n            for (const alternativeLine of moveWrapper.alternativeLines) {\n                resultingString += \"(.. \";\n                traverse(alternativeLine);\n                resultingString += \" )\";\n            }\n        }\n        resultingString = resultingString.replace(/\\s\\.\\.\\s$/, \"\");\n    };\n    traverse(moveTree.moves);\n    return resultingString;\n}\n","import { createTupleFromCallback } from \"@client/ts/baseTypes\";\nimport { colors, getPlayerNameFromColor, playerNames, totalPlayers, validateTerminationString, VariantType } from \"@moveGeneration/GameInformation/GameData\";\nimport { truncateNumber } from \"@utils/NumberUtils\";\nimport { tagNamesEqual, unwrapTag, wrapTag } from \"../Utils\";\nconst variantTypeTag = \"Variant\";\nexport const createVariantTypeTag = () => ({\n    tag: \"variantType\",\n    currentValue: VariantType.FFA,\n    verifyTagInParsing(inputTag) {\n        return tagNamesEqual(inputTag, variantTypeTag);\n    },\n    parseTag(inputTag) {\n        const tagContents = unwrapTag(inputTag, variantTypeTag);\n        for (const type of Object.values(VariantType)) {\n            if (tagContents === type)\n                return type;\n        }\n        return VariantType.FFA;\n    },\n    serialize(board) {\n        return wrapTag(variantTypeTag, board.gameType.type);\n    }\n});\nconst variantDateTag = \"Date\";\nexport const createDateTag = () => ({\n    tag: \"date\",\n    currentValue: new Date(),\n    verifyTagInParsing(inputTag) {\n        return tagNamesEqual(inputTag, variantDateTag);\n    },\n    parseTag(tagContents) {\n        return new Date(unwrapTag(tagContents, variantDateTag));\n    },\n    serialize(board) {\n        if (!board.gameData.date)\n            return;\n        if (typeof board.gameData.date === \"object\") {\n            return wrapTag(variantDateTag, board.gameData.date.toUTCString());\n        }\n        else {\n            return wrapTag(variantDateTag, board.gameData.date);\n        }\n    }\n});\nconst variantSiteTag = \"Site\";\nexport const createSiteTag = () => ({\n    tag: \"site\",\n    currentValue: \"\",\n    verifyTagInParsing(inputTag) {\n        return tagNamesEqual(inputTag, variantSiteTag);\n    },\n    parseTag(tagContents) {\n        return unwrapTag(tagContents, variantSiteTag);\n    },\n    serialize(board) {\n        if (!board.gameData.site)\n            return;\n        return wrapTag(variantSiteTag, board.gameData.site);\n    }\n});\nconst variantTimeControlTag = \"TimeControl\", getDefaultTimeControl = () => ({ baseTime: 180, increment: 2, isDelay: false });\nexport const createTimeControlTag = () => ({\n    tag: \"timeControl\",\n    currentValue: getDefaultTimeControl(),\n    verifyTagInParsing(inputTag) {\n        return tagNamesEqual(inputTag, variantTimeControlTag);\n    },\n    parseTag(inputTag) {\n        const defaultTC = getDefaultTimeControl();\n        const matchArray = unwrapTag(inputTag, variantTimeControlTag)\n            .match(/^((?:0\\.\\d\\d?)?|(?:\\d\\d?s?))(?:(?:(?:\\+|\\|)(\\d\\d?)(D?))|(\\smin))$/)\n            ?.slice(1);\n        if (matchArray) {\n            const [minutesMatch, secondsMatch, delay] = matchArray;\n            if (!secondsMatch)\n                return defaultTC;\n            defaultTC.isDelay = delay ? true : false;\n            if (/\\smin/.test(secondsMatch)) {\n                defaultTC.increment = 0;\n            }\n            else {\n                defaultTC.increment = Number(secondsMatch);\n            }\n            if (minutesMatch.endsWith(\"s\")) {\n                defaultTC.baseTime = Math.round(Number(minutesMatch.slice(0, -1)));\n            }\n            else {\n                defaultTC.baseTime = Number(minutesMatch) * 60;\n            }\n        }\n        return defaultTC;\n    },\n    serialize(board) {\n        const timeControl = board.gameData.timeControl;\n        const noIncrement = timeControl.increment === 0;\n        let timeControlString = \"\";\n        if (timeControl.baseTime < 60) {\n            timeControlString += noIncrement ? `${timeControl.baseTime * 60} sec` : `${timeControl.baseTime * 60}s`;\n        }\n        else if (timeControl.baseTime > 60 && noIncrement) {\n            timeControlString += `${truncateNumber(timeControl.baseTime / 60, 1)} min`;\n        }\n        else {\n            timeControlString += truncateNumber(timeControl.baseTime / 60, 1);\n        }\n        if (!noIncrement) {\n            timeControlString += \"|\";\n            timeControlString += timeControl.increment;\n        }\n        if (timeControl.isDelay) {\n            timeControlString += \"D\";\n        }\n        return wrapTag(variantTimeControlTag, timeControlString);\n    }\n});\nconst variantTerminationTag = \"Termination\";\nexport const createTerminationTag = () => ({\n    tag: \"termination\",\n    currentValue: undefined,\n    verifyTagInParsing(inputTag) {\n        return tagNamesEqual(inputTag, variantTerminationTag);\n    },\n    parseTag(inputTag) {\n        const tagContents = unwrapTag(inputTag, variantTerminationTag);\n        return validateTerminationString(tagContents) ? tagContents : undefined;\n    },\n    serialize(board) {\n        if (!board.gameData.termination)\n            return;\n        return wrapTag(variantTerminationTag, board.gameData.termination);\n    }\n});\nconst variantGameId = \"GameNr\";\nexport const createGameNumberTag = () => ({\n    tag: \"gameNumber\",\n    currentValue: undefined,\n    verifyTagInParsing(inputTag) {\n        return tagNamesEqual(inputTag, variantGameId);\n    },\n    parseTag(inputTag) {\n        const id = Number(unwrapTag(inputTag, variantGameId));\n        return isNaN(id) ? undefined : id;\n    },\n    serialize(board) {\n        if (!board.gameData.gameNumber)\n            return;\n        return wrapTag(variantGameId, board.gameData.gameNumber.toString());\n    }\n});\nexport const createPlayerDataTag = () => ({\n    tag: \"playerData\",\n    currentValue: createTupleFromCallback(() => ({}), totalPlayers),\n    verifyTagInParsing(inputTag) {\n        for (const color of colors) {\n            const playerName = getPlayerNameFromColor(color);\n            if (tagNamesEqual(inputTag, playerName) || tagNamesEqual(inputTag, `${playerName}Elo`))\n                return true;\n        }\n        return false;\n    },\n    parseTag(inputTag) {\n        for (const color of colors) {\n            const playerName = getPlayerNameFromColor(color);\n            const newCurrentValue = [...this.currentValue];\n            if (tagNamesEqual(inputTag, playerName)) {\n                const name = unwrapTag(inputTag, playerName);\n                if (name)\n                    newCurrentValue[color] = { ...newCurrentValue[color], name };\n                return newCurrentValue;\n            }\n            else if (tagNamesEqual(inputTag, `${playerName}Elo`)) {\n                const elo = Number(unwrapTag(inputTag, playerName));\n                if (!isNaN(elo))\n                    newCurrentValue[color] = { ...newCurrentValue[color], elo };\n                return newCurrentValue;\n            }\n        }\n        throw new Error(\"Tag does not match any player data signature\");\n    },\n    serialize(board) {\n        const uniqueResultingTags = [];\n        for (const color of colors) {\n            const playerData = board.gameData.players[color];\n            if (playerData.elo) {\n                uniqueResultingTags.push(wrapTag(`${playerNames[color]}Elo`, String(playerData.elo)));\n            }\n            if (playerData.name) {\n                uniqueResultingTags.push(wrapTag(`${playerNames[color]}`, String(playerData.name)));\n            }\n        }\n        return uniqueResultingTags.join(\"\\n\");\n    }\n});\nconst resultsTag = \"Results\";\nexport const createResultsTag = () => ({\n    tag: \"results\",\n    currentValue: \"\",\n    verifyTagInParsing(inputTag) {\n        return tagNamesEqual(inputTag, resultsTag);\n    },\n    parseTag(tagContents) {\n        return unwrapTag(tagContents, resultsTag);\n    },\n    serialize(board) {\n        if (!board.gameData.result)\n            return;\n        return wrapTag(resultsTag, board.gameData.result);\n    }\n});\n","import { createBaseParsingTypes, parseVariantRules } from \"@moveGeneration/VariantRules/VariantRuleSetup\";\nimport { tagNamesEqual, unwrapTag, wrapTag } from \"../Utils\";\nconst variantRulesTag = \"RuleVariants\";\nexport const createVariantRulesTag = () => ({\n    tag: \"variantRules\",\n    currentValue: createBaseParsingTypes(),\n    verifyTagInParsing(inputTag) {\n        return tagNamesEqual(inputTag, variantRulesTag);\n    },\n    parseTag(tagContents) {\n        return parseVariantRules(unwrapTag(tagContents, variantRulesTag));\n    },\n    serialize(board) {\n        const resultingRuleList = [];\n        for (const rule of board.variantRules) {\n            const serializedForm = rule.serializeToParsingForm();\n            if (serializedForm) {\n                resultingRuleList.push(serializedForm);\n            }\n        }\n        return wrapTag(variantRulesTag, resultingRuleList.join(\" \"));\n    }\n});\n","import { createFENDataTag } from \"./TagLogic/FENDataTag\";\nimport { createSiteTag, createDateTag, createVariantTypeTag, createTimeControlTag, createTerminationTag, createGameNumberTag, createPlayerDataTag, createResultsTag } from \"./TagLogic/GameMetadataTags\";\nimport { createVariantRulesTag } from \"./TagLogic/VariantRulesTag\";\nexport const createDefaultVariantTags = () => ({\n    variantType: createVariantTypeTag(),\n    startingPosition: createFENDataTag(),\n    variantRules: createVariantRulesTag(),\n    date: createDateTag(),\n    site: createSiteTag(),\n    timeControl: createTimeControlTag(),\n    termination: createTerminationTag(),\n    gameNumber: createGameNumberTag(),\n    playerData: createPlayerDataTag(),\n    results: createResultsTag()\n});\n","import { nonPlayablePieces } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { compileVariantRuleData } from \"@moveGeneration/VariantRules/VariantRuleSetup\";\nimport { parsePGN4Moves } from \"./Moves/ParsePGNMoves\";\nimport { serializePGNMoves } from \"./Moves/SerializePGNMoves\";\nimport { createDefaultVariantTags } from \"./TagInterface\";\nexport function parsePGN4(pgn4) {\n    let pgn4Tags, pgn4Moves = \"\";\n    const match = pgn4.match(/(?=1\\.\\s*?[xA-ZΑ-ωa-n0-9-])/);\n    if (match?.index) {\n        pgn4Moves = pgn4.substring(match.index);\n        pgn4Tags = pgn4\n            .substring(0, match.index)\n            .split(\"]\")\n            .map((t) => t.trim());\n    }\n    else {\n        pgn4Tags = pgn4.split(\"]\").map((t) => t.trim());\n    }\n    const moves = pgn4Moves.length ? parsePGN4Moves(pgn4Moves) : [];\n    const variantTags = createDefaultVariantTags();\n    for (const input of pgn4Tags) {\n        let variantTag;\n        for (variantTag in variantTags) {\n            const tag = variantTags[variantTag];\n            if (Object.prototype.hasOwnProperty.call(variantTags, variantTag) && tag.verifyTagInParsing(input)) {\n                tag.currentValue = tag.parseTag(input);\n                break;\n            }\n        }\n    }\n    const gameData = {\n        site: variantTags.site.currentValue,\n        gameNumber: variantTags.gameNumber.currentValue,\n        date: variantTags.date.currentValue,\n        timeControl: variantTags.timeControl.currentValue,\n        players: variantTags.playerData.currentValue,\n        termination: variantTags.termination.currentValue,\n        result: undefined\n    };\n    const variantRuleData = compileVariantRuleData(variantTags.variantRules.currentValue);\n    const promotionPieces = Array.isArray(variantRuleData.promotionPieces) ? variantRuleData.promotionPieces : [];\n    const nonPlayablePieceValues = Object.values(nonPlayablePieces);\n    return {\n        gameData,\n        gameType: variantTags.variantType.currentValue,\n        variantRules: variantTags.variantRules.currentValue,\n        variantRuleData,\n        board: variantTags.startingPosition.currentValue.board,\n        fenData: variantTags.startingPosition.currentValue.fenData,\n        pieceSet: new Set([...variantTags.startingPosition.currentValue.pieceSet, ...promotionPieces].filter((e) => !nonPlayablePieceValues.includes(e))),\n        moves\n    };\n}\nconst defaultTags = createDefaultVariantTags();\nexport function serializeBoard(board) {\n    return {\n        board: Object.values(defaultTags)\n            .map((t) => t.serialize(board))\n            .filter((v) => v !== undefined)\n            .join(\"\\n\"),\n        moves: serializePGNMoves(board.moves)\n    };\n}\n","import { assertNonUndefined } from \"@client/ts/baseTypes\";\nimport { verifyColorEnumValue, colorEnum } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { duckPieceString, createPieceFromData, deadColorIndex } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport { InternalMoveSignature, SpecialMove, verifyInternalMove, createDummyMoveMetadata, verifyMoveWrapperProperties, verifyRequiredMove } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport { verifyPieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { parseEnPassantCoordinates, parseSingleCoordinate } from \"../Utils\";\nexport const PGN4_SYNTAX = {\n    SPLIT: \".\",\n    PIECE_REGEX: /[xA-ZΑ-ωa-nrbyg0-9-=+#@]/,\n    PIECE_REGEX_SIMPLIFIED: /[A-ZΑ-ωa-n0-9-]/,\n    MOVE_CAPTURING_REGEX: /^[A-ZΑ-ω]?([a-n]\\d{1,2})(?:-|x[A-ZΑ-ω]?)[A-ZΑ-ω]?([a-n]\\d{1,2})/,\n    DUCK_MOVE_CAPTURING_REGEX: /Θ([a-n]\\d{1,2})?-([a-n]\\d{1,2})/,\n    DROPPING_MOVE_CAPTURING_REGEX: /Θ?@([a-z])([A-ZΑ-ω])-([a-n]\\d{1,2})/,\n    BRACKETS: {\n        COMMENT_START: \"{\",\n        COMMENT_END: \"}\",\n        VARIATION_START: \"(\",\n        VARIATION_END: \")\"\n    },\n    COORDINATE_REGEX: /[a-n](?:(?:1[0-4])|(?:[1-9]))/,\n    COMMENT_SYNTAXES: {\n        CLOCK: /\\[%timestamp (-?\\d+?)]/,\n        ARROWS: /\\[%cal ((?:R|B|Y|G).+?)]/,\n        SQUARES: /\\[%csl ((?:R|B|Y|G).+?)]/,\n        ANNOTATION: /\\[%ann (.+?)]/\n    }\n};\nfunction obtainDuckMove(move) {\n    const match = move.match(PGN4_SYNTAX.DUCK_MOVE_CAPTURING_REGEX);\n    if (match) {\n        if (match[1]) {\n            const startCoordinates = parseSingleCoordinate(match[1]);\n            const endCoordinates = parseSingleCoordinate(match[2]);\n            if (!startCoordinates || !endCoordinates)\n                return;\n            return { startCoordinates, endCoordinates };\n        }\n        else {\n            const endCoordinates = parseSingleCoordinate(match[2]);\n            if (!endCoordinates)\n                return;\n            return { piece: duckPieceString, endCoordinates };\n        }\n    }\n    else\n        return;\n}\nfunction obtainInternalType(type) {\n    let internalMove;\n    for (internalMove in InternalMoveSignature) {\n        if (Object.prototype.hasOwnProperty.call(InternalMoveSignature, internalMove)) {\n            if (InternalMoveSignature[internalMove] === type)\n                return { type: InternalMoveSignature[internalMove] };\n        }\n    }\n}\nfunction obtainDroppingMove(move) {\n    const match = move.match(PGN4_SYNTAX.DROPPING_MOVE_CAPTURING_REGEX);\n    if (match) {\n        const [, color, piece, coordinate] = match;\n        if (!verifyColorEnumValue(color) || !verifyPieceLetter(piece))\n            return;\n        const endCoordinates = parseSingleCoordinate(coordinate);\n        if (!endCoordinates)\n            return;\n        return {\n            piece: createPieceFromData(colorEnum[color], piece),\n            endCoordinates\n        };\n    }\n    else\n        return;\n}\nfunction obtainStandardMove(move) {\n    const moveData = { startCoordinates: [-1, -1], endCoordinates: [-1, -1] };\n    const promotionMatch = move.match(/.*?=([A-Zx])/);\n    if (promotionMatch?.[1]) {\n        moveData.promotion = [createPieceFromData(deadColorIndex, promotionMatch[1].charAt(0))];\n    }\n    const moveCoordinates = move.match(PGN4_SYNTAX.MOVE_CAPTURING_REGEX);\n    if (moveCoordinates) {\n        const startCoordinate = parseSingleCoordinate(moveCoordinates[1]);\n        const endCoordinate = parseSingleCoordinate(moveCoordinates[2]);\n        assertNonUndefined(startCoordinate);\n        assertNonUndefined(endCoordinate);\n        moveData.startCoordinates = startCoordinate;\n        moveData.endCoordinates = endCoordinate;\n        return moveData;\n    }\n    else {\n        if (/O-O-O.*/.test(move)) {\n            return { ...moveData, specialType: SpecialMove.CastlingQueenside };\n        }\n        else if (/O-O.*/.test(move)) {\n            return { ...moveData, specialType: SpecialMove.CastlingKingside };\n        }\n    }\n}\nfunction cloneMoveData(move) {\n    if (!verifyInternalMove(move)) {\n        if (\"startCoordinates\" in move) {\n            const newMove = {\n                startCoordinates: [...move.startCoordinates],\n                endCoordinates: [...move.endCoordinates]\n            };\n            if (\"specialType\" in move) {\n                newMove.specialType = move.specialType;\n            }\n            if (\"promotion\" in move) {\n                newMove.promotion = move.promotion;\n            }\n            return newMove;\n        }\n        else {\n            return {\n                endCoordinates: move.endCoordinates,\n                piece: move.piece\n            };\n        }\n    }\n    else {\n        return { type: move.type };\n    }\n}\nexport const parsePGN4Moves = (moves) => {\n    const parseMoves = (selectedMove, path) => {\n        const moveList = [];\n        const currentPath = path;\n        function getMoveIndexes(mI) {\n            while (selectedMove[mI] && PGN4_SYNTAX.PIECE_REGEX.test(selectedMove[mI]))\n                mI++;\n            return mI;\n        }\n        function parseComment(mI) {\n            while (selectedMove[mI] && selectedMove[mI] !== PGN4_SYNTAX.BRACKETS.COMMENT_END)\n                mI++;\n            return mI;\n        }\n        function getEnumeratorIndex(mI) {\n            while (selectedMove[mI] && /\\d|\\./.test(selectedMove[mI]))\n                mI++;\n            return --mI;\n        }\n        function findBracketIndex(i) {\n            let depth = 0;\n            for (; i < selectedMove.length; i++) {\n                switch (selectedMove[i]) {\n                    case PGN4_SYNTAX.BRACKETS.COMMENT_START:\n                        i = parseComment(i);\n                        break;\n                    case PGN4_SYNTAX.BRACKETS.VARIATION_START:\n                        depth++;\n                        break;\n                    case PGN4_SYNTAX.BRACKETS.VARIATION_END:\n                        if (--depth === 0) {\n                            return i;\n                        }\n                        break;\n                }\n            }\n            throw new TypeError(\"No matching parentheses for input \" + selectedMove);\n        }\n        function processMoveDataInsertion() {\n            if (currentMoveData) {\n                currentPath.push(++increment);\n                currentMove.path = currentPath.slice();\n                currentPath.pop();\n                currentMove.moveData = currentMoveData.map((m) => cloneMoveData(m));\n                currentMove.metadata = createDummyMoveMetadata();\n                const clockSyntax = currentMove.comment?.match(PGN4_SYNTAX.COMMENT_SYNTAXES.CLOCK);\n                if (clockSyntax && !isNaN(Number(clockSyntax[1]))) {\n                    currentMove.comment = currentMove.comment?.replace(PGN4_SYNTAX.COMMENT_SYNTAXES.CLOCK, \"\");\n                    currentMove.metadata.playerClock = Number(clockSyntax[1]);\n                }\n                const arrowSyntax = currentMove.comment?.match(PGN4_SYNTAX.COMMENT_SYNTAXES.ARROWS);\n                if (arrowSyntax) {\n                    const arrows = arrowSyntax[1].split(\",\");\n                    for (const arrow of arrows) {\n                        const [color, coordinate] = [arrow[0], arrow.slice(1)];\n                        const numericColor = color.toLowerCase(), arrowCoordinates = parseEnPassantCoordinates(coordinate);\n                        if (!verifyColorEnumValue(numericColor) || !arrowCoordinates)\n                            continue;\n                        currentMove.metadata.highlightedArrows.push([colorEnum[numericColor], ...arrowCoordinates]);\n                    }\n                    currentMove.comment = currentMove.comment?.replace(PGN4_SYNTAX.COMMENT_SYNTAXES.ARROWS, \"\");\n                }\n                const squareSyntax = currentMove.comment?.match(PGN4_SYNTAX.COMMENT_SYNTAXES.SQUARES);\n                if (squareSyntax) {\n                    const squares = squareSyntax[1].split(\",\");\n                    for (const square of squares) {\n                        const [color, inputCoordinate] = [square[0], square.slice(1)];\n                        const numericColor = color.toLowerCase(), coordinate = parseSingleCoordinate(inputCoordinate);\n                        if (!verifyColorEnumValue(numericColor) || !coordinate)\n                            continue;\n                        currentMove.metadata.highlightedSquares.push([colorEnum[numericColor], coordinate]);\n                    }\n                    currentMove.comment = currentMove.comment?.replace(PGN4_SYNTAX.COMMENT_SYNTAXES.SQUARES, \"\");\n                }\n                const annotationMatch = currentMove.comment?.match(PGN4_SYNTAX.COMMENT_SYNTAXES.ANNOTATION);\n                if (annotationMatch) {\n                    currentMove.metadata.annotation = annotationMatch[1];\n                    currentMove.comment = currentMove.comment?.replace(PGN4_SYNTAX.COMMENT_SYNTAXES.ANNOTATION, \"\");\n                }\n                if (verifyMoveWrapperProperties(currentMove)) {\n                    moveList.push(Object.assign({}, currentMove));\n                }\n                else {\n                    console.error(`Not all properties of move wrapper are filled out: ${JSON.stringify(currentMove)}`);\n                }\n                currentMove = {\n                    alternativeLines: [],\n                    comment: \"\"\n                };\n                currentMoveData = undefined;\n            }\n        }\n        function obtainMoveFromInfo(info) {\n            const currentMove = [];\n            const internalType = obtainInternalType(info[0]);\n            if (info.length === 1 && internalType !== undefined) {\n                return [internalType];\n            }\n            const standardMove = obtainStandardMove(info);\n            if (standardMove)\n                currentMove.push(standardMove);\n            const droppingMove = obtainDroppingMove(info);\n            if (droppingMove)\n                currentMove.push(droppingMove);\n            const duckMove = obtainDuckMove(info);\n            if (duckMove)\n                currentMove.push(duckMove);\n            if (verifyRequiredMove(currentMove)) {\n                return currentMove;\n            }\n            else\n                throw new Error(`Move length is 0 for string ${info}`);\n        }\n        let currentMoveData;\n        let currentMove = {\n            alternativeLines: [],\n            comment: \"\"\n        };\n        let increment = -1, variationIncrement = -1;\n        try {\n            for (let i = 0; i < selectedMove.length; i++) {\n                const isNumNaN = isNaN(Number(selectedMove[i]));\n                if (isNumNaN && !/\\s/.test(selectedMove[i]) && selectedMove[i] !== PGN4_SYNTAX.SPLIT) {\n                    if (PGN4_SYNTAX.PIECE_REGEX_SIMPLIFIED.test(selectedMove[i])) {\n                        const index = getMoveIndexes(i);\n                        currentMoveData = obtainMoveFromInfo(selectedMove.substring(i, index));\n                        i = index;\n                    }\n                    else if (moves[i] === PGN4_SYNTAX.BRACKETS.COMMENT_START) {\n                        const index = parseComment(i);\n                        currentMove.comment = moves.substring(i + 1, index);\n                        i = index;\n                    }\n                    else if (moves[i] === PGN4_SYNTAX.BRACKETS.VARIATION_START) {\n                        const index = findBracketIndex(i);\n                        currentPath.push(increment + 1, ++variationIncrement);\n                        currentMove.alternativeLines?.push([...parseMoves(moves.substring(i + 1, index), currentPath.slice())]);\n                        i = index;\n                    }\n                }\n                else if ((selectedMove[i] === PGN4_SYNTAX.SPLIT && moves[i + 1] && moves[i + 1] === PGN4_SYNTAX.SPLIT) ||\n                    (moves[i].trim() && !isNumNaN && moves[i + 1] && (moves[i + 1] === PGN4_SYNTAX.SPLIT || !isNaN(Number(moves[i + 1]))))) {\n                    if (!isNumNaN)\n                        i = getEnumeratorIndex(i);\n                    if (currentMoveData) {\n                        processMoveDataInsertion();\n                    }\n                }\n            }\n        }\n        finally {\n            processMoveDataInsertion();\n            currentPath.push(increment + 1);\n            currentMove.path = currentPath.slice();\n            if (verifyMoveWrapperProperties(currentMove)) {\n                moveList.push(Object.assign({}, currentMove));\n            }\n        }\n        return moveList;\n    };\n    return parseMoves(moves, []);\n};\n","import { createTuple, verifyTupleType } from \"@client/ts/baseTypes\";\nimport { initializeBoardSquares } from \"@client/ts/logic/BaseInterfaces\";\nimport { FENData } from \"@moveGeneration/FENData/FENData\";\nimport { boardDimension, colors, totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport { verifyColorEnumValue, colorEnum, nonPlayablePieces, stringColorEnum } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { createPieceFromString, emptyPieceString } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport { tagNamesEqual, unwrapTag, wrapTag } from \"../Utils\";\nexport function checkDimensionIntersection(dimension, [i, j]) {\n    const dimensionI = (boardDimension - dimension[0]) / 2, dimensionJ = (boardDimension - dimension[1]) / 2;\n    return i < dimensionI || i >= dimensionI + dimension[0] || j < dimensionJ || j >= dimensionJ + dimension[1];\n}\nfunction serializeFENOptions(fenOptions) {\n    const resultingStrings = [];\n    let key;\n    for (key in fenOptions.tags) {\n        if (!Object.prototype.hasOwnProperty.call(fenOptions.tags, key))\n            continue;\n        const serializedForm = fenOptions.tags[key].serialize();\n        if (serializedForm)\n            resultingStrings.push(serializedForm);\n    }\n    return `{${resultingStrings.join(\",\")}}`;\n}\nfunction modifyFourBooleanParameter(part, fenDataArrayRef) {\n    const booleans = part.split(\",\").map((e) => Boolean(Number(e)));\n    if (verifyTupleType(booleans, totalPlayers)) {\n        fenDataArrayRef.forEach((_, i, arr) => (arr[i] = booleans[i]));\n    }\n    else {\n        console.error(\"Incorrect amount of arguments for the boolean parameter length in FENData: \" + part);\n        console.trace(`Expected ${totalPlayers} arguments, but got ${booleans.length}`);\n    }\n}\nconst predefinedFENpositions = {\n    \"4PC\": \"R-0,0,0,0-1,1,1,1-1,1,1,1-0,0,0,0-0-x,x,x,yR,yN,yB,yK,yQ,yB,yN,yR,x,x,x/x,x,x,yP,yP,yP,yP,yP,yP,yP,yP,x,x,x/x,x,x,8,x,x,x/bR,bP,10,gP,gR/bN,bP,10,gP,gN/bB,bP,10,gP,gB/bQ,bP,10,gP,gK/bK,bP,10,gP,gQ/bB,bP,10,gP,gB/bN,bP,10,gP,gN/bR,bP,10,gP,gR/x,x,x,8,x,x,x/x,x,x,rP,rP,rP,rP,rP,rP,rP,rP,x,x,x/x,x,x,rR,rN,rB,rQ,rK,rB,rN,rR,x,x,x\",\n    \"4PCo\": \"R-0,0,0,0-1,1,1,1-1,1,1,1-0,0,0,0-0-x,x,x,yR,yN,yB,yK,yQ,yB,yN,yR,x,x,x/x,x,x,yP,yP,yP,yP,yP,yP,yP,yP,x,x,x/x,x,x,8,x,x,x/bR,bP,10,gP,gR/bN,bP,10,gP,gN/bB,bP,10,gP,gB/bK,bP,10,gP,gQ/bQ,bP,10,gP,gK/bB,bP,10,gP,gB/bN,bP,10,gP,gN/bR,bP,10,gP,gR/x,x,x,8,x,x,x/x,x,x,rP,rP,rP,rP,rP,rP,rP,rP,x,x,x/x,x,x,rR,rN,rB,rQ,rK,rB,rN,rR,x,x,x\",\n    \"4PCb\": \"R-0,0,0,0-1,1,1,1-1,1,1,1-0,0,0,0-0-x,x,x,yR,yN,yB,yQ,yK,yB,yN,yR,x,x,x/x,x,x,yP,yP,yP,yP,yP,yP,yP,yP,x,x,x/x,x,x,8,x,x,x/bR,bP,10,gP,gR/bN,bP,10,gP,gN/bB,bP,10,gP,gB/bQ,bP,10,gP,gQ/bK,bP,10,gP,gK/bB,bP,10,gP,gB/bN,bP,10,gP,gN/bR,bP,10,gP,gR/x,x,x,8,x,x,x/x,x,x,rP,rP,rP,rP,rP,rP,rP,rP,x,x,x/x,x,x,rR,rN,rB,rQ,rK,rB,rN,rR,x,x,x\",\n    \"4PCn\": \"R-0,0,0,0-1,1,1,1-1,1,1,1-0,0,0,0-0-x,x,x,yR,yN,yB,yQ,yK,yB,yN,yR,x,x,x/x,x,x,yP,yP,yP,yP,yP,yP,yP,yP,x,x,x/x,x,x,8,x,x,x/bR,bP,10,gP,gR/bN,bP,10,gP,gN/bB,bP,10,gP,gB/bQ,bP,10,gP,gK/bK,bP,10,gP,gQ/bB,bP,10,gP,gB/bN,bP,10,gP,gN/bR,bP,10,gP,gR/x,x,x,8,x,x,x/x,x,x,rP,rP,rP,rP,rP,rP,rP,rP,x,x,x/x,x,x,rR,rN,rB,rQ,rK,rB,rN,rR,x,x,x\",\n    \"2PC\": \"R-0,1,0,1-1,1,1,1-1,1,1,1-0,0,0,0-0-{'pawnBaseRank':5,'wb':true,'dim':'8x8'}-x,x,x,x,x,x,x,x,x,x,x,x,x,x/x,x,x,x,x,x,x,x,x,x,x,x,x,x/x,x,x,x,x,x,x,x,x,x,x,x,x,x/x,x,x,yR,yN,yB,yQ,yK,yB,yN,yR,x,x,x/x,x,x,yP,yP,yP,yP,yP,yP,yP,yP,x,x,x/x,x,x,8,x,x,x/x,x,x,8,x,x,x/x,x,x,8,x,x,x/x,x,x,8,x,x,x/x,x,x,rP,rP,rP,rP,rP,rP,rP,rP,x,x,x/x,x,x,rR,rN,rB,rQ,rK,rB,rN,rR,x,x,x/x,x,x,x,x,x,x,x,x,x,x,x,x,x/x,x,x,x,x,x,x,x,x,x,x,x,x,x/x,x,x,x,x,x,x,x,x,x,x,x,x,x\"\n};\nconst verifyPredefinedFENPosition = (fenShorthand) => fenShorthand in predefinedFENpositions;\nconst fenDataTag = \"StartFen4\";\nexport const createFENDataTag = () => ({\n    tag: \"startingPosition\",\n    currentValue: {\n        board: initializeBoardSquares(() => emptyPieceString),\n        fenData: new FENData(),\n        pieceSet: new Set()\n    },\n    verifyTagInParsing(inputTag) {\n        return tagNamesEqual(inputTag, fenDataTag);\n    },\n    parseTag(inputTag) {\n        const tagContents = unwrapTag(inputTag, fenDataTag);\n        const fenDataString = verifyPredefinedFENPosition(tagContents) ? predefinedFENpositions[tagContents] : tagContents;\n        const fenData = new FENData();\n        const board = initializeBoardSquares(() => emptyPieceString);\n        const pieceSet = new Set();\n        const transparentWall = createPieceFromString(\"x\");\n        const parts = fenDataString.split(\"-\");\n        if (parts.length < 7 || parts[parts.length - 1].split(\"/\").length !== boardDimension) {\n            console.warn(\"FEN has less than 7 parts: \" + fenDataString);\n        }\n        else {\n            const sideToMove = parts[0].charAt(0).toLowerCase();\n            if (verifyColorEnumValue(sideToMove)) {\n                fenData.sideToMove = colorEnum[sideToMove];\n            }\n            else {\n                console.warn(\"FEN option 1: side to move is not an alphabetic color: \" + sideToMove);\n            }\n            modifyFourBooleanParameter(parts[1], fenData.fenOptions.tag(\"dead\"));\n            modifyFourBooleanParameter(parts[2], fenData.fenOptions.tag(\"castleKingside\"));\n            modifyFourBooleanParameter(parts[3], fenData.fenOptions.tag(\"castleQueenside\"));\n            const points = parts[4].split(\",\").map((e) => Number(e));\n            if (verifyTupleType(points, totalPlayers)) {\n                fenData.points = points;\n            }\n            else {\n                console.warn(`FEN option 5: points is of incorrect length: ${points.join(\",\")}`);\n            }\n            fenData.plyCount = Number(parts[5]);\n            const royals = createTuple(null, totalPlayers);\n            const verifyKeyInTags = (key) => key in fenData.fenOptions.tags;\n            if (parts[6].startsWith(\"{\")) {\n                const initialParsing = JSON.parse(parts[6].replaceAll(\"(\", \"[\").replaceAll(\")\", \"]\").replaceAll(\"'\", '\"'));\n                if (typeof initialParsing !== \"object\" || initialParsing === null)\n                    throw new Error(\"Unexpected object definition syntax for \" + String(initialParsing));\n                for (const [key, value] of Object.entries(initialParsing)) {\n                    if (!verifyKeyInTags(key))\n                        continue;\n                    const tag = fenData.fenOptions.tags[key];\n                    tag.value = tag.parse(value);\n                }\n            }\n            const position = parts[parts.length - 1].split(\"/\"), dimension = fenData.fenOptions.tag(\"dim\");\n            position.forEach((line, i) => {\n                let j = 0;\n                for (let pieceStr of line.split(\",\")) {\n                    if (pieceStr.endsWith('\"'))\n                        pieceStr = pieceStr.slice(0, -1);\n                    if (isNaN(Number(pieceStr))) {\n                        try {\n                            if (!checkDimensionIntersection(dimension, [i, j])) {\n                                const pieceString = createPieceFromString(pieceStr);\n                                board[i][j] = pieceString;\n                                if (pieceString.isPiece()) {\n                                    if (pieceString.piece === \"K\" && !royals[pieceString.color]) {\n                                        royals[pieceString.color] = [i, j];\n                                    }\n                                    pieceSet.add(pieceString.piece);\n                                }\n                            }\n                        }\n                        finally {\n                            j++;\n                        }\n                    }\n                    else\n                        j += Number(pieceStr);\n                }\n            });\n            for (const color of colors) {\n                for (const [piece] of fenData.fenOptions.tag(\"bank\")[color]) {\n                    if (piece.piece in nonPlayablePieces)\n                        continue;\n                    pieceSet.add(piece.piece);\n                }\n            }\n            fenData.fenOptions.setTag(\"royal\", royals);\n            for (let i = 0; i < boardDimension; i++) {\n                for (let j = 0; j < boardDimension; j++) {\n                    if (checkDimensionIntersection(dimension, [i, j]))\n                        board[i][j] = transparentWall;\n                }\n            }\n        }\n        if (!fenData.fenOptions.tag(\"noCorners\")) {\n            const cornerAreaSize = 3, arrayDimension = boardDimension - 1;\n            baseLoop: for (let i = 0; i < cornerAreaSize; i++) {\n                for (let j = 0; j < cornerAreaSize; j++) {\n                    const squares = [\n                        [i, j],\n                        [arrayDimension - i, j],\n                        [i, arrayDimension - j],\n                        [arrayDimension - i, arrayDimension - j]\n                    ];\n                    for (const square of squares) {\n                        const pieceString = board[square[0]][square[1]];\n                        if (!pieceString.isWall() || pieceString.piece !== transparentWall.piece) {\n                            fenData.fenOptions.setTag(\"noCorners\", true);\n                            break baseLoop;\n                        }\n                    }\n                }\n            }\n        }\n        return { fenData, board, pieceSet };\n    },\n    serialize(baseBoard) {\n        const { board, data } = baseBoard;\n        let resultingString = \"\";\n        resultingString += `${stringColorEnum[data.sideToMove].toUpperCase()}-`;\n        resultingString += `${data.fenOptions\n            .tag(\"dead\")\n            .map((d) => Number(d))\n            .join(\",\")}-`;\n        resultingString += `${data.fenOptions\n            .tag(\"castleKingside\")\n            .map((d) => Number(d))\n            .join(\",\")}-`;\n        resultingString += `${data.fenOptions\n            .tag(\"castleQueenside\")\n            .map((d) => Number(d))\n            .join(\",\")}-`;\n        resultingString += `${data.points.join(\",\")}-`;\n        resultingString += `${data.plyCount}-`;\n        resultingString += `${serializeFENOptions(data.fenOptions)}-`;\n        let currentEmptySquares = 0;\n        for (const row of board) {\n            for (const pieceString of row) {\n                if (pieceString.isEmpty()) {\n                    currentEmptySquares++;\n                    continue;\n                }\n                if (currentEmptySquares !== 0) {\n                    resultingString += `${currentEmptySquares},`;\n                    currentEmptySquares = 0;\n                }\n                resultingString += `${pieceString.value},`;\n            }\n            if (currentEmptySquares !== 0) {\n                resultingString += `${currentEmptySquares}/`;\n                currentEmptySquares = 0;\n            }\n            else {\n                resultingString = resultingString.slice(0, -1);\n                resultingString += \"/\";\n            }\n        }\n        resultingString = resultingString.slice(0, -1);\n        return wrapTag(fenDataTag, resultingString);\n    }\n});\n","export function parseSingleCoordinate(coordinate) {\n    if (coordinate.length === 0)\n        return;\n    const parsedCoordinate = [14 - Number(coordinate.slice(1)), coordinate.charCodeAt(0) - 97];\n    if (Number.isNaN(parsedCoordinate[0]) || Number.isNaN(parsedCoordinate[1]))\n        return;\n    if (parsedCoordinate[0] < 0 || parsedCoordinate[0] > 13 || parsedCoordinate[1] < 0 || parsedCoordinate[1] > 13)\n        return;\n    return parsedCoordinate;\n}\nexport function parseEnPassantCoordinates(coordinates) {\n    if (coordinates.length === 0)\n        return;\n    const coordinatesArray = coordinates.split(\":\");\n    return [\n        [14 - Number(coordinatesArray[0].slice(1)), coordinatesArray[0].charCodeAt(0) - 97],\n        [14 - Number(coordinatesArray[1].slice(1)), coordinatesArray[1].charCodeAt(0) - 97]\n    ];\n}\nexport const wrapTag = (baseTag, content) => `[${baseTag} \"${content}\"]`;\nexport const tagNamesEqual = (baseTag, definedTag) => baseTag.toLowerCase().startsWith(`[${definedTag.toLowerCase()} \"`);\nexport const unwrapTag = (baseTag, definedTag) => baseTag.replace(`[${definedTag} \"`, \"\").slice(0, -1);\n","export function shuffleArray(array) {\n    let i = array.length;\n    let r = 0;\n    while (i !== 0) {\n        r = Math.floor(Math.random() * i--);\n        [array[i], array[r]] = [array[r], array[i]];\n    }\n    return array;\n}\nexport function compareArrays(arr1, arr2) {\n    if (arr1 === arr2)\n        return true;\n    if (arr1.length !== arr2.length)\n        return false;\n    for (let i = 0; i < arr1.length; i++) {\n        const first = arr1[i], second = arr2[i];\n        if (Array.isArray(first) && Array.isArray(second)) {\n            if (!compareArrays(first, second))\n                return false;\n        }\n        else if (first !== second) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function countMinimumOf2DArrayExcludingZero(array) {\n    let minimum = Infinity;\n    for (const row of array) {\n        for (const number of row) {\n            if (number !== 0 && number < minimum) {\n                minimum = number;\n            }\n        }\n    }\n    return minimum;\n}\nexport function findLastIndex(array, callback) {\n    let i = array.length;\n    while (i--) {\n        if (callback(array[i], i, array))\n            return i;\n    }\n    return -1;\n}\n","export function truncateNumber(number, digits) {\n    const multiplier = Math.pow(10, digits);\n    const adjusted = number * multiplier;\n    if (adjusted < 0) {\n        return Math.ceil(adjusted / multiplier);\n    }\n    else {\n        return Math.floor(adjusted / multiplier);\n    }\n}\nexport function bitCount(number) {\n    number = number - ((number >> 1) & 0x55555555);\n    number = (number & 0x33333333) + ((number >> 2) & 0x33333333);\n    return (((number + (number >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;\n}\n","export function copyClass(instance, baseClass, customProperties = false) {\n    const prototype = Object.getPrototypeOf(instance);\n    if (typeof prototype !== \"object\")\n        throw new Error(\"Expected prototype to be an object\");\n    const properties = Object.create(prototype);\n    if (typeof properties !== \"object\" || properties === null)\n        throw new Error(\"Expected prototype to be an object\");\n    const copy = Object.assign(properties, customProperties ? {} : instance);\n    if (!(copy instanceof baseClass))\n        throw new Error(\"Expected prototype to not be overridden\");\n    return copy;\n}\nexport const verifyObjectType = (v) => typeof v === \"object\" && v !== null;\nexport function verifyPropertiesInObject(obj, keys) {\n    for (const key of keys) {\n        if (!Object.prototype.hasOwnProperty.call(obj, key))\n            return false;\n    }\n    return true;\n}\n","export function formatOrdinalNumber(num) {\n    const lastTwoDigits = Number(String(num).slice(-2));\n    if (lastTwoDigits > 3 && lastTwoDigits < 21)\n        return \"th\";\n    switch (lastTwoDigits % 10) {\n        case 1:\n            return \"st\";\n        case 2:\n            return \"nd\";\n        case 3:\n            return \"rd\";\n        default:\n            return \"th\";\n    }\n}\nexport function compileEnumeration(list) {\n    if (list.length === 0)\n        return \"\";\n    if (list.length === 1)\n        return list[0];\n    let result = \"\";\n    for (let i = 0; i < list.length; i++) {\n        if (i === list.length - 2) {\n            result += ` ${list[i]} or `;\n        }\n        else if (i === list.length - 1) {\n            result += list[i];\n        }\n        else {\n            result += list[i] + \", \";\n        }\n    }\n    return result;\n}\nexport function prefixWithIndefiniteArticle(str) {\n    const vowels = /[AEUIO]/i;\n    return vowels.test(str.charAt(0)) ? \"an \" + str : \"a \" + str;\n}\nexport function convertSecondsToFlexibleHoursMinutesSeconds(seconds) {\n    if (seconds >= 3600) {\n        return new Date(seconds * 1000).toISOString().substring(11, 16);\n    }\n    else {\n        return new Date(seconds * 1000).toISOString().substring(14, 19);\n    }\n}\nexport function convertCamelCaseToKebabCase(baseString) {\n    return baseString.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nexport function hashString(string) {\n    let hash = 0;\n    for (let i = 0; i < string.length; i++) {\n        const char = string.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash |= 0;\n    }\n    return hash;\n}\n","var map = {\n\t\"./BoardDecorators/AllowPassing.ts\": 19851,\n\t\"./BoardDecorators/AlternativeTeams.ts\": 85038,\n\t\"./BoardDecorators/BarePieceRule.ts\": 51226,\n\t\"./BoardDecorators/Blindfold.ts\": 37869,\n\t\"./BoardDecorators/CaptureTheKing.ts\": 22667,\n\t\"./BoardDecorators/Chess960.ts\": 95291,\n\t\"./BoardDecorators/Crazyhouse.ts\": 91617,\n\t\"./BoardDecorators/DuckChess.ts\": 34819,\n\t\"./BoardDecorators/FogOfWar.ts\": 5443,\n\t\"./BoardDecorators/ForcedCapture.ts\": 82243,\n\t\"./BoardDecorators/GameMetadataRules.ts\": 53821,\n\t\"./BoardDecorators/Ghostboard.ts\": 74914,\n\t\"./BoardDecorators/ParadigmChess30.ts\": 47992,\n\t\"./BoardDecorators/PiecesFaceCenter.ts\": 50704,\n\t\"./BoardDecorators/SeirawanSetup.ts\": 11792,\n\t\"./BoardDecorators/SelfCheck.ts\": 20246,\n\t\"./BoardDecorators/SetupChess.ts\": 3936,\n\t\"./BoardDecorators/Taboo.ts\": 55630,\n\t\"./BoardVariantModules/EngineMoveGeneration/Algorithms/ComfuterEvaluation.ts\": 61271,\n\t\"./BoardVariantModules/EngineMoveGeneration/Algorithms/ComfuterEvaluationExtensions.ts\": 41138,\n\t\"./BoardVariantModules/EngineMoveGeneration/Algorithms/MixedAlgorithms.ts\": 22655,\n\t\"./BoardVariantModules/EngineMoveGeneration/Algorithms/RandomEvaluation.ts\": 15901,\n\t\"./BoardVariantModules/EngineMoveGeneration/Algorithms/RandomEvaluationExtensions.ts\": 77832,\n\t\"./BoardVariantModules/EngineMoveGeneration/BotInterface.ts\": 95488,\n\t\"./BoardVariantModules/InsufficientMaterial/InsufficientMaterialChecker.ts\": 43341,\n\t\"./BoardVariantModules/InsufficientMaterial/InsufficientMaterialConstructor.ts\": 11390,\n\t\"./BoardVariantModules/InsufficientMaterial/PieceMedianCounter.ts\": 92513,\n\t\"./BoardVariantModules/InsufficientMaterial/StateSerializer.ts\": 22953,\n\t\"./BoardVariantModules/InsufficientMaterial/Utilities.ts\": 42478,\n\t\"./FENDataDecorators/Atomic.ts\": 78965,\n\t\"./FENDataDecorators/DeadKingWalking.ts\": 65564,\n\t\"./FENDataDecorators/EnPassant.ts\": 50175,\n\t\"./FENDataDecorators/FatalCapture.ts\": 89577,\n\t\"./FENDataDecorators/FiftyMoveRule.ts\": 39567,\n\t\"./FENDataDecorators/Giveaway.ts\": 25168,\n\t\"./FENDataDecorators/KingOfTheHill.ts\": 72858,\n\t\"./FENDataDecorators/NCheck.ts\": 5954,\n\t\"./FENDataDecorators/OppositeMultiplier.ts\": 67090,\n\t\"./FENDataDecorators/OppositeSideCastling.ts\": 25427,\n\t\"./FENDataDecorators/PiecesGoToBanks.ts\": 74406,\n\t\"./FENDataDecorators/PlayForMate.ts\": 19798,\n\t\"./FENDataDecorators/PointsForMate.ts\": 82620,\n\t\"./FENDataDecorators/StalemateOptions.ts\": 77396,\n\t\"./FENDataDecorators/Takeover.ts\": 38191,\n\t\"./FENDataDecorators/ThreefoldRepetition.ts\": 21680,\n\t\"./PieceControlDecorators/AnyCapture.ts\": 17224,\n\t\"./PieceControlDecorators/PromoteTo.ts\": 97288,\n\t\"./PieceControlDecorators/PromotionRank.ts\": 55491,\n\t\"./PieceControlDecorators/RoyalsCannotCapture.ts\": 83460,\n\t\"./PieceControlDecorators/Sideways.ts\": 65587,\n\t\"./PieceControlDecorators/Stonewall.ts\": 79019,\n\t\"./PieceControlDecorators/Torpedo.ts\": 80634\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 73949;"],"names":["chessGlyphIndex","doubleBackwardArrow","downloadIcon","endBackwardArrow","forwardDoubleArrow","userSearch","userConnection","notAllowed","clock","extraInformation","authorshipNotice","draw","backwardArrow","userInformation","smallBackwardArrow","leaderBoard","equal","downwardArrow","upperArrow","endForwardArrow","urlAttached","crossMark","rightOutwardsArrow","hashtag","newspaper","twitter","checkMark","camera","alternativeLine","play","pause","reload","world","points","medal","soundOff","circleCrossMark","steadyEvaluation","facebook","circle","soundOn","plus","openEye","copyToClipboard","wavingFlag","editText","fullArrowLeft","fullArrowRight","smallArrowForward","goBackArrow","youtube","calendar","user","chat","lock","box","circularArrows","lightBulb","briefcase","board","knightArrows","newMessage","drawing","twoUsers","twoUsers2","openingBook","disclaimer","ringingBell","list","rookAndPawn","hamburgerList","mail","userExtraInformation","house","sheetAndPencil","openMail","chatBox","fullArrowDown","smallArrowUp","fullArrowUp","arrowIntoBox","key","file","books","sharing","userNotAllowed","userCrossMark","questionMark","boardWithCircle","googlePlus","reset","reddit","openBook","userPlus","cog","pin","suitcase","mark","cake","openLink","bishopStroke","linkedin","knight","threeCheck","chess960rapid","connection","quotes","exit","crossedBinoculars","leaderBoardReversed","bishopFull","printer","verticalEvaluation","t","pawn","twoPawns","unrated","elite","bug","cpu","forwardArrowCircle","squareCrossMark","android","twoUsersPlus","crossedArrows","king","kingFull","bishop","twoFullRooks","kingStrokes","fullKnight2","chess960","leaderBoardAscent","crazyhouse","checklist","target","pawnAndHalfRook","halfRookAndPawn","knightStrokes","pawnLogo","queenFull","exchange","userNext","userPrevious","compass","pawnStrokes","rookStrokes","screenDisplays","kingOfTheHill","antichess","queen","threePawns","queenStrokes","rookSmallStrokes","rookSmall","bishopPair","rookPair","knightPair","twoUsersSearch","shield","kingSmall","bishopSmall","knightSmall","userNoConnection","userStream","queenAlternative","pawnAlternative","threePawnsAlternative","twoPawnsAlternative","rookAlternative","knightPairFull","bishopPairFull","addBoard","diamond","scales","pawn3d","userShieldPlus","gold","ellipsis","analysis","archive","arrowBottomIntoBox","disclaimerEditor","sendTrophy","addCheckMark","checkMarkSquare","squareStaircase","arrowsUpBottom","star","verticalDash","shieldCheckMark","top3","addImage","chessStream","removeTrophy","importantMail","arrowLeave","donut","computerAnalysis","checkMarkSquareSmall","diagonalExpandArrows","leaderBoardHorizontal","checkMarkAsCircle","arrowFromBox","boxArrowBottom","boxArrowLeft","boxArrowRight","fourArrowsCentral","clashingSwords","ratingOffset","smilingFace","fileCabinet","editClock","userShield","homeFilled","paymentCard","fourArrowsOutwards","puzzle","addPhoto","arrowWallLeft","arrowWallRight","boardConfiguration","fourBlocks","sandglass","crown","cloudUpload","webChatBox","puzzleRush","knightHops","instagram","squarePlus","squareMinus","squareEqual","square","fireFull","pawnRecycle","noEngine","google","fourPlayer","pieceMeal","arrowBoldUp","arrowBoldDown","blunder","mistake","videoChatBox","bonesCrossed","displays","arrowEnter","newspaperHalf","bookmark","puzzleLarge","movePawn","pawn3dLarge","sun","rapid","blitz","bullet","mortarboard","laptop","resetWidth","pawnConnection","copyToClipboardFromText","fire","crownSmall","orderedList","chess960daily","arrowWallBottom","pawn3dBold","plusInCircle","lightCorner","darkCorner","steepCurve","heart","checkMarkThin","connectionDiagonal","diadem","plusMinus","recycling","metrics","top1","engineCheckMark","wikipedia","tournament","houseConfiguration","computerHindsight","computerCheckMark","lightDarkTheme","whistlingBell","crossMarkCompact","eyeCrossed","fide","favorite","tShirtPawn","addSmile","library","discord","analysisCheckMark","versusComputer","dollarSign","bestMove","gift","evaluationLinear","evaluationThrowaway","evaluationEqual","evaluationDead","evaluationSharp","evaluationPerplexing","evaluationSmooth","libraryAdd","selfPartner","fourPlayerConfiguration","listDownFlow","puzzleBattle","hyperbullet","gameLink","gameStudy","evaluationCrazy","engine","crossedSwordsInCircle","hallmark","like","boardTwoPlayers","fourPlayerChess","variants","cloudUploadCompact","clockIncrement","videoCamera","inaccuracy","bot","torpedo","vk","blindfold","customSettings","captureAnything","pawnSideways","noCastling","fogOfWar","automate","atomic","pawnCounterfeit","elephant","fullBlock","fourFullBlocks","nineFullBlocks","nineFullBlocksCrossed","hamburgerMenuCompact","listCompact","geoMark","crossedDonut","handshake","verified","sandglassRunningOut","rapidLowOnTime","tourneyBanner","noCloud","fork","donutTarget","newCalendarDay","cornerInfiltration","hastTagCompact","chatterbox","circleStar","targetPractice","pawnPromotion","flagProgression","pawnDoubleAttack","kingAndRook","specialMedal","pawnBanner","userSquare","verifiedCandidate","saveFile","duck","addBanner","qrCode","noAnalysis","dualPawn","gameEscape","tournamentCup","noExchanges","tikTok","pieChart","search","binoculars","largeBoard","exclamation","tournamentCupIcon","trashBin","arrowForwardBoldCompact","giftDiamond","filter","noChat","newSheet","xml","blockUser","facebookLike","facebookDislike","apple","phone","verifyFunctionType","func","createTuple","val","length","Array","from","fill","createTupleFromCallback","verifyTupleType","arr","assertNonUndefined","data","Error","throwOnNever","arg","console","dir","TypeError","importAll","r","keys","forEach","hexColorRegex","createHexColor","color","test","initializeBoardSquares","baseValue","isVerticalPlacement","getVerticalPlacementModulus","num","result","getHorizontalPlacementModulus","validateBoardMove","move","startingMoves","firstMove","getLegalMoves","startCoordinates","getDroppingMoves","piece","JSON","stringify","getAllowedInternalMoves","specialMoveSettings","hasEnPassant","variantData","duckChess","moveComponent","find","legalMove","specialType","nextChainedMoves","validateMoveTree","moves","clonedBoard","createClone","createSnapshot","pregenerateAttacks","dimension","Math","max","fenOptions","tag","traverse","current","currentFullMove","currentTimeOnClocks","gameData","timeControl","baseTime","previousSideToMove","i","moveWrapper","moveData","path","alternativeLines","newMoveWrapper","slice","comment","validationResult","undefined","firstStandardMoveSet","promotion","map","p","isWall","sideToMove","metadata","movingPiece","isCapture","getCapturedPieces","b","currentSideToMove","results","makeMove","checkmates","checks","line","push","playerClock","currentMove","getMove","stringifyMove","changeGameTermination","snapshot","getBoardSnapshot","boardSnapshot","gameOver","termination","isTwoPlayer","gameType","type","currentSnapshot","loadSnapshot","getCurrentResult","currentResults","dead","resigned","wb","join","__decorate","decorators","desc","d","c","arguments","Object","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","k","v","requiredDispatches","initialDispatches","dispatchSyncRecord","withWorkerResult","_","propertyKey","descriptor","originalMethod","value","args","postMessage","apply","this","workerDataSync","gameObjectPropertySync","RequestManager","initiallyAliveColors","internalMoves","legalMoves","Map","fogOfWarPerspective","stripPieceStrings","object","parse","generateInitiallyAliveColors","reduce","n","generateCurrentMoves","getPlayerPieces","set","construct","pgn4","Board","variantRules","boardDecorators","insufficientMaterialModule","InsufficientMaterialConstructor","state","insufficientMaterialChecker","InsufficientMaterialChecker","StateSerializer","serializeInsufficientMaterialState","generateInsufficientMaterialState","constructWithGeneratedData","insufficientMaterialState","deserializeInsufficientMaterialState","getFENSettings","royalCount","isCustomRoyals","row","isPiece","createSerializedState","getInitiallyAliveColors","getMoveTree","fullMoveCounter","resultingWrapper","cachedNames","highlightedArrows","highlightedSquares","loadSnapshotByPath","preliminarySnapshot","verifyNextChainedMovesAreDeleted","convertStrippedMoveToNormal","newMove","PieceString","passedMove","augmentMoveWithMetadata","makeMoveFunction","serializeBoardToPGN","pieceString","j","get","getInternalMoves","getVariantData","getBoard","toObject","getGameData","newGameData","date","toUTCString","getCurrentMove","getVariantRules","resultingRules","variantRule","getPublicProperties","getVariantType","deleteMove","playPreferredBotMove","getRealPlayers","preGeneratedAttacks","pieceDrops","algorithm","getDefaultZombieAlgorithm","evaluate","pickPreferredMove","changeFogPerspective","newPerspective","nextTurn","getSquareVisibility","squareVisibility","Function","String","prototype","Number","requestManager","self","onmessage","e","requestName","parameters","PieceControlConfigurator","_control","_isConfigured","constructor","control","coordinates","immunePieces","setCoordinates","x","y","setBaseImmunePieces","immune","setColor","setBoard","constructPieceControl","configure","PieceControlBuilder","_generalConfig","setFENData","fenData","setVariantRules","rules","createPieceControlWrap","letter","decoratedControl","PieceControl","baseImmunes","controls","isComplexSetup","__baseClass","initDecoratorSettings","parsingResults","injectBoard","FENData","fenDataDecorators","variantRuleData","initPieceControls","pieceSet","pieces","size","builder","pieceControlDecorators","pieceControlConfigurator","a","assign","runComplexLegalityEvaluationChecks","targetObject","presumedPieceLetters","Set","hasOwnProperty","call","add","isKingInCheck","baseColor","fenRoyal","royal","slidingPieces","hoppingPieces","playerPieces","isEmpty","getCheckmatesAndStalemates","kingChecks","playerArmy","kingCaptures","stalemates","hasComplexRules","moveGenerationSettings","isComplex","hasComplexPieces","getCurrentChecks","playerRoyals","attackingCoordinates","startingCoordinate","attackList","pieceMovements","attack","ignoreNextMoves","returnValues","pregeneratedAttacks","affectOptions","ignoreCheckmateChecks","ignoreNextTurn","setNewMove","fenDataString","constructPreliminaryHashString","exclusiveSideToMoveGeneration","army","armyColor","coordinate","controlBuilder","setting","resultingMoves","getBaseColors","getPseudoLegalMoves","isJumping","attacks","rayGenJumpingAttacks","hoppingPieceLines","l","attackingColors","isSliding","rayGenSlidingAttacks","subAttack","slidingPiecesLines","m","coordinateArray","rayGen","isRoyalOnLine","resultingAttack","slidingPiecesRayTracing","isSetupComplex","isComplexEvaluation","isTheMoveLegal","isSeirawanDrop","royals","pieceI","pieceJ","endCoordinates","attackI","attackJ","moveArray","royalI","royalJ","isRoyalMove","attackers","targetSafety","legalitySettings","canKingCapture","kingCaptureColor","royalDefendedSquare","isFFA","attackingPiece","attackLine","isPieceUnderAttack","isRoyalUnderAttack","isTheTargetSquarePinListed","attackedX","attackedY","Boolean","attackCoordinates","isTheTargetSquareBlocked","getCastlingMoves","specialMoves","isKingsideCastlingAvailable","getKingsideCastlingEndCoordinate","isQueensideCastlingAvailable","getQueensideCastlingEndCoordinate","getEnPassantMoves","pieceLetter","isPawn","enPassantCaptures","getAvailableEnPassantCaptures","pawnAttacks","enP","isIrreversible","irreversible","getSpecialMoves","pseudoLegalMoves","generatedMove","split","capturedPieces","isKingCapture","_piece","_sideToMove","currentMoves","maximum","pointIndexes","DisplaySettings","baseTeams","stringifyCoordinate","unstringifyCoordinate","every","isNaN","createGameTypeSettings","teamSettings","firstTeamColors","secondTeamColors","isSameTeam","colorA","colorB","getTeammateColor","teammateIndex","indexOf","createComplexMoveLegalityTracker","createBasePreGeneratedAttacks","variantRuleCache","compareCoordinates","coordinate1","coordinate2","FENOptions","tags","castlingKingsideData","pieceCoordinates","pieceEndCoordinates","checkSquares","castlingQueensideData","tagsSnapshot","loadTagSnapshot","verifyKeyTag","newOptions","setTag","serializedState","fenTag","generateCastling","dimensionRY","dimensionBG","dimensions","royalRanks","royalCoordinates","kingsideCastlePieceCoordinate","queensideCastlePieceCoordinate","boardSquares","royalCoordinateI","royalRanksI","condition","royalCoordinate","kArr","castlingData","castleQueenside","qArr","isCastlingAvailable","player","squares","checkSquare","coordinateA","coordinateB","getCastlingEndCoordinate","getKingsideCastlingPieceEndCoordinate","getQueensideCastlingPieceEndCoordinate","getKingsideCastlingTandemPiece","getQueensideCastlingTandemPiece","enPassant","botAlgorithms","ZombieType","plyCount","privateGameOver","newFENData","fenOptionsSnapshot","isDead","getCastlingPieceEndCoordinates","processStandardMove","startI","startJ","endI","endJ","endPiece","kingsidePiece","queensidePiece","secondKPiece","kI","kJ","secondQPiece","qI","qJ","error","castleKingside","royalPiece","spreadPointsBetweenPlayersEvenly","realPlayers","individualPoints","ceil","obtainPointsForMate","assignPoints","branchBetweenResignationMoves","playerName","toUpperCase","processInternalMove","internalMove","insufficientMaterial","checkCurrentState","assignGeneralTermination","turnPiecesDead","excludeRoyals","doNotSetDead","deadPlayers","isResignationOver","alivePlayer","findIndex","countTotalPointsOnBoard","processDroppingMove","bank","areBanksEnabled","setupComplete","playerBank","pieceStringReference","safeReference","bankPieceCount","delete","settings","onlyPawns","getKingCaptures","processPointsForChecks","currentChecks","updatedChecks","playerChecks","has","checkedPlayers","moveStalemates","endSquare","totalMateSum","boardAlternations","pointDistribution","checkmatePoints","pieceCapturingPoints","getPointsForPiece","isOver","insufficientPieces","insufficient","totalPlayers","previousTurn","singlesPoints","zombieImmune","resultingPoints","firstAlivePlayer","maximumIndex","generalTermination","createDefaultFENEffectSettings","createDefaultArmyDeathSettings","getNeighboringSideToMove","verifyParameterType","param","isArray","createBooleanTupleTag","defaultValue","isStatic","resultingObject","serialize","tuple","createPawnBaseRankTag","createEnPassantTag","input","some","createCastleWithTag","createBoxOffsetTag","createBooleanTag","defaultDimension","createDimensionTag","baseInput","reverse","defaultZombies","createZombiesTag","newZombies","zombieType","verifyZombieType","createRoyalTag","createLivesTag","createBankTag","defaultBanks","pieceDefinition","count","charAt","resultingStrings","entries","pieceStringObject","createPromotedFromTag","promotedFromMap","parsedCoordinate","promotedFromStrings","newMap","clear","createSetupPointsTag","createSeirawanDropsTag","seirawanDropsArray","coord","s","values","verifyDynamicFENOptionKey","verifyDynamicTag","createFENOptionsTags","pawnBaseRank","boxOffset","dim","noCorners","castleWith","lives","promotedFrom","setupPoints","seirawanDrops","createFENOptionsTagsSnapshot","resultingTags","playerNames","individualTerminations","generalWinningTerminations","verifyWinningTermination","includes","generalDrawingTerminations","verifyDrawingTermination","generalTerminations","validateTerminationString","capitalizedTermination","str","startsWith","endsWith","convertCoordinateToPGN4","boardDimension","fromCharCode","alternation","convertCoordinateToPGN4Array","getOppositePlacedColor","getPlayerNameFromColor","TimeControlType","VariantType","colors","verifyNumericColor","nonPlayablePieces","wall","transparentWall","colorEnum","g","verifyColorEnumValue","stringColorEnum","deadColorIndex","_color","static","pieceString1","pieceString2","getStringifiedColor","createPieceFromData","createPieceFromString","testEmptyPieceString","emptyPieceString","testWallPieceString","wallPieceString","testActivePieceString","pawnPieceString","duckPieceString","generateCastlingString","extractPiece","obtainAmbiguousOrthogonality","moveMetadata","registeredPieces","movements","boardPiece","c2","extractPromotion","extractChecksAndCheckmates","repeat","moveNotation","fullMoveNotation","resultingString","firstStandardMoveCaptureSet","shortenedMoveNotation","isFirstCapturingMoveSet","ambiguousRank","ambiguousFile","annotation","verifyValidMove","assertValidMove","createMoveTree","baseSnapshot","snapshots","WeakMap","boardHashes","startingSnapshot","hash","stripEmptyAlternativeLines","splice","stripDeletedMoveHashes","boardHash","currentLine","addBoardSnapshot","hasAdditionalPath","assignMoveWrapperKey","baseMoveWrapper","alternativeFirstMove","obtainMatchingAlternativeLine","items","finalIndex","newCurrentMove","indexOfMinus","lastNumber","popped","pop","alterCurrentPath","getHash","preliminaryHashString","totalCount","standardMove","postMoveResults","deadColors","lastCurrentMoves","lastCurrent","alternativeLineContainer","boardObject","serializedForm","ps","SpecialMove","InternalMoveSignature","verifyRequiredMove","verifyMoveWrapperProperties","compareMoves","move1","move2","verifyStandardMove","EnPassant","verifyDroppingMove","verifyInternalMove","createDummyMoveMetadata","createBaseMoveWrapper","requiredSettings","getMoveFromPathAndTree","movePath","currentSelection","shift","currentIndex","index","getLatestChainedMoves","sliding","jumping","hooks","rayGenCache","baseRankActive","useTrajectory","usePerspective","usePawnLogic","useHopping","configuration","baseRankCalc","baseRank","isRayTrace","attackType","modifyDisplacements","pushMove","isRayGen","promotionRanks","promotionPieces","generateSlidingAttack","displacementI","displacementJ","displacement","limit","Infinity","special","rayTraceLimit","iLength","jLength","getMovePossibility","generateJumpAttack","squareBlockingIndex","isTestPassed","trajectory","trajectoryX","trajectoryY","pushTo","getPossibleCells","trace","slidingLines","orthogonalMoves","diagonalMoves","kingDirections","camelHops","dabbabaHops","alfilHops","initPieceControlDeclarations","baseClassRef","super","teamsPoints","botFFAValue","botTeamsValue","isColorBound","naming","name","shortName","description","stoneGeneralControl","soldierControl","xiangqiHorseControl","AttackType","nonPlayableValues","verifyPieceLetter","pieceControlConfigSettings","createPieceDeclaration","pawnPieceLetter","wallPieceLetter","grasshopperPieceLetter","defaultPieces","rook","emptyLetter","duckLetter","VariantRule","dependencies","rv","variantRuleList","decorator","wrappingDecorators","initializeBaseHandler","handler","initializeWrappingHandler","injectIntoBaseClass","callback","bind","callHandler","method","decoratorMethod","decoratorType","getDecoratorType","prototypeMethod","getInsufficientMaterialData","isPartiallyDisabled","isDisabled","objectPrototype","ownKeys","getPrototypeOf","decorateClassWithVariants","baseClass","classReference","decoratorProperties","methods","lastInheritedMethods","basePrototype","verifyKeyInDecoratorProperties","property","getOwnPropertyNames","localProperty","enumerable","configurable","variantRuleChain","variantDecorator","variant","variantFunc","writable","AllowPassing","parameterValue","information","displayIcon","matchesPGNDeclaration","match","serializeToParsingForm","variantDataRules","giveaway","passingMoves","AlternativeTeams","teammate","rbTeams","teamOne","teamTwo","matchArray","BarePieceRule","Blindfold","CaptureTheKing","taboo","Chess960","minorPieceCache","legacy2PThreshold","legacy2PRank","legacy4Prank","legacy2PTakeaway","colorBoundPieces","supermajorPieces","minorPieces","edgePieces","positionID","regExp","newID","nr","rank","chess960ranges","legacy","pieceArrays","ranks","walls","intersections","pieceMasks","c960range","calcNr","positions","generatePositionIndexes","colorBoundIndexes","floor","sort","supermajorIndex","minorPieceIndexes","position","edgeSet","royalSet","colorDelta","majorDelta","intersection","calcTempNr","cycles","twins","royalPieces","royalOnCorrectRank","replaceRow","createBaseChess960mappings","supermajorOverRoyal","mI","Crazyhouse","FiftyMoveRule","resultingMoveDrops","isRY","pawnPromotionRank","promotionRank","moveDrop","DuckChess","latestMoves","ducks","emptySquares","droppingChainedMoves","duckChainedMoves","emptySquare","FogOfWar","currentPlayerMoves","drop","ForcedCapture","hasCaptures","Anonymous","players","elo","SemiAnonymous","SelfPartner","fenTags","firstTeamPlayer","secondTeamPlayer","Ghostboard","ParadigmChess30","twoPlayerRank","twoPlayerAdjustment","preMethodExecution","positionId","getInformation","paradigmRanges","moveCoordinate","iter","rp","permutations","PiecesFaceCenter","SeirawanSetup","setupChess","disabledIndex","returnValue","stringifiedCoordinate","validateWithDrops","continuations","SelfCheck","nCheck","captureTheKing","baseChecks","newCoordinates","SetupChess","disabled","wereBanksEnabled","permutationCoordinates","pawnPermutationCoordinates","areSetupPointsUnset","bankEnabled","files","pawnRanks","flatMap","getCoordinateList","coordinateList","pointValue","pointsLeft","anyDrop","Taboo","initialDead","newDead","onlyUnique","stringifyKey","getPieceInFront","comfuterAlgorithm","createBotAlgorithm","boardAccessors","augmentBoardAccessorsFromBoard","remainingReal","remaining","coverage","hangingCache","coverageCache","pieceValueCache","getDistanceFromKing","abs","getCoverage","defaultSideToMove","defenders","cvg","pieceC","pieceColor","cache","getPieceValue","isTeams","controlSetting","promotionDistance","getDistanceFromPromotion","inFront","isRoyal","getCoordinationEval","firstPlayerMovesBefore","p1","p2","next","hanging","pieceValue","attackerValue","pc","min","attackedFromLeft","threatened","pawnDefends","h","underDefended","attackingPlayers","canRespondDirectlyToThreat","getKingSafetyEval","kingEval","checkableEval","exposedEval","baseReferences","squareAccessDefinitions","isChecked","checkableSq","prev","accessKey","ki","kj","getEval","totalEval","isKingsideCastle","isQueensideCastle","destinations","dest","inspectCoverage","myMaterial","oppMaterial","pcVal","getMaterialEval","hillEval","getDistFromHill","checksLength","barePieceRule","getMatesEval","blockedBy","bSqr","getMobilityEval","partner","pinnedEval","discovsEval","discovered","pins","royalX","royalY","pieceX","pieceY","attackPiece","sqrt","getPinsEval","targetPiece","isZombieEatZombie","fiftyMoveRule","stringifiedType","initializeBoardAccessorsFromBoard","moveValues","evaluations","sorted","best","evaluated","pick","random","randomlyPickNextChainedMoves","createComfuterAlgorithm","createComfuterBasedAlgorithm","comfuterCheckerAlgorithm","baseEvaluations","evaluation","comfuterMuncherAlgorithm","comfuterPusherAlgorithm","patzerAlgorithm","defaultBoard","RanterAlgorithm","randoBotAlgorithm","resultingMove","isForcedContinuation","copyOfMoves","zombieEatZombieMoves","otherMoves","startingEvaluation","createRandomBasedAlgorithm","checkerAlgorithm","muncherAlgorithm","pusherAlgorithm","noRoyalsToMate","hasPromotion","disabledRank","getRoyalPieceMedians","royalMoveMedians","extraWalls","accumulator","median","minimumMedian","stalemateOptions","stalemateOptionsValues","obtainPieceSymbolFromCoordinate","optimizedPieces","pieceSquareMedians","backwardsPieceRegistry","availableSymbols","selectedSymbol","candidates","getOwnPropertySymbols","candidateIndex","getPartialIntersection","royalColor","enemyCoordinate","enemySymbol","resultingInsufficientPieces","royalPieceMedians","oppositionMedians","squaresPlayerCanOutrange","currentColorBounds","royalsCannotCapture","medians","subSymbol","sum","Symbol","emptyBoard","pieceMoveRegistry","possibleRoyals","boardDestinations","royalPieceSets","NON_INDEXED_PIECE_SYMBOL","optimizePieceSet","initializeRoyals","recurseThroughSquares","currentSquares","unvisitedSquares","baseBuilder","registryResult","Uint16Array","oneBitMask","recurse","moveLength","moveString","binaryMasks","parseInt","valueArr","addToBoardDestinations","concat","getBoardDestinations","initializeBackwardsPieceRegistry","entry","uintArray","isAlwaysIntersecting","permutationArray","permutationEntry","uintArr","remappedSymbols","remappedSymbol","uintValues","sym","remapped","generateOppositionSquares","royalMoves","oppositionRowEchelon","finalArray","findMinimumOnBoardSquares","generateOppositeMedians","rowEchelon","royalPieceA","royalPieceB","i2","j2","jjIndex","iiIndex","toString","newResultingSquares","dimSquare","minimum","generatePieceMoveMedians","currentMessages","requiredMessages","registeredSymbols","registeredSymbol","pieceMedianCounter","Worker","URL","moveRegistryArray","uint","buffer","royalPieceSet","terminate","resultingMedianArray","resultingSquares","royalMoveSet","countBitsOnBoard","resultingMedian","counters","individualCounter","symbol","numericKey","indexingNumber","setBits","possiblePieces","maximumTarget","optimalRoyalMoveSets","moveSet","optimalMoveSet","detractionSet","Atomic","RoyalsCannotCapture","baseCoordinates","addCoordinate","disI","disJ","coordinateI","coordinateJ","atomicCoordinates","DeadKingWalking","pointsForMate","enPassants","eligibleEnPassants","enPassantCoordinate","enPassantInfo","FatalCapture","endCaptureCoordinates","returnType","totalFullMoves","fullMoves","textualForm","alivePlayers","Giveaway","StalemateOptions","capturedPiece","pointsForPiece","aliveColors","stalematePoints","isGiveawayAssigned","KingOfTheHill","hillSquares","defaultCoordinates","toLowerCase","coordinatesArray","presumedOption","defaultRoyal","NCheck","defaultChecks","check","isNCheckValidated","isStandardMove","live","OppositeMultiplier","oppositeMultiplierValue","OppositeSideCastling","castlingDataReference","PiecesGoToBanks","captures","addPieceToBank","PlayForMate","PointsForMate","playForMate","stalemateLoses","stalemateWins","stalemateDraws","verifyCustomStalemateValue","currentTurn","Takeover","detectedPieces","ThreefoldRepetition","totalRepetitionsRequired","totalRepetitions","AnyCapture","modifiedConfiguration","PromoteTo","pieceNames","inputPromotion","PromotionRank","Sideways","Stonewall","Torpedo","variantRuleColors","minor","visual","autogenous","startingPosition","extending","widespread","pointsAlternation","phased","createBaseParsingTypes","iterator","variantRulePriorities","differentiateDecoratorMethods","verifyDecorator","parseVariantRules","variantClasses","forcedRules","finalList","rulesStrings","insertVariantRule","dependency","dependencyArgs","ruleString","forcedRule","rule","unshift","compileVariantRuleData","finalObject","properties","copyVariantRules","rvs","parameterArray","validateVariantRules","serializePGNMoves","moveTree","replace","variantTypeTag","variantDateTag","variantSiteTag","variantTimeControlTag","variantTerminationTag","variantGameId","createPlayerDataTag","currentValue","verifyTagInParsing","inputTag","parseTag","newCurrentValue","uniqueResultingTags","playerData","resultsTag","variantRulesTag","createDefaultVariantTags","variantType","tagContents","resultingRuleList","Date","site","increment","isDelay","defaultTC","minutesMatch","secondsMatch","delay","round","noIncrement","timeControlString","gameNumber","id","parsePGN4","pgn4Tags","pgn4Moves","substring","trim","variantTags","variantTag","nonPlayablePieceValues","defaultTags","serializeBoard","PGN4_SYNTAX","SPLIT","PIECE_REGEX","PIECE_REGEX_SIMPLIFIED","MOVE_CAPTURING_REGEX","DUCK_MOVE_CAPTURING_REGEX","DROPPING_MOVE_CAPTURING_REGEX","BRACKETS","COMMENT_START","COMMENT_END","VARIATION_START","VARIATION_END","COORDINATE_REGEX","COMMENT_SYNTAXES","CLOCK","ARROWS","SQUARES","ANNOTATION","parsePGN4Moves","parseMoves","selectedMove","moveList","currentPath","getMoveIndexes","parseComment","getEnumeratorIndex","findBracketIndex","depth","processMoveDataInsertion","currentMoveData","cloneMoveData","clockSyntax","arrowSyntax","arrows","arrow","numericColor","arrowCoordinates","squareSyntax","inputCoordinate","annotationMatch","obtainMoveFromInfo","info","internalType","obtainInternalType","promotionMatch","moveCoordinates","startCoordinate","endCoordinate","obtainStandardMove","droppingMove","obtainDroppingMove","duckMove","obtainDuckMove","variationIncrement","isNumNaN","checkDimensionIntersection","dimensionI","dimensionJ","modifyFourBooleanParameter","part","fenDataArrayRef","booleans","predefinedFENpositions","fenDataTag","createFENDataTag","parts","warn","verifyKeyInTags","initialParsing","replaceAll","pieceStr","cornerAreaSize","arrayDimension","baseLoop","baseBoard","serializeFENOptions","currentEmptySquares","parseSingleCoordinate","charCodeAt","parseEnPassantCoordinates","wrapTag","baseTag","content","tagNamesEqual","definedTag","unwrapTag","shuffleArray","array","compareArrays","arr1","arr2","first","second","countMinimumOf2DArrayExcludingZero","number","findLastIndex","truncateNumber","digits","multiplier","pow","adjusted","bitCount","copyClass","instance","customProperties","create","copy","verifyObjectType","formatOrdinalNumber","lastTwoDigits","compileEnumeration","prefixWithIndefiniteArticle","webpackContext","req","webpackContextResolve","__webpack_require__","o","code","resolve","module","exports"],"sourceRoot":""}