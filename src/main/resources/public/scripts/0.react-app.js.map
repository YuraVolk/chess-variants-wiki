{"version":3,"file":"0.react-app.js","mappings":"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","sources":["webpack://spring-react-app/./src/main/client/fonts/chessGlyphIndex.ts","webpack://spring-react-app/./src/main/client/ts/baseTypes.ts","webpack://spring-react-app/./src/main/client/ts/interfaces/Colors.ts","webpack://spring-react-app/./src/main/client/ts/logic/BaseInterfaces.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/Board/BoardMoveValidator.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/MoveTree/MoveTreeValidator.ts","webpack://spring-react-app/./src/main/client/ts/logic/index/GameBoardWorker.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/PieceControl/PieceControlBuilder.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/Board/Board.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/Board/BoardInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/FENData/FENOptions/FENOptions.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/FENData/FENData.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/FENData/FENDataInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/FENData/FENOptions/FENOptionsTags.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/FENData/FENOptions/FENOptionsTagsInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/GameInformation/GameData.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/GameInformation/GameUnits/GameUnits.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/GameInformation/GameUnits/PieceString.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/MoveTree/MoveNotationStringifier.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/MoveTree/MoveTree.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/MoveTree/MoveTreeInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/PieceControl/PieceControl.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/PieceControl/PieceControlDeclarations.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/PieceControl/PieceControlInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRule.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/AllowPassing.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/AlternativeTeams.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/BarePieceRule.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/Blindfold.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/CaptureTheKing.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/Chess960.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/Crazyhouse.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/DuckChess.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/FogOfWar.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/ForcedCapture.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/GameMetadataRules.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/Ghostboard.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/ParadigmChess30.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/PiecesFaceCenter.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/SeirawanSetup.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/SelfCheck.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/SetupChess.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardDecorators/Taboo.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/Algorithms/ComfuterEvaluation.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/Algorithms/ComfuterEvaluationExtensions.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/Algorithms/MixedAlgorithms.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/Algorithms/RandomEvaluation.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/Algorithms/RandomEvaluationExtensions.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/BotInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/InsufficientMaterialChecker.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/InsufficientMaterialConstructor.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/PieceMedianCounter.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/StateSerializer.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/Utilities.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/Atomic.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/DeadKingWalking.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/EnPassant.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/FatalCapture.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/FiftyMoveRule.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/Giveaway.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/KingOfTheHill.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/NCheck.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/OppositeMultiplier.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/OppositeSideCastling.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/PiecesGoToBanks.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/PlayForMate.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/PointsForMate.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/StalemateOptions.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/Takeover.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/FENDataDecorators/ThreefoldRepetition.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/AnyCapture.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/PromoteTo.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/PromotionRank.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/RoyalsCannotCapture.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/Sideways.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/Stonewall.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/PieceControlDecorators/Torpedo.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleSetup.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/TagLogic/GameMetadataTags.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/TagLogic/VariantRulesTag.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/TagInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/InputOutputProcessing.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/Moves/SerializePGNMoves.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/Moves/ParsePGNMoves.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/TagLogic/FENDataTag.ts","webpack://spring-react-app/./src/main/client/ts/logic/utils/Tags/Utils.ts","webpack://spring-react-app/./src/main/client/ts/utils/ArrayUtils.ts","webpack://spring-react-app/./src/main/client/ts/utils/NumberUtils.ts","webpack://spring-react-app/./src/main/client/ts/utils/ObjectUtils.ts","webpack://spring-react-app/./src/main/client/ts/utils/StringFormatUtils.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/ sync \\.ts$"],"sourcesContent":["export const chessGlyphIndex = {\n\tdoubleBackwardArrow: \"!\",\n\tdownloadIcon: '\"',\n\tendBackwardArrow: \"#\",\n\tforwardDoubleArrow: \"α\",\n\tuserSearch: \"$\",\n\tuserConnection: \"%\",\n\tnotAllowed: \"&\",\n\tclock: \"'\",\n\textraInformation: \"(\",\n\tauthorshipNotice: \")\",\n\tdraw: \"+\",\n\tbackwardArrow: \",\",\n\tuserInformation: \"-\",\n\tsmallBackwardArrow: \"/\",\n\tleaderBoard: \";\",\n\tequal: \"=\",\n\tdownwardArrow: \"<\",\n\tupperArrow: \">\",\n\tendForwardArrow: \"@\",\n\turlAttached: \"A\",\n\tcrossMark: \"B\",\n\trightOutwardsArrow: \"C\",\n\thashtag: \"D\",\n\tnewspaper: \"E\",\n\ttwitter: \"F\",\n\tcheckMark: \"G\",\n\tcamera: \"H\",\n\talternativeLine: \"I\",\n\tplay: \"J\",\n\tpause: \"K\",\n\treload: \"L\",\n\tworld: \"M\",\n\tpoints: \"N\",\n\tmedal: \"O\",\n\tsoundOff: \"P\",\n\tcircleCrossMark: \"Q\",\n\tsteadyEvaluation: \"R\",\n\tfacebook: \"S\",\n\tcircle: \"T\",\n\tsoundOn: \"U\",\n\tplus: \"V\",\n\topenEye: \"W\",\n\tcopyToClipboard: \"X\",\n\twavingFlag: \"Y\",\n\teditText: \"Z\",\n\tfullArrowLeft: \"[\",\n\tfullArrowRight: \"]\",\n\tsmallArrowForward: \"\\\\\",\n\tgoBackArrow: \"_\",\n\tyoutube: \"`\",\n\tcalendar: \"a\",\n\tuser: \"b\",\n\tchat: \"c\",\n\tlock: \"d\",\n\tbox: \"e\",\n\tcircularArrows: \"f\",\n\tlightBulb: \"g\",\n\tbriefcase: \"h\",\n\tboard: \"i\",\n\tknightArrows: \"j\",\n\tnewMessage: \"k\",\n\tdrawing: \"l\",\n\ttwoUsers: \"m\",\n\ttwoUsers2: \"n\",\n\topeningBook: \"o\",\n\tdisclaimer: \"p\",\n\tringingBell: \"q\",\n\tlist: \"r\",\n\trookAndPawn: \"s\",\n\thamburgerList: \"t\",\n\tmail: \"u\",\n\tuserExtraInformation: \"v\",\n\thouse: \"w\",\n\tsheetAndPencil: \"x\",\n\topenMail: \"y\",\n\tchatBox: \"z\",\n\tfullArrowDown: \"{\",\n\tsmallArrowUp: \"|\",\n\tfullArrowUp: \"}\",\n\tarrowIntoBox: \"¡\",\n\tkey: \"¢\",\n\tfile: \"£\",\n\tbooks: \"¤\",\n\tsharing: \"¥\",\n\tuserNotAllowed: \"¦\",\n\tuserCrossMark: \"§\",\n\tquestionMark: \"©\",\n\tboardWithCircle: \"«\",\n\tgooglePlus: \"®\",\n\treset: \"°\",\n\treddit: \"±\",\n\topenBook: \"´\",\n\tuserPlus: \"¶\",\n\tcog: \"·\",\n\tpin: \"»\",\n\tsuitcase: \"¼\",\n\tmark: \"½\",\n\tcake: \"¾\",\n\topenLink: \"¿\",\n\tbishopStroke: \"Ä\",\n\tlinkedin: \"Å\",\n\tknight: \"Ç\",\n\tthreeCheck: \"Ë\",\n\tchess960rapid: \"Ñ\",\n\tconnection: \"Õ\",\n\tquotes: \"Ö\",\n\texit: \"×\",\n\tcrossedBinoculars: \"Þ\",\n\tleaderBoardReversed: \"ß\",\n\tbishopFull: \"ä\",\n\tprinter: \"å\",\n\tverticalEvaluation: \"ç\",\n\tt: \"ë\",\n\tpawn: \"í\",\n\ttwoPawns: \"î\",\n\tunrated: \"ð\",\n\telite: \"ñ\",\n\tbug: \"õ\",\n\tcpu: \"ö\",\n\tforwardArrowCircle: \"÷\",\n\tsquareCrossMark: \"ü\",\n\tandroid: \"þ\",\n\ttwoUsersPlus: \"ÿ\",\n\tcrossedArrows: \"Đ\",\n\tking: \"Ā\",\n\tkingFull: \"ā\",\n\tbishop: \"Ă\",\n\ttwoFullRooks: \"ă\",\n\tkingStrokes: \"Ą\",\n\tfullKnight2: \"ą\",\n\tchess960: \"Č\",\n\tleaderBoardAscent: \"č\",\n\tcrazyhouse: \"Ď\",\n\tchecklist: \"ď\",\n\ttarget: \"đ\",\n\tpawnAndHalfRook: \"Ē\",\n\thalfRookAndPawn: \"ē\",\n\tknightStrokes: \"Ė\",\n\tpawnLogo: \"Ę\",\n\tqueenFull: \"ę\",\n\texchange: \"Ě\",\n\tuserNext: \"Ğ\",\n\tuserPrevious: \"Ġ\",\n\tcompass: \"ġ\",\n\tpawnStrokes: \"Ģ\",\n\trookStrokes: \"ģ\",\n\tscreenDisplays: \"Ħ\",\n\tkingOfTheHill: \"Ī\",\n\tantichess: \"ī\",\n\tqueen: \"Į\",\n\tthreePawns: \"į\",\n\tqueenStrokes: \"Ķ\",\n\trookSmallStrokes: \"Ļ\",\n\trookSmall: \"Ľ\",\n\tbishopPair: \"Ł\",\n\trookPair: \"Ņ\",\n\tknightPair: \"Ň\",\n\ttwoUsersSearch: \"Ŋ\",\n\tshield: \"ŋ\",\n\tkingSmall: \"Ō\",\n\tbishopSmall: \"Ő\",\n\tknightSmall: \"Ŗ\",\n\tuserNoConnection: \"Ř\",\n\tuserStream: \"v\",\n\tqueenAlternative: \"Ş\",\n\tpawnAlternative: \"Š\",\n\tthreePawnsAlternative: \"Ţ\",\n\ttwoPawnsAlternative: \"Ť\",\n\trookAlternative: \"Ŧ\",\n\tknightPairFull: \"Ż\",\n\tbishopPairFull: \"Ž\",\n\taddBoard: \"ˆ\",\n\tdiamond: \"Ͱ\",\n\tscales: \"ͱ\",\n\tpawn3d: \"Ͳ\",\n\tuserShieldPlus: \"ͳ\",\n\tgold: \"Ͷ\",\n\tellipsis: \"Ώ\",\n\tanalysis: \"Δ\",\n\tarchive: \"Θ\",\n\tarrowBottomIntoBox: \"Ξ\",\n\tdisclaimerEditor: \"Σ\",\n\tsendTrophy: \"Υ\",\n\taddCheckMark: \"Φ\",\n\tcheckMarkSquare: \"Ψ\",\n\tsquareStaircase: \"ά\",\n\tarrowsUpBottom: \"έ\",\n\tstar: \"ή\",\n\tverticalDash: \"ί\",\n\tshieldCheckMark: \"β\",\n\ttop3: \"ε\",\n\taddImage: \"ζ\",\n\tchessStream: \"η\",\n\tremoveTrophy: \"κ\",\n\timportantMail: \"λ\",\n\tarrowLeave: \"μ\",\n\tdonut: \"ν\",\n\tcomputerAnalysis: \"ξ\",\n\tcheckMarkSquareSmall: \"ο\",\n\tdiagonalExpandArrows: \"π\",\n\tleaderBoardHorizontal: \"ρ\",\n\tcheckMarkAsCircle: \"χ\",\n\tarrowFromBox: \"ϊ\",\n\tboxArrowBottom: \"ό\",\n\tboxArrowLeft: \"ύ\",\n\tboxArrowRight: \"ώ\",\n\tfourArrowsCentral: \"Ϙ\",\n\tclashingSwords: \"τ\",\n\tratingOffset: \"υ\",\n\tsmilingFace: \"ς\",\n\tfileCabinet: \"σ\",\n\teditClock: \"ϙ\",\n\tuserShield: \"Ϛ\",\n\thomeFilled: \"ϛ\",\n\tpaymentCard: \"Ϝ\",\n\tfourArrowsOutwards: \"ϝ\",\n\tpuzzle: \"Ϟ\",\n\taddPhoto: \"ϟ\",\n\tarrowWallLeft: \"Ϡ\",\n\tarrowWallRight: \"ϡ\",\n\tboardConfiguration: \"Ϸ\",\n\tfourBlocks: \"ϸ\",\n\tsandglass: \"Ϻ\",\n\tcrown: \"ϻ\",\n\tcloudUpload: \"Ẹ\",\n\twebChatBox: \"ẹ\",\n\tpuzzleRush: \"Ẻ\",\n\tknightHops: \"ẻ\",\n\tinstagram: \"ἀ\",\n\tsquarePlus: \"ἁ\",\n\tsquareMinus: \"ἂ\",\n\tsquareEqual: \"ἃ\",\n\tsquare: \"ἄ\",\n\tfireFull: \"ἅ\",\n\tpawnRecycle: \"ἆ\",\n\tnoEngine: \"ἇ\",\n\tgoogle: \"Ἀ\",\n\tfourPlayer: \"Ἁ\",\n\tpieceMeal: \"Ἂ\",\n\tarrowBoldUp: \"Ἃ\",\n\tarrowBoldDown: \"Ἄ\",\n\tblunder: \"Ἅ\",\n\tmistake: \"Ἆ\",\n\tvideoChatBox: \"Ἇ\",\n\tbonesCrossed: \"ἐ\",\n\tdisplays: \"ἑ\",\n\tarrowEnter: \"ἒ\",\n\tnewspaperHalf: \"ἓ\",\n\tbookmark: \"ἔ\",\n\tpuzzleLarge: \"ἕ\",\n\tmovePawn: \"Ἐ\",\n\tpawn3dLarge: \"Ἑ\",\n\tsun: \"Ἒ\",\n\trapid: \"Ἓ\",\n\tblitz: \"Ἔ\",\n\tbullet: \"Ἕ\",\n\tmortarboard: \"ἠ\",\n\tlaptop: \"ἡ\",\n\tresetWidth: \"ἢ\",\n\tpawnConnection: \"ἣ\",\n\tcopyToClipboardFromText: \"ἤ\",\n\tfire: \"ἥ\",\n\tcrownSmall: \"ἦ\",\n\torderedList: \"ἧ\",\n\tchess960daily: \"Ἠ\",\n\tarrowWallBottom: \"Ἡ\",\n\tpawn3dBold: \"Ἢ\",\n\tplusInCircle: \"Ἣ\",\n\tlightCorner: \"Ἤ\",\n\tdarkCorner: \"Ἥ\",\n\tsteepCurve: \"Ἦ\",\n\theart: \"Ἧ\",\n\tcheckMarkThin: \"ἰ\",\n\tconnectionDiagonal: \"ἱ\",\n\tdiadem: \"ἲ\",\n\tplusMinus: \"ἳ\",\n\trecycling: \"ἴ\",\n\tmetrics: \"ἵ\",\n\ttop1: \"ἶ\",\n\tengineCheckMark: \"ἷ\",\n\twikipedia: \"Ἰ\",\n\ttournament: \"Ἱ\",\n\thouseConfiguration: \"Ἲ\",\n\tcomputerHindsight: \"Ἳ\",\n\tcomputerCheckMark: \"Ἴ\",\n\tlightDarkTheme: \"Ἵ\",\n\twhistlingBell: \"Ἶ\",\n\tcrossMarkCompact: \"Ἷ\",\n\teyeCrossed: \"ὀ\",\n\tfide: \"ὁ\",\n\tfavorite: \"ὂ\",\n\ttShirtPawn: \"ὃ\",\n\taddSmile: \"ὄ\",\n\tlibrary: \"ὅ\",\n\tdiscord: \"Ὀ\",\n\tanalysisCheckMark: \"Ὁ\",\n\tversusComputer: \"Ὂ\",\n\tdollarSign: \"Ὃ\",\n\tbestMove: \"Ὄ\",\n\tgift: \"Ὅ\",\n\tevaluationLinear: \"ὐ\",\n\tevaluationThrowaway: \"ὑ\",\n\tevaluationEqual: \"ὒ\",\n\tevaluationDead: \"ὓ\",\n\tevaluationSharp: \"ὔ\",\n\tevaluationPerplexing: \"ὕ\",\n\tevaluationSmooth: \"ὖ\",\n\tlibraryAdd: \"ὗ\",\n\tselfPartner: \"Ὑ\",\n\tfourPlayerConfiguration: \"Ὓ\",\n\tlistDownFlow: \"Ὕ\",\n\tpuzzleBattle: \"Ὗ\",\n\thyperbullet: \"ὠ\",\n\tgameLink: \"ὡ\",\n\tgameStudy: \"ὢ\",\n\tevaluationCrazy: \"ὣ\",\n\tengine: \"ὤ\",\n\tcrossedSwordsInCircle: \"ὥ\",\n\thallmark: \"ὦ\",\n\tlike: \"ὧ\",\n\tboardTwoPlayers: \"Ὠ\",\n\tfourPlayerChess: \"Ὡ\",\n\tvariants: \"Ὢ\",\n\tcloudUploadCompact: \"Ὣ\",\n\tclockIncrement: \"Ὤ\",\n\tvideoCamera: \"Ὥ\",\n\tinaccuracy: \"Ὧ\",\n\tbot: \"ὰ\",\n\ttorpedo: \"ά\",\n\tvk: \"ὲ\",\n\tblindfold: \"έ\",\n\tcustomSettings: \"ή\",\n\tcaptureAnything: \"ὶ\",\n\tpawnSideways: \"ί\",\n\tnoCastling: \"ὸ\",\n\tfogOfWar: \"ό\",\n\tautomate: \"ὺ\",\n\tatomic: \"ύ\",\n\tpawnCounterfeit: \"ὼ\",\n\telephant: \"ώ\",\n\tfullBlock: \"ᾀ\",\n\tfourFullBlocks: \"ᾁ\",\n\tnineFullBlocks: \"ᾂ\",\n\tnineFullBlocksCrossed: \"ᾃ\",\n\thamburgerMenuCompact: \"ᾄ\",\n\tlistCompact: \"ᾅ\",\n\tgeoMark: \"ᾆ\",\n\tcrossedDonut: \"ᾇ\",\n\thandshake: \"ᾈ\",\n\tverified: \"ᾉ\",\n\tsandglassRunningOut: \"ᾊ\",\n\trapidLowOnTime: \"ᾋ\",\n\ttourneyBanner: \"ᾌ\",\n\tnoCloud: \"ᾍ\",\n\tfork: \"ᾎ\",\n\tdonutTarget: \"ᾏ\",\n\tnewCalendarDay: \"ᾐ\",\n\tcornerInfiltration: \"ᾑ\",\n\thastTagCompact: \"ᾒ\",\n\tchatterbox: \"ᾓ\",\n\tcircleStar: \"ᾔ\",\n\ttargetPractice: \"ᾕ\",\n\tpawnPromotion: \"ᾖ\",\n\tflagProgression: \"ᾗ\",\n\tpawnDoubleAttack: \"ᾘ\",\n\tkingAndRook: \"ᾙ\",\n\tspecialMedal: \"ᾚ\",\n\tpawnBanner: \"ᾛ\",\n\tuserSquare: \"ᾜ\",\n\tverifiedCandidate: \"ᾝ\",\n\tsaveFile: \"ᾞ\",\n\tduck: \"ᾟ\",\n\taddBanner: \"ᾠ\",\n\tqrCode: \"ᾡ\",\n\tnoAnalysis: \"ᾢ\",\n\tdualPawn: \"ᾣ\",\n\tgameEscape: \"ᾤ\",\n\ttournamentCup: \"ᾥ\",\n\tnoExchanges: \"ᾦ\",\n\ttikTok: \"ᾰ\",\n\tpieChart: \"ᾱ\",\n\tsearch: \"–\",\n\tbinoculars: \"—\",\n\tlargeBoard: \"’\",\n\texclamation: \"†\",\n\ttournamentCupIcon: \"‡\",\n\ttrashBin: \"•\",\n\tarrowForwardBoldCompact: \"…\",\n\tgiftDiamond: \"‹\",\n\tfilter: \"›\",\n\tnoChat: \"⁄\",\n\tnewSheet: \"€\",\n\txml: \"∞\",\n\tblockUser: \"∫\",\n\tfacebookLike: \"≤\",\n\tfacebookDislike: \"≥\",\n\tapple: \"◊\",\n\tphone: \"\"\n} as const;\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type FunctionType = (...args: any[]) => any;\nexport const verifyFunctionType = (func: unknown): func is FunctionType => typeof func === \"function\";\n\nexport type Length<T extends unknown[]> = T extends { length: infer L } ? L : never;\nexport type Tuple<T, N extends number> = N extends N ? (number extends N ? T[] : _TupleOf<T, N, []>) : never;\ntype _TupleOf<T, N extends number, R extends unknown[]> = R[\"length\"] extends N ? R : _TupleOf<T, N, [T, ...R]>;\n\nexport type Add<A extends number, B extends number> = Length<[...Tuple<unknown, A>, ...Tuple<unknown, B>]>;\nexport const createTuple = <T, L extends number>(val: T, length: L) => Array.from<L, T>({ length }).fill(val);\nexport const createTupleFromCallback = <T, L extends number>(val: (v: unknown, k: number) => T, length: L): Tuple<T, L> =>\n\tArray.from({ length }, val);\nexport const verifyTupleType = <T, L extends number>(arr: T[], length: L): arr is Tuple<T, L> => arr.length === length;\n\nexport type ImplementInterface<T, U> = Pick<T, Exclude<keyof T, keyof U>> & U;\n\nexport function assertNonUndefined<T>(data: T): asserts data is NonNullable<T> {\n\tif (data == null) throw new Error(\"Expected the data above to be anything but null or undefined\");\n}\nexport function assertDevOnly(condition: boolean): asserts condition {\n\tif (process.env.NODE_ENV === \"development\") {\n\t\tif (!condition) throw new Error(\"Dev only condition assertion is not satisfied, the condition resulted in false\");\n\t}\n}\n\nexport function throwOnNever(arg: never): never {\n\tconsole.dir(arg);\n\tthrow new TypeError(`Unexpected argument that is supposed to be of type never`);\n}\n\nexport function importAll(r: __WebpackModuleApi.RequireContext) {\n\tr.keys().forEach(r);\n}\n\nexport function getEnumKeys<T extends Record<PropertyKey, unknown>>(object: Record<keyof T, unknown>): Array<keyof T> {\n\tconst resultingArray: Array<keyof T> = [];\n\tlet key: keyof T;\n\tfor (key in object) resultingArray.push(key);\n\treturn resultingArray;\n}\n\ntype ArrayKeys<T extends unknown[] | readonly unknown[]> = Exclude<Partial<T>[\"length\"], T[\"length\"]> extends never | undefined\n\t? number\n\t: Exclude<Partial<T>[\"length\"], T[\"length\"]>;\n\ndeclare global {\n\tinterface Array<T> {\n\t\tindexOf(searchElement: T, fromIndex?: number): ArrayKeys<this> | -1;\n\t\tlastIndexOf(searchElement: T, fromIndex?: number): ArrayKeys<this> | -1;\n\t\tevery<S extends T>(predicate: (value: T, index: ArrayKeys<this>, array: T[]) => value is S): this is { [K in keyof this]: S };\n\t\tevery(predicate: (value: T, index: ArrayKeys<this>, array: T[]) => unknown, thisArg?: T[]): boolean;\n\t\tsome(predicate: (value: T, index: ArrayKeys<this>, array: T[]) => unknown, thisArg?: T[]): boolean;\n\t\tforEach(callbackfn: (value: T, index: ArrayKeys<this>, array: T[]) => void, thisArg?: T[]): void;\n\t\tmap<U>(callbackfn: (value: T, index: ArrayKeys<this>, array: T[]) => U): { [K in keyof this]: U };\n\t\tfilter<S extends T>(predicate: (value: T, index: ArrayKeys<this>, array: T[]) => value is S, thisArg?: T[]): S[];\n\t\tfilter(predicate: (value: T, index: ArrayKeys<this>, array: T[]) => unknown, thisArg?: T[]): T[];\n\t\treduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: T[]) => T): T;\n\t\treduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: T[]) => T, initialValue: T): T;\n\t\treduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: ArrayKeys<this>, array: T[]) => U, initialValue: U): U;\n\t\treduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: T[]) => T): T;\n\t\treduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: T[]) => T, initialValue: T): T;\n\t\treduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: ArrayKeys<this>, array: T[]) => U, initialValue: U): U;\n\t}\n\n\tinterface ReadonlyArray<T> {\n\t\tindexOf(searchElement: T, fromIndex?: number): ArrayKeys<this> | -1;\n\t\tlastIndexOf(searchElement: T, fromIndex?: number): ArrayKeys<this> | -1;\n\t\tevery<S extends T>(\n\t\t\tpredicate: (value: T, index: ArrayKeys<this>, array: readonly T[]) => value is S,\n\t\t\tthisArg?: T[]\n\t\t): this is { readonly [K in keyof this]: S };\n\t\tevery(predicate: (value: T, index: ArrayKeys<this>, array: readonly T[]) => unknown, thisArg?: T[]): boolean;\n\t\tsome(predicate: (value: T, index: ArrayKeys<this>, array: readonly T[]) => unknown, thisArg?: T[]): boolean;\n\t\tforEach(callbackfn: (value: T, index: ArrayKeys<this>, array: readonly T[]) => void, thisArg?: T[]): void;\n\t\tmap<U>(callbackfn: (value: T, index: ArrayKeys<this>, array: readonly T[]) => U, thisArg?: T[]): U[];\n\t\tfilter<S extends T>(predicate: (value: T, index: ArrayKeys<this>, array: readonly T[]) => value is S, thisArg?: T[]): S[];\n\t\tfilter(predicate: (value: T, index: ArrayKeys<this>, array: readonly T[]) => unknown, thisArg?: T[]): T[];\n\t\treduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: readonly T[]) => T): T;\n\t\treduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: readonly T[]) => T, initialValue: T): T;\n\t\treduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: ArrayKeys<this>, array: readonly T[]) => U, initialValue: U): U;\n\t\treduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: readonly T[]) => T): T;\n\t\treduceRight(\n\t\t\tcallbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: readonly T[]) => T,\n\t\t\tinitialValue: T\n\t\t): T;\n\t\treduceRight<U>(\n\t\t\tcallbackfn: (previousValue: U, currentValue: T, currentIndex: ArrayKeys<this>, array: readonly T[]) => U,\n\t\t\tinitialValue: U\n\t\t): U;\n\t}\n\n\tinterface ArrayConstructor {\n\t\tfrom<L extends number, T>(arrayLike: { readonly length: L }): Tuple<T, L>;\n\t\tfrom<T, U, L extends number>(iterable: { readonly length: L }, mapfn: (v: T, k: number) => U, thisArg?: T[]): Tuple<U, L>;\n\t}\n}\n","import { throwOnNever, verifyTupleType } from \"../baseTypes\";\n\ndeclare const HexColor: unique symbol;\nexport type HexColor = string & { _: typeof HexColor };\nconst hexColorRegex = /^#(?:[0-9a-fA-F]{3}){1,2}$/;\nexport const createHexColor = (color: string): HexColor => {\n\tif (hexColorRegex.test(color)) {\n\t\treturn color as HexColor;\n\t} else throw new TypeError(\"The supplied hex color is not a hex color: \" + color);\n};\nexport const verifyHexColor = (color: IndexedColor): color is HexColor => typeof color === \"string\";\nexport const validateHexColor = (color: unknown): color is HexColor => {\n\tif (typeof color === \"string\") {\n\t\ttry {\n\t\t\tcreateHexColor(color);\n\t\t\treturn true;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t} else return false;\n};\n\ndeclare const RGBColor: unique symbol;\nexport type RGBColorValue = number & { _: typeof RGBColor };\nexport const createRGBColor = (color: number): RGBColorValue => {\n\tif (color >= 0 || color <= 255) {\n\t\treturn color as RGBColorValue;\n\t} else throw new TypeError(`The supplied RGB color value is not an RGB color value: ${color}`);\n};\nexport type RGBColor = [RGBColorValue, RGBColorValue, RGBColorValue];\nexport const wrapRGBColor = (color: RGBColor): string => `rgb(${color.join(\",\")})`;\nexport const verifyRGBColor = (color: IndexedColor): color is RGBColor => Array.isArray(color);\nexport const validateRGBColor = (color: unknown): color is RGBColor => {\n\tif (Array.isArray(color) && verifyTupleType(color, 3) && color.every<number>((c): c is number => typeof c === \"number\")) {\n\t\ttry {\n\t\t\tcolor.forEach((c) => createRGBColor(c));\n\t\t\treturn true;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t} else return false;\n};\n\ndeclare const HSLColor: unique symbol;\nexport interface HSLColor {\n\thue: number;\n\tsaturation: number;\n\tlightness: number;\n\t_: typeof HSLColor;\n}\nexport const createHSLColor = (color: { hue: number; saturation: number; lightness: number }): HSLColor => {\n\tif (\n\t\t(color.hue >= 0 || color.hue <= 359) &&\n\t\t(color.saturation >= 0 || color.saturation <= 100) &&\n\t\t(color.lightness >= 0 || color.lightness <= 100)\n\t) {\n\t\treturn color as HSLColor;\n\t} else throw new TypeError(`The supplied HSL value is not an HSL color: \" + color`);\n};\nexport const wrapHSLColor = (color: HSLColor): string => `hsl(${color.hue},${color.saturation}%,${color.lightness}%)`;\nexport const verifyHSLColor = (color: IndexedColor): color is HSLColor => typeof color === \"object\";\nexport const validateHSLColor = (color: unknown): color is HSLColor => {\n\tconst verifyNumberRecord = <K extends PropertyKey>(obj: Record<K, unknown>): obj is Record<K, number> => {\n\t\tfor (const key in obj) {\n\t\t\tif (!Object.prototype.hasOwnProperty.call(obj, key)) continue;\n\t\t\tif (typeof obj[key] !== \"number\") return false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tif (typeof color === \"object\" && color && \"hue\" in color && \"saturation\" in color && \"lightness\" in color && verifyNumberRecord(color)) {\n\t\ttry {\n\t\t\tcreateHSLColor(color);\n\t\t\treturn true;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t} else return false;\n};\n\nexport type IndexedColor = HexColor | RGBColor | HSLColor;\nexport const wrapIndexedColor = (color: IndexedColor): string => {\n\tif (verifyHexColor(color)) {\n\t\treturn color;\n\t} else if (verifyRGBColor(color)) {\n\t\treturn wrapRGBColor(color);\n\t} else if (verifyHSLColor(color)) {\n\t\treturn wrapHSLColor(color);\n\t} else {\n\t\treturn throwOnNever(color);\n\t}\n};\nexport const validateIndexedColor = (color: unknown): color is IndexedColor => {\n\treturn validateHexColor(color) || validateRGBColor(color) || validateHSLColor(color);\n};\n","import { NumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { createTupleFromCallback, Tuple } from \"../baseTypes\";\nimport { boardDimension } from \"./movegen/GameInformation/GameData\";\n\nexport interface Cloneable<T> {\n\tcreateClone(): T;\n}\n\nexport interface Memento<S> {\n\tcreateSnapshot(): S;\n\tloadSnapshot(snapshot: S): void;\n}\n\nexport type BoardSquares<T> = Tuple<Tuple<T, typeof boardDimension>, typeof boardDimension>;\nexport const initializeBoardSquares = <T>(baseValue: (v: unknown, k: number) => T): BoardSquares<T> =>\n\tcreateTupleFromCallback(() => createTupleFromCallback(baseValue, boardDimension), boardDimension);\n\nexport const isVerticalPlacement = (color: NumericColor): color is 0 | 2 => color % 2 === 0;\nexport function getVerticalPlacementModulus(num: number): 0 | 1 {\n\tconst result = num % 2;\n\tif (result !== 0 && result !== 1) throw new Error(`Invalid number passed: ${num}`);\n\treturn result;\n}\nexport function getHorizontalPlacementModulus(num: number): 0 | 1 {\n\tconst result = num % 2 ^ 1;\n\tif (result !== 0 && result !== 1) throw new Error(`Invalid number passed: ${num}`);\n\treturn result;\n}\n","import {\n\tcompareMoves,\n\tMove,\n\tMoveComponent,\n\tSpecialMove,\n\tverifyDroppingMove,\n\tverifyInternalMove,\n\tverifyStandardMove\n} from \"../MoveTree/MoveTreeInterface\";\nimport type { Board } from \"./Board\";\n\nexport interface SpecialMoveSettings {\n\thasEnPassant: boolean;\n}\n\nexport function validateBoardMove(board: Board, move: Move): SpecialMoveSettings | false {\n\tlet startingMoves: MoveComponent[];\n\tconst firstMove = move[0];\n\tif (verifyStandardMove(firstMove)) {\n\t\tstartingMoves = board.getLegalMoves(firstMove.startCoordinates[0], firstMove.startCoordinates[1]);\n\t} else if (verifyDroppingMove(firstMove)) {\n\t\tstartingMoves = board.getDroppingMoves(firstMove.piece);\n\t} else if (verifyInternalMove(firstMove)) {\n\t\tstartingMoves = board.getAllowedInternalMoves();\n\t} else throw new Error(`Unexpected move signature encountered: ${JSON.stringify(move)}`);\n\n\tconst specialMoveSettings: SpecialMoveSettings = {\n\t\thasEnPassant: false\n\t};\n\tif (board.variantData.duckChess && move.length === 1) return false;\n\tfor (const moveComponent of move) {\n\t\tconst move = startingMoves.find((legalMove) => compareMoves(legalMove, moveComponent));\n\t\tif (!move) return false;\n\t\tif (verifyStandardMove(move) && move.specialType === SpecialMove.EnPassant) {\n\t\t\tspecialMoveSettings.hasEnPassant = true;\n\t\t}\n\n\t\tif (move.nextChainedMoves) {\n\t\t\tstartingMoves = move.nextChainedMoves;\n\t\t}\n\t}\n\n\treturn specialMoveSettings;\n}\n","import { assertNonUndefined, createTuple } from \"@client/ts/baseTypes\";\nimport { findLastIndex } from \"@utils/ArrayUtils\";\nimport type { Board } from \"../Board/Board\";\nimport { SpecialMoveSettings, validateBoardMove } from \"../Board/BoardMoveValidator\";\nimport { colors, getPlayerNameFromColor, totalPlayers, VariantType } from \"../GameInformation/GameData\";\nimport { createPieceFromData } from \"../GameInformation/GameUnits/PieceString\";\nimport { assertValidMove, createMoveTree, MoveTreeInterface, verifyValidMove } from \"./MoveTree\";\nimport { createBaseMoveWrapper, MoveWrapper, SpecialMove, verifyStandardMove } from \"./MoveTreeInterface\";\n\nexport function validateMoveTree(board: Board, moves: MoveTreeInterface): MoveTreeInterface {\n\tconst clonedBoard = board.createClone();\n\tclonedBoard.moves = createMoveTree(clonedBoard.createSnapshot());\n\tclonedBoard.pregenerateAttacks();\n\n\tconst dimension = Math.max(...clonedBoard.data.fenOptions.tag(\"dim\"));\n\tfunction traverse(\n\t\tcurrent: MoveWrapper[],\n\t\tcurrentFullMove = 0,\n\t\tcurrentTimeOnClocks = createTuple(board.gameData.timeControl.baseTime, totalPlayers)\n\t): MoveWrapper[] {\n\t\tconst moves: MoveWrapper[] = [];\n\n\t\tlet previousSideToMove = -1;\n\t\tfor (let i = 0; i < current.length; i++) {\n\t\t\tconst moveWrapper = current[i];\n\n\t\t\tconst { moveData, path, alternativeLines } = moveWrapper;\n\t\t\tconst newMoveWrapper = createBaseMoveWrapper(\n\t\t\t\t{ moveData, path: path.slice() },\n\t\t\t\t{\n\t\t\t\t\tcomment: moveWrapper.comment\n\t\t\t\t}\n\t\t\t);\n\t\t\tlet validationResult: SpecialMoveSettings | undefined;\n\t\t\ttry {\n\t\t\t\tif ((validationResult = validateBoardMove(clonedBoard, moveData) || undefined)) {\n\t\t\t\t\tnewMoveWrapper.moveData = moveData;\n\t\t\t\t} else break;\n\t\t\t} catch {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet firstStandardMoveSet = false;\n\t\t\tfor (const moveComponent of moveData) {\n\t\t\t\tif (verifyStandardMove(moveComponent)) {\n\t\t\t\t\tif (moveComponent.promotion) {\n\t\t\t\t\t\tmoveComponent.promotion = moveComponent.promotion.map((p) => {\n\t\t\t\t\t\t\tif (p.isWall()) return p;\n\t\t\t\t\t\t\treturn createPieceFromData(clonedBoard.data.sideToMove, p.piece);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!firstStandardMoveSet) {\n\t\t\t\t\t\tnewMoveWrapper.metadata.movingPiece =\n\t\t\t\t\t\t\tclonedBoard.board[moveComponent.startCoordinates[0]][moveComponent.startCoordinates[1]];\n\t\t\t\t\t\tfirstStandardMoveSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (validationResult.hasEnPassant) {\n\t\t\t\t\t\tmoveComponent.specialType = SpecialMove.EnPassant;\n\t\t\t\t\t\tvalidationResult.hasEnPassant = false;\n\t\t\t\t\t\tnewMoveWrapper.metadata.isCapture = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (clonedBoard.data.getCapturedPieces(moveComponent).length > 0) newMoveWrapper.metadata.isCapture = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (i === 0 || findLastIndex(clonedBoard.data.fenOptions.tag(\"dead\"), (b) => !b) === previousSideToMove) {\n\t\t\t\tnewMoveWrapper.metadata.currentFullMove = ++currentFullMove;\n\t\t\t}\n\t\t\tnewMoveWrapper.metadata.currentSideToMove = previousSideToMove = clonedBoard.data.sideToMove;\n\t\t\tconst results = clonedBoard.makeMove(moveData);\n\t\t\tfor (let i = 0; i < totalPlayers; i++) {\n\t\t\t\tif (results.checkmates[i]) {\n\t\t\t\t\tnewMoveWrapper.metadata.checkmates++;\n\t\t\t\t} else if (results.checks[i]) {\n\t\t\t\t\tnewMoveWrapper.metadata.checks++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const line of alternativeLines) {\n\t\t\t\tnewMoveWrapper.alternativeLines.push(traverse(line, currentFullMove, [...currentTimeOnClocks]));\n\t\t\t}\n\n\t\t\tif (moveWrapper.metadata.playerClock) {\n\t\t\t\tcurrentTimeOnClocks[previousSideToMove] -= moveWrapper.metadata.playerClock;\n\t\t\t}\n\t\t\tnewMoveWrapper.metadata = { ...moveWrapper.metadata };\n\t\t\tnewMoveWrapper.metadata.playerClock = currentTimeOnClocks[previousSideToMove];\n\t\t\tconst currentMove = clonedBoard.moves.getMove(newMoveWrapper.path);\n\t\t\tassertValidMove(currentMove);\n\t\t\tcurrentMove.metadata = newMoveWrapper.metadata;\n\t\t\tcurrentMove.comment = moveWrapper.comment;\n\t\t\tclonedBoard.moves.stringifyMove(currentMove, dimension);\n\t\t}\n\n\t\treturn moves;\n\t}\n\n\ttraverse(moves.moves);\n\treturn clonedBoard.moves;\n}\n\nexport function changeGameTermination(board: Board) {\n\tconst currentMove = board.moves.getMove([board.moves.moves.length - 1]);\n\tconst snapshot = board.moves.getBoardSnapshot(verifyValidMove(currentMove) ? currentMove : -1);\n\tassertNonUndefined(snapshot);\n\n\tif (snapshot.boardSnapshot.data.gameOver) {\n\t\tboard.gameData.termination = snapshot.boardSnapshot.data.gameOver;\n\t\tif (board.gameData.result) return;\n\t\tif (board.isTwoPlayer || board.gameType.type === VariantType.Teams) {\n\t\t\tconst currentSnapshot = board.createSnapshot();\n\t\t\tboard.loadSnapshot(snapshot.boardSnapshot);\n\t\t\tboard.gameData.result = board.data.getCurrentResult();\n\t\t\tboard.loadSnapshot(currentSnapshot);\n\t\t} else {\n\t\t\tconst currentResults: string[] = [];\n\t\t\tconst dead = board.data.fenOptions.tag(\"dead\"),\n\t\t\t\tresigned = board.data.fenOptions.tag(\"resigned\"),\n\t\t\t\twb = board.data.fenOptions.tag(\"wb\"),\n\t\t\t\tpoints = snapshot.boardSnapshot.data.points;\n\t\t\tfor (const color of colors) {\n\t\t\t\tif (dead[color] || resigned[color]) continue;\n\t\t\t\tcurrentResults.push(`${getPlayerNameFromColor(color, wb)}: ${points[color]}`);\n\t\t\t}\n\t\t\tboard.gameData.result = currentResults.join(\" – \");\n\t\t}\n\t}\n}\n","import \"reflect-metadata\";\nimport { Board } from \"@moveGeneration/Board/Board\";\nimport { totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport type { PieceStringObject } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport { PieceString } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport type { InternalMove, StripPieceStringObjects } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport {\n\tMoveWrapper,\n\tProcessSafeMoveWrapper,\n\tMove,\n\tMoveData,\n\tverifyStandardMove,\n\tMoveComponent,\n\tverifyDroppingMove,\n\tMoveTreeSnapshot,\n\tverifyRequiredMove\n} from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport { decorateClassWithVariants, VariantRulePublicProperties } from \"@moveGeneration/VariantRules/VariantRule\";\nimport type { VariantDataRules } from \"@moveGeneration/VariantRules/VariantRuleInterface\";\nimport { compareArrays } from \"@utils/ArrayUtils\";\nimport type { NumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { serializeBoard } from \"../utils/Tags/InputOutputProcessing\";\nimport { assertNonUndefined, createTuple, FunctionType, Tuple } from \"@client/ts/baseTypes\";\nimport type { GameBoardObjectSetProperties } from \"./GameBoardSlice\";\nimport { stringifyCoordinate } from \"@moveGeneration/Board/BoardInterface\";\nimport { changeGameTermination, validateMoveTree } from \"@moveGeneration/MoveTree/MoveTreeValidator\";\nimport { assertValidMove } from \"@moveGeneration/MoveTree/MoveTree\";\nimport { InsufficientMaterialConstructor } from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/InsufficientMaterialConstructor\";\nimport { InsufficientMaterialChecker } from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/InsufficientMaterialChecker\";\nimport * as StateSerializer from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/StateSerializer\";\nimport { deserializeInsufficientMaterialState } from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/StateSerializer\";\n\nexport const requiredDispatches: Array<keyof RequestManager> = [];\nexport const initialDispatches: Array<keyof RequestManager> = [];\nexport const dispatchSyncRecord: Partial<Record<keyof RequestManager, keyof GameBoardObjectSetProperties>> = {};\n\nfunction withWorkerResult() {\n\treturn function (_: RequestManager, propertyKey: string, descriptor: TypedPropertyDescriptor<FunctionType>) {\n\t\tconst originalMethod = descriptor.value;\n\t\tassertNonUndefined(originalMethod);\n\t\tdescriptor.value = function (...args: unknown[]) {\n\t\t\tpostMessage([propertyKey, originalMethod.apply(this, args)]);\n\t\t};\n\t};\n}\n\nfunction workerDataSync(type: \"required\" | \"initial\", gameObjectPropertySync: keyof GameBoardObjectSetProperties) {\n\treturn function (_: RequestManager, propertyKey: keyof RequestManager) {\n\t\tif (type === \"required\") {\n\t\t\tinitialDispatches.push(propertyKey);\n\t\t\trequiredDispatches.push(propertyKey);\n\t\t} else {\n\t\t\tinitialDispatches.push(propertyKey);\n\t\t}\n\t\tdispatchSyncRecord[propertyKey] = gameObjectPropertySync;\n\t};\n}\n\nclass RequestManager {\n\tprivate board!: Board;\n\tprivate initiallyAliveColors: NumericColor[] = [];\n\tprivate internalMoves: InternalMove[] = [];\n\tprivate legalMoves = new Map<string, MoveData[]>();\n\tprivate fogOfWarPerspective: NumericColor | false = false;\n\n\tprivate stripPieceStrings<T>(object: T): StripPieceStringObjects<T> {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn JSON.parse(JSON.stringify(object));\n\t}\n\n\tprivate generateInitiallyAliveColors() {\n\t\treturn this.board.data.fenOptions\n\t\t\t.tag(\"dead\")\n\t\t\t.map((d) => !d)\n\t\t\t.reduce<NumericColor[]>((p, n, i) => {\n\t\t\t\tif (n) {\n\t\t\t\t\treturn [...p, i];\n\t\t\t\t} else return p;\n\t\t\t}, []);\n\t}\n\n\tprivate generateCurrentMoves() {\n\t\t(this.internalMoves = this.board.getAllowedInternalMoves()), (this.legalMoves = new Map());\n\t\tfor (const piece of this.board.getPlayerPieces()[this.board.data.sideToMove]) {\n\t\t\tthis.legalMoves.set(stringifyCoordinate(piece), this.board.getLegalMoves(piece[0], piece[1]));\n\t\t}\n\t}\n\n\tconstruct(_variantName: string, pgn4: string) {\n\t\tthis.board = new Board(pgn4);\n\t\tthis.board = decorateClassWithVariants(this.board, Board, this.board.variantRules.boardDecorators);\n\t\tthis.generateInitiallyAliveColors();\n\n\t\tconst insufficientMaterialModule = new InsufficientMaterialConstructor(this.board, (state) => {\n\t\t\tthis.board.insufficientMaterialChecker = new InsufficientMaterialChecker(state, this.board);\n\t\t\tthis.board.moves = validateMoveTree(this.board, this.board.moves);\n\t\t\tthis.board.moves.currentMove = [-1];\n\t\t\tchangeGameTermination(this.board);\n\t\t\tthis.generateCurrentMoves();\n\n\t\t\tpostMessage([\"construct\", StateSerializer.serializeInsufficientMaterialState(state)]);\n\t\t});\n\t\tinsufficientMaterialModule.generateInsufficientMaterialState();\n\t\treturn StateSerializer.serializeInsufficientMaterialState(insufficientMaterialModule.state);\n\t}\n\n\t@withWorkerResult()\n\tconstructWithGeneratedData(pgn4: string, insufficientMaterialState: StateSerializer.SerializedInsufficientMaterialState) {\n\t\tthis.board = new Board(pgn4);\n\t\tthis.board = decorateClassWithVariants(this.board, Board, this.board.variantRules.boardDecorators);\n\t\tthis.generateInitiallyAliveColors();\n\n\t\tthis.board.insufficientMaterialChecker = new InsufficientMaterialChecker(\n\t\t\tdeserializeInsufficientMaterialState(insufficientMaterialState),\n\t\t\tthis.board\n\t\t);\n\t\tthis.board.moves = validateMoveTree(this.board, this.board.moves);\n\t\tthis.board.moves.currentMove = [-1];\n\t\tchangeGameTermination(this.board);\n\t\tthis.generateCurrentMoves();\n\t}\n\n\t@workerDataSync(\"required\", \"publicFENSettings\")\n\t@withWorkerResult()\n\tgetFENSettings() {\n\t\tconst board = this.board;\n\t\tconst royalCount = createTuple(0, totalPlayers);\n\t\tlet isCustomRoyals = false;\n\t\tfor (const row of this.board.board) {\n\t\t\tfor (const square of row) {\n\t\t\t\tif (square.isPiece() && square.piece === \"K\" && ++royalCount[square.color] > 1) {\n\t\t\t\t\tisCustomRoyals = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isCustomRoyals) break;\n\t\t}\n\n\t\tconst points: Tuple<number, typeof totalPlayers> = [...board.data.points];\n\t\treturn {\n\t\t\tsideToMove: board.data.sideToMove,\n\t\t\tpoints,\n\t\t\tisCustomRoyals,\n\t\t\tfenOptions: board.data.fenOptions.createSerializedState()\n\t\t};\n\t}\n\n\t@workerDataSync(\"initial\", \"initiallyAliveColors\")\n\t@withWorkerResult()\n\tgetInitiallyAliveColors() {\n\t\treturn this.initiallyAliveColors;\n\t}\n\n\t@workerDataSync(\"required\", \"moveTree\")\n\t@withWorkerResult()\n\tgetMoveTree() {\n\t\tconst traverse = (moves: MoveWrapper[], fullMoveCounter = 0): ProcessSafeMoveWrapper[] => {\n\t\t\tconst results: ProcessSafeMoveWrapper[] = [];\n\n\t\t\tfor (const moveWrapper of moves) {\n\t\t\t\tconst resultingWrapper: ProcessSafeMoveWrapper = {\n\t\t\t\t\talternativeLines: [],\n\t\t\t\t\tcomment: moveWrapper.comment,\n\t\t\t\t\tpath: moveWrapper.path.slice(),\n\t\t\t\t\tcachedNames: { ...moveWrapper.cachedNames },\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\tcurrentSideToMove: moveWrapper.metadata.currentSideToMove,\n\t\t\t\t\t\tplayerClock: moveWrapper.metadata.playerClock,\n\t\t\t\t\t\thighlightedArrows: moveWrapper.metadata.highlightedArrows,\n\t\t\t\t\t\thighlightedSquares: moveWrapper.metadata.highlightedSquares\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (moveWrapper.metadata.currentFullMove) resultingWrapper.metadata.currentFullMove = moveWrapper.metadata.currentFullMove;\n\n\t\t\t\tfor (const alternativeLine of moveWrapper.alternativeLines) {\n\t\t\t\t\tresultingWrapper.alternativeLines.push(traverse(alternativeLine, fullMoveCounter - 1));\n\t\t\t\t}\n\n\t\t\t\tresults.push(resultingWrapper);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t};\n\n\t\treturn traverse(this.board.moves.moves);\n\t}\n\n\t@withWorkerResult()\n\tloadSnapshotByPath(path: number[]) {\n\t\tlet snapshot: MoveTreeSnapshot;\n\t\tif (compareArrays(path, [-1])) {\n\t\t\tconst preliminarySnapshot = this.board.moves.getBoardSnapshot(-1);\n\t\t\tassertNonUndefined(preliminarySnapshot);\n\t\t\tsnapshot = preliminarySnapshot;\n\t\t} else {\n\t\t\tconst currentMove = this.board.moves.getMove(path);\n\t\t\tassertValidMove(currentMove);\n\t\t\tconst preliminarySnapshot = this.board.moves.getBoardSnapshot(currentMove);\n\t\t\tif (!preliminarySnapshot) return false;\n\t\t\tsnapshot = preliminarySnapshot;\n\t\t}\n\n\t\tthis.board.loadSnapshot(snapshot.boardSnapshot);\n\t\tthis.board.moves.currentMove = [...path];\n\t\tthis.generateCurrentMoves();\n\n\t\treturn true;\n\t}\n\n\tprivate verifyNextChainedMovesAreDeleted(\n\t\tmove: Partial<StripPieceStringObjects<MoveComponent>>\n\t): move is StripPieceStringObjects<MoveComponent> & { nextChainedMoves: never } {\n\t\treturn !(\"nextChainedMoves\" in move);\n\t}\n\n\tprivate convertStrippedMoveToNormal(move: StripPieceStringObjects<Move>): Move {\n\t\tconst newMove: MoveComponent[] = [];\n\t\tfor (const moveComponent of move) {\n\t\t\tdelete moveComponent.nextChainedMoves;\n\t\t\tif (!this.verifyNextChainedMovesAreDeleted(moveComponent)) throw new Error(\"Could not delete nextChainedMoves in move component\");\n\n\t\t\tif (verifyStandardMove(moveComponent)) {\n\t\t\t\tnewMove.push({ ...moveComponent, promotion: moveComponent.promotion?.map((p) => PieceString.fromObjectToClass(p)) });\n\t\t\t} else if (verifyDroppingMove(moveComponent)) {\n\t\t\t\tnewMove.push({ ...moveComponent, piece: PieceString.fromObjectToClass(moveComponent.piece) });\n\t\t\t} else newMove.push(moveComponent);\n\t\t}\n\n\t\tif (!verifyRequiredMove(newMove)) throw new Error(\"Supplied move object had 0 move components\");\n\t\treturn newMove;\n\t}\n\n\t@withWorkerResult()\n\tmakeMove(passedMove: StripPieceStringObjects<Move>) {\n\t\tconst board = this.board,\n\t\t\tmove = this.convertStrippedMoveToNormal(passedMove);\n\t\tboard.moves.augmentMoveWithMetadata({\n\t\t\tmove,\n\t\t\tboard,\n\t\t\tmakeMoveFunction: () => {\n\t\t\t\treturn board.makeMove(move);\n\t\t\t}\n\t\t});\n\n\t\tthis.generateCurrentMoves();\n\t}\n\n\t@workerDataSync(\"required\", \"serializedPGN\")\n\t@withWorkerResult()\n\tserializeBoardToPGN() {\n\t\treturn serializeBoard(this.board);\n\t}\n\n\t@withWorkerResult()\n\tgetDroppingMoves(pieceString: PieceStringObject) {\n\t\tif (this.board.data.gameOver) return [];\n\t\treturn this.stripPieceStrings(this.board.getDroppingMoves(PieceString.fromObjectToClass(pieceString)));\n\t}\n\n\t@withWorkerResult()\n\tgetLegalMoves(i: number, j: number) {\n\t\tif (this.board.data.gameOver) return [];\n\t\treturn this.stripPieceStrings(this.legalMoves.get(stringifyCoordinate([i, j])) ?? this.board.getLegalMoves(i, j));\n\t}\n\n\t@workerDataSync(\"required\", \"allowedInternalMoves\")\n\t@withWorkerResult()\n\tgetInternalMoves() {\n\t\tif (this.board.data.gameOver) return [];\n\t\treturn this.stripPieceStrings(this.internalMoves);\n\t}\n\n\t@workerDataSync(\"initial\", \"variantDataRules\")\n\t@withWorkerResult()\n\tgetVariantData() {\n\t\treturn this.stripPieceStrings(this.board.variantData);\n\t}\n\n\t@workerDataSync(\"required\", \"boardSquares\")\n\t@withWorkerResult()\n\tgetBoard() {\n\t\treturn this.board.board.map((r) => r.map((p) => p.toObject()));\n\t}\n\n\t@workerDataSync(\"required\", \"gameData\")\n\t@withWorkerResult()\n\tgetGameData() {\n\t\tconst newGameData = { ...this.board.gameData };\n\t\tif (typeof newGameData.date === \"object\") {\n\t\t\tnewGameData.date = newGameData.date.toUTCString();\n\t\t}\n\t\treturn newGameData;\n\t}\n\n\t@workerDataSync(\"required\", \"currentMove\")\n\t@withWorkerResult()\n\tgetCurrentMove() {\n\t\treturn this.board.moves.currentMove;\n\t}\n\n\t@workerDataSync(\"initial\", \"variantRules\")\n\t@withWorkerResult()\n\tgetVariantRules() {\n\t\tconst resultingRules: Array<VariantRulePublicProperties<keyof VariantDataRules>> = [];\n\t\tfor (const variantRule of this.board.variantRules) {\n\t\t\tresultingRules.push(variantRule.getPublicProperties());\n\t\t}\n\n\t\treturn resultingRules;\n\t}\n\n\t@workerDataSync(\"initial\", \"variantType\")\n\t@withWorkerResult()\n\tgetVariantType() {\n\t\treturn this.board.gameType.type;\n\t}\n\n\t@withWorkerResult()\n\tdeleteMove(path: number[]) {\n\t\tif (this.board.moves.moves.length !== 0) this.board.moves.deleteMove(path);\n\t}\n\n\t@withWorkerResult()\n\tplayPreferredBotMove() {\n\t\tif (this.board.data.getRealPlayers() <= 1) return;\n\t\tconst legalMoves: MoveComponent[] = [];\n\t\tfor (const piece of this.board.getPlayerPieces()[this.board.data.sideToMove]) {\n\t\t\tlegalMoves.push(...(this.legalMoves.get(stringifyCoordinate(piece)) ?? this.board.getLegalMoves(piece[0], piece[1])));\n\t\t}\n\t\t// TODO Pick strongest piece\n\t\tlegalMoves.push(...this.board.preGeneratedAttacks[this.board.data.sideToMove].pieceDrops.piece);\n\t\tlegalMoves.push(...this.board.preGeneratedAttacks[this.board.data.sideToMove].pieceDrops.pawn);\n\t\tlegalMoves.push(...this.internalMoves);\n\n\t\tconst algorithm = this.board.data.fenOptions.getDefaultZombieAlgorithm(this.board.data.sideToMove);\n\t\tconst moves = algorithm.evaluate(legalMoves, this.board);\n\t\treturn this.stripPieceStrings(algorithm.pickPreferredMove(moves));\n\t}\n\n\t@withWorkerResult()\n\tchangeFogPerspective() {\n\t\tif (!this.board.variantData.fogOfWar || this.board.data.getRealPlayers() <= 1) return this.fogOfWarPerspective;\n\t\tif (this.fogOfWarPerspective === false) {\n\t\t\tthis.fogOfWarPerspective = this.board.data.sideToMove;\n\t\t} else {\n\t\t\tconst newPerspective = this.board.data.nextTurn(this.fogOfWarPerspective);\n\t\t\tif (newPerspective === this.board.data.sideToMove) {\n\t\t\t\tthis.fogOfWarPerspective = false;\n\t\t\t} else this.fogOfWarPerspective = newPerspective;\n\t\t}\n\n\t\treturn this.fogOfWarPerspective;\n\t}\n\n\t@workerDataSync(\"required\", \"squareVisibility\")\n\t@withWorkerResult()\n\tgetSquareVisibility() {\n\t\tif (this.fogOfWarPerspective === false) {\n\t\t\treturn this.board.getSquareVisibility();\n\t\t} else {\n\t\t\tconst sideToMove = this.board.data.sideToMove;\n\t\t\tthis.board.data.sideToMove = this.fogOfWarPerspective;\n\t\t\tconst squareVisibility = this.board.getSquareVisibility();\n\t\t\tthis.board.data.sideToMove = sideToMove;\n\t\t\treturn squareVisibility;\n\t\t}\n\t}\n}\n\nexport type BoardWorkerRequest = keyof RequestManager;\nexport interface BoardWorkerRequestBody<K extends BoardWorkerRequest> {\n\trequestName: K;\n\tparameters: BoardWorkerArguments<K>;\n}\nexport type PublicFENSettings = ReturnType<RequestManager[\"getFENSettings\"]>;\nexport type BoardWorkerReturnType<K extends BoardWorkerRequest> = [K, ReturnType<RequestManager[K]>];\nexport type BoardWorkerArguments<K extends BoardWorkerRequest> = Parameters<RequestManager[K]>;\n\nconst requestManager = new RequestManager();\nself.onmessage = <K extends BoardWorkerRequest>(e: MessageEvent<BoardWorkerRequestBody<K>>) => {\n\tif (!(e.data.requestName in RequestManager.prototype)) return;\n\tconst method: FunctionType = RequestManager.prototype[e.data.requestName];\n\tmethod.apply(requestManager, e.data.parameters);\n};\n","import { createTuple } from \"@client/ts/baseTypes\";\nimport type { PlayerBooleanTuple } from \"@moveGeneration/Board/Board\";\nimport { totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport type { NumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { initializeBoardSquares } from \"../../BaseInterfaces\";\nimport type { FENData } from \"../FENData/FENData\";\nimport { emptyPieceString, PieceString } from \"../GameInformation/GameUnits/PieceString\";\nimport { decorateClassWithVariants, VariantRule } from \"../VariantRules/VariantRule\";\nimport type { VariantDataRules } from \"../VariantRules/VariantRuleInterface\";\nimport { copyVariantRules } from \"../VariantRules/VariantRuleSetup\";\nimport { PieceControl } from \"./PieceControl\";\nimport { PieceLetter, pieceControlConfigSettings, ControlConfiguration } from \"./PieceControlInterface\";\n\nexport class PieceControlConfigurator {\n\tprivate readonly _control: PieceControl;\n\tprivate readonly _isConfigured: ControlConfiguration;\n\tconstructor(control: PieceControl) {\n\t\tthis._control = control;\n\t\tthis._isConfigured = {\n\t\t\tcoordinates: [0, 0],\n\t\t\tboard: initializeBoardSquares(() => emptyPieceString),\n\t\t\timmunePieces: createTuple(false, totalPlayers),\n\t\t\tcolor: 0\n\t\t};\n\t}\n\n\tsetCoordinates(x: number, y: number) {\n\t\tthis._isConfigured.coordinates = [x, y];\n\t\treturn this;\n\t}\n\tsetBaseImmunePieces(immune: PlayerBooleanTuple) {\n\t\tthis._isConfigured.immunePieces = immune;\n\t\treturn this;\n\t}\n\tsetColor(color: NumericColor) {\n\t\tthis._isConfigured.color = color;\n\t\treturn this;\n\t}\n\tsetBoard(board: PieceString[][]) {\n\t\tthis._isConfigured.board = board;\n\t\treturn this;\n\t}\n\n\tconstructPieceControl(): PieceControl {\n\t\tthis._control.configure(this._isConfigured);\n\t\treturn this._control;\n\t}\n}\n\nexport class PieceControlBuilder {\n\tprivate readonly _generalConfig: {\n\t\tfenData?: FENData;\n\t\tvariantRules?: Array<VariantRule<typeof PieceControl, keyof VariantDataRules>>;\n\t};\n\tconstructor() {\n\t\tthis._generalConfig = {};\n\t}\n\n\tsetFENData(fenData: FENData) {\n\t\tthis._generalConfig.fenData = fenData;\n\t}\n\tsetVariantRules<T extends VariantRule<typeof PieceControl, keyof VariantDataRules>>(rules: T[]) {\n\t\tthis._generalConfig.variantRules = rules;\n\t}\n\tcreatePieceControlWrap(letter: PieceLetter): () => PieceControlConfigurator {\n\t\tconst information = pieceControlConfigSettings[letter];\n\t\tconst control = new information.construct();\n\t\tif (!this._generalConfig.fenData || !this._generalConfig.variantRules) throw new Error(\"PieceControl builder setup is not complete\");\n\t\tcontrol.setFENData(this._generalConfig.fenData);\n\n\t\tconst decoratedControl = decorateClassWithVariants<typeof PieceControl>(\n\t\t\tcontrol,\n\t\t\tPieceControl,\n\t\t\tcopyVariantRules(this._generalConfig.variantRules)\n\t\t);\n\n\t\treturn () => {\n\t\t\treturn new PieceControlConfigurator(decoratedControl);\n\t\t};\n\t}\n}\n","import { assertNonUndefined, createTuple, createTupleFromCallback, Tuple } from \"../../../baseTypes\";\nimport { BoardSquares, Cloneable, initializeBoardSquares, Memento } from \"../../BaseInterfaces\";\nimport { createMoveTree, MoveTreeInterface } from \"../MoveTree/MoveTree\";\nimport {\n\tcreateBaseMoveWrapper,\n\tDroppingMove,\n\tInternalMove,\n\tInternalMoveSignature,\n\tMove,\n\tMoveData,\n\tSpecialMove\n} from \"../MoveTree/MoveTreeInterface\";\nimport { FENData } from \"../FENData/FENData\";\nimport type { PostMoveResults } from \"../FENData/FENDataInterface\";\nimport { boardDimension, colors, GameData, totalPlayers } from \"../GameInformation/GameData\";\nimport { NumericColor, Coordinate, nonPlayablePieces } from \"../GameInformation/GameUnits/GameUnits\";\nimport { createPieceFromData, deadColorIndex, pawnPieceString, PieceString, wallPieceString } from \"../GameInformation/GameUnits/PieceString\";\nimport { PieceControlConfigurator, PieceControlBuilder } from \"../PieceControl/PieceControlBuilder\";\nimport { initPieceControlDeclarations } from \"../PieceControl/PieceControlDeclarations\";\nimport { AttackType, pieceControlConfigSettings, PieceControlGeneratedMove, PieceLetter } from \"../PieceControl/PieceControlInterface\";\nimport { decorateClassWithVariants } from \"../VariantRules/VariantRule\";\nimport { copyVariantRules, validateVariantRules, VariantRuleParsingTypes } from \"../VariantRules/VariantRuleSetup\";\nimport {\n\tDisplaySettings,\n\tcreateGameTypeSettings,\n\tcreateComplexMoveLegalityTracker,\n\tBoardSnapshot,\n\tcreateBasePreGeneratedAttacks,\n\tcompareCoordinates,\n\tstringifyCoordinate,\n\tSpecialMoveGenerationSettings\n} from \"./BoardInterface\";\nimport type { VariantDataRules, VariantHandlerTarget } from \"../VariantRules/VariantRuleInterface\";\nimport { copyClass } from \"@client/ts/utils/ObjectUtils\";\nimport { parsePGN4 } from \"../../utils/Tags/InputOutputProcessing\";\nimport { InsufficientMaterialChecker } from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/InsufficientMaterialChecker\";\n\ninitPieceControlDeclarations();\n\nexport const baseImmunes = createTuple(false, totalPlayers);\nexport type PlayerBooleanTuple = typeof baseImmunes;\n\nexport class Board implements VariantHandlerTarget<Board>, Cloneable<Board>, Memento<BoardSnapshot> {\n\treadonly controls: Record<PieceLetter, () => PieceControlConfigurator> = {};\n\tdata: FENData;\n\tmoves: MoveTreeInterface;\n\tpreGeneratedAttacks = createTupleFromCallback(createBasePreGeneratedAttacks, totalPlayers);\n\tboard: BoardSquares<PieceString>;\n\tisComplexSetup = createComplexMoveLegalityTracker();\n\treadonly gameData: GameData;\n\treadonly gameType = createGameTypeSettings();\n\treadonly variantRules: VariantRuleParsingTypes;\n\treadonly variantData: VariantDataRules;\n\treadonly isTwoPlayer: boolean;\n\tinsufficientMaterialChecker?: InsufficientMaterialChecker;\n\n\t__baseClass: Board;\n\tinitDecoratorSettings() {\n\t\t/* no-op */\n\t}\n\n\t/*---------------------------------- INITIALIZATION -----------------------------------------*/\n\tconstructor(pgn4: string) {\n\t\tthis.__baseClass = this;\n\n\t\tconst parsingResults = parsePGN4(pgn4);\n\t\tthis.gameType.type = parsingResults.gameType;\n\t\tthis.variantRules = parsingResults.variantRules;\n\t\tthis.gameData = parsingResults.gameData;\n\t\tthis.board = parsingResults.board;\n\t\tthis.data = parsingResults.fenData;\n\t\tthis.data.injectBoard(this);\n\t\tthis.data = decorateClassWithVariants<typeof FENData>(this.data, FENData, this.variantRules.fenDataDecorators);\n\t\tthis.variantData = parsingResults.variantRuleData;\n\t\tthis.variantRules = validateVariantRules(this);\n\t\tthis.isTwoPlayer = this.data.getRealPlayers() === 2;\n\t\tthis.initPieceControls(parsingResults.pieceSet);\n\n\t\tthis.moves = createMoveTree(this.createSnapshot());\n\t\tthis.moves.moves = parsingResults.moves;\n\t\tthis.pregenerateAttacks();\n\t}\n\n\tinitPieceControls(pieces: Set<PieceLetter>) {\n\t\tif (pieces.size === 0) return;\n\n\t\tconst builder = new PieceControlBuilder();\n\t\tbuilder.setFENData(this.data);\n\t\tbuilder.setVariantRules(this.variantRules.pieceControlDecorators);\n\n\t\tfor (const piece of pieces) {\n\t\t\tconst pieceControlConfigurator = builder.createPieceControlWrap(piece);\n\t\t\tthis.controls[piece] = pieceControlConfigurator;\n\t\t}\n\t}\n\n\tgetSquareVisibility(): BoardSquares<DisplaySettings[]> {\n\t\treturn initializeBoardSquares(() => []);\n\t}\n\n\tcreateSnapshot(): BoardSnapshot {\n\t\treturn {\n\t\t\tdata: this.data.createSnapshot(),\n\t\t\tboard: this.board.map((a) => [...a]),\n\t\t\tisComplexSetup: Object.assign({}, this.isComplexSetup)\n\t\t};\n\t}\n\n\tloadSnapshot(snapshot: BoardSnapshot) {\n\t\tthis.isComplexSetup = { ...snapshot.isComplexSetup };\n\t\tthis.data.loadSnapshot(snapshot.data);\n\t\tthis.board = snapshot.board.map((row) => [...row]);\n\t\tthis.pregenerateAttacks();\n\t\tthis.runComplexLegalityEvaluationChecks();\n\t}\n\n\tcreateClone(): Board {\n\t\tlet targetObject = copyClass(this.__baseClass, Board);\n\t\ttargetObject.board = this.board.map((a) => [...a]); // PieceStrings are immutable\n\t\ttargetObject.isComplexSetup = Object.assign({}, this.isComplexSetup);\n\t\ttargetObject.preGeneratedAttacks = createTupleFromCallback(createBasePreGeneratedAttacks, totalPlayers);\n\t\ttargetObject.data = this.data.createClone();\n\t\ttargetObject = decorateClassWithVariants<typeof Board>(\n\t\t\ttargetObject,\n\t\t\tBoard,\n\t\t\tcopyVariantRules(this.__baseClass.variantRules.boardDecorators)\n\t\t);\n\t\ttargetObject.data.injectBoard(targetObject);\n\t\ttargetObject.data = decorateClassWithVariants<typeof FENData>(\n\t\t\ttargetObject.data,\n\t\t\tFENData,\n\t\t\tcopyVariantRules(this.__baseClass.variantRules.fenDataDecorators)\n\t\t);\n\t\tconst presumedPieceLetters = new Set<PieceLetter>();\n\t\tlet letter: PieceLetter;\n\t\tfor (letter in this.controls) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(this.controls, letter)) {\n\t\t\t\tpresumedPieceLetters.add(letter);\n\t\t\t}\n\t\t}\n\t\ttargetObject.initPieceControls(presumedPieceLetters);\n\t\ttargetObject.pregenerateAttacks();\n\n\t\treturn targetObject;\n\t}\n\n\t/*---------------------------------- INITIALIZATION -----------------------------------------*/\n\t/*-------------------------------------------------------------------------------------------*/\n\t/*------------------------------------- UTILITIES -------------------------------------------*/\n\n\tisKingInCheck(baseColor: NumericColor, fenRoyal = this.data.fenOptions.tag(\"royal\")): boolean {\n\t\tconst royal = fenRoyal[baseColor];\n\t\tif (!royal || this.data.fenOptions.tag(\"dead\")[baseColor]) return false;\n\t\tconst coordinates = royal;\n\t\treturn !!(\n\t\t\tthis.preGeneratedAttacks[baseColor].slidingPieces[coordinates[0]][coordinates[1]] ||\n\t\t\tthis.preGeneratedAttacks[baseColor].hoppingPieces[coordinates[0]][coordinates[1]]\n\t\t);\n\t}\n\n\tgetPlayerPieces(): Tuple<Coordinate[], typeof totalPlayers> {\n\t\tconst playerPieces: Tuple<Coordinate[], typeof totalPlayers> = [[], [], [], []];\n\n\t\tfor (let i = 0; i < boardDimension; i++) {\n\t\t\tfor (let j = 0; j < boardDimension; j++) {\n\t\t\t\tconst square = this.board[i][j];\n\t\t\t\tif (square.isEmpty()) continue;\n\t\t\t\tconst color = square.color;\n\t\t\t\tif (color !== deadColorIndex) playerPieces[color].push([i, j]);\n\t\t\t}\n\t\t}\n\n\t\treturn playerPieces;\n\t}\n\n\tgetCheckmatesAndStalemates() {\n\t\tconst dead = this.data.fenOptions.tag(\"dead\"),\n\t\t\troyal = this.data.fenOptions.tag(\"royal\");\n\n\t\tconst kingChecks = createTuple(false, totalPlayers);\n\t\tconst legalMoves = createTuple(false, totalPlayers);\n\t\tconst playerPieces = this.getPlayerPieces();\n\t\tlegalMoves[this.data.sideToMove] = true;\n\n\t\tfor (const color of colors) {\n\t\t\tif (dead[color]) continue;\n\t\t\tconst playerArmy = playerPieces[color];\n\t\t\tif (this.isKingInCheck(color)) {\n\t\t\t\tkingChecks[color] = true;\n\t\t\t}\n\t\t\tfor (const piece of playerArmy) {\n\t\t\t\tif (this.getLegalMoves(piece[0], piece[1], color).length) {\n\t\t\t\t\tlegalMoves[color] = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!legalMoves[color]) {\n\t\t\t\tif (this.preGeneratedAttacks[color].pieceDrops.pawn.length || this.preGeneratedAttacks[color].pieceDrops.piece.length) {\n\t\t\t\t\tlegalMoves[color] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst kingCaptures = royal.map((r, i) =>\n\t\t\t!dead[i] && r ? this.board[r[0]][r[1]].isEmpty() || this.board[r[0]][r[1]].color !== i : false\n\t\t);\n\t\treturn {\n\t\t\tcheckmates: legalMoves.map((move, i) => kingCaptures[i] || (!move && kingChecks[i])),\n\t\t\tstalemates: legalMoves.map((move, i) => !move && !kingChecks[i]),\n\t\t\tchecks: kingChecks\n\t\t};\n\t}\n\n\tprivate runComplexLegalityEvaluationChecks(): void {\n\t\tif (this.isComplexSetup.hasComplexRules) return;\n\t\tfor (let i = 0; i < boardDimension; i++) {\n\t\t\tfor (let j = 0; j < boardDimension; j++) {\n\t\t\t\tconst square = this.board[i][j];\n\t\t\t\tif (square.isPiece() && pieceControlConfigSettings[square.piece].moveGenerationSettings.isComplex) {\n\t\t\t\t\tthis.isComplexSetup.hasComplexPieces = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetCurrentChecks(sideToMove = this.data.sideToMove) {\n\t\tconst dead = this.data.fenOptions.tag(\"dead\"),\n\t\t\tresigned = this.data.fenOptions.tag(\"resigned\"),\n\t\t\troyal = this.data.fenOptions.tag(\"royal\");\n\n\t\tconst playerRoyals = royal.map((r, i) => (r && !dead[i] && !resigned[i] ? r : null));\n\t\tconst attackingCoordinates = createTupleFromCallback<string[], typeof totalPlayers>(() => [], totalPlayers);\n\t\tfor (const [startingCoordinate, attackList] of this.preGeneratedAttacks[sideToMove].pieceMovements) {\n\t\t\tfor (const attack of attackList) {\n\t\t\t\tfor (const color of colors) {\n\t\t\t\t\tif (color === sideToMove) continue;\n\t\t\t\t\tconst royal = playerRoyals[color];\n\t\t\t\t\tif (royal && compareCoordinates(royal, attack.move)) {\n\t\t\t\t\t\tattackingCoordinates[color].push(startingCoordinate);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn attackingCoordinates;\n\t}\n\n\t/*------------------------------------- UTILITIES -------------------------------------------*/\n\t/*-------------------------------------------------------------------------------------------*/\n\t/*---------------------------------------- API ----------------------------------------------*/\n\n\tmakeMove(move: Move, ignoreNextMoves = false): PostMoveResults {\n\t\tlet returnValues!: PostMoveResults;\n\t\tconst sideToMove = this.data.sideToMove,\n\t\t\tpregeneratedAttacks = this.preGeneratedAttacks;\n\n\t\tfor (let i = 0; i < move.length; i++) {\n\t\t\tif (i === move.length - 1) {\n\t\t\t\treturnValues = this.data.affectOptions(move[i], {\n\t\t\t\t\tignoreCheckmateChecks: ignoreNextMoves,\n\t\t\t\t\tignoreNextTurn: false\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.data.affectOptions(move[i], {\n\t\t\t\t\tignoreCheckmateChecks: ignoreNextMoves,\n\t\t\t\t\tignoreNextTurn: true\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tthis.runComplexLegalityEvaluationChecks();\n\t\tif (ignoreNextMoves) return returnValues;\n\n\t\tconst path = this.moves.currentMove.slice();\n\t\tpath[path.length - 1]++;\n\t\tthis.moves.currentMove = this.moves.setNewMove({\n\t\t\tmove: createBaseMoveWrapper({ path, moveData: move }),\n\t\t\tsnapshot: {\n\t\t\t\tboardSnapshot: this.createSnapshot(),\n\t\t\t\tpregeneratedAttacks: pregeneratedAttacks[sideToMove]\n\t\t\t},\n\t\t\tfenDataString: this.moves.constructPreliminaryHashString(this)\n\t\t});\n\t\tif (this.data.gameOver || this.data.getRealPlayers() === 1) return returnValues;\n\t\tif (returnValues.checkmates[this.data.sideToMove]) {\n\t\t\treturnValues = this.makeMove([{ type: InternalMoveSignature.TeamsCheckmate }], true);\n\t\t} else if (returnValues.stalemates[this.data.sideToMove]) {\n\t\t\treturnValues = this.makeMove([{ type: InternalMoveSignature.Stalemate }]);\n\t\t}\n\n\t\treturn returnValues;\n\t}\n\n\tpregenerateAttacks(exclusiveSideToMoveGeneration: NumericColor | false = false): void {\n\t\tconst royal = this.data.fenOptions.tag(\"royal\");\n\n\t\tthis.preGeneratedAttacks = createTupleFromCallback(createBasePreGeneratedAttacks, totalPlayers);\n\t\tthis.getPlayerPieces().forEach((army, armyColor) => {\n\t\t\tif (exclusiveSideToMoveGeneration !== false && exclusiveSideToMoveGeneration !== armyColor) return;\n\t\t\tconst preGeneratedAttacks = this.preGeneratedAttacks[armyColor];\n\t\t\tfor (const coordinate of army) {\n\t\t\t\tconst square = this.board[coordinate[0]][coordinate[1]];\n\t\t\t\tif (!square.isPiece()) continue;\n\t\t\t\tconst color = square.color;\n\t\t\t\tconst letter = square.piece;\n\t\t\t\tconst controlBuilder = this.controls[letter]().setColor(color).setCoordinates(coordinate[0], coordinate[1]).setBoard(this.board);\n\t\t\t\tconst setting = pieceControlConfigSettings[square.piece];\n\t\t\t\tconst resultingMoves: PieceControlGeneratedMove[] = [];\n\n\t\t\t\tlet control = controlBuilder.setBaseImmunePieces(this.gameType.getBaseColors(color)).constructPieceControl();\n\t\t\t\tresultingMoves.push(...control.getPseudoLegalMoves());\n\n\t\t\t\tcontrol = controlBuilder.setBaseImmunePieces(baseImmunes).constructPieceControl();\n\t\t\t\tif (setting.moveGenerationSettings.isJumping) {\n\t\t\t\t\tconst attacks = control.rayGenJumpingAttacks();\n\t\t\t\t\tfor (const { move: attack } of attacks) {\n\t\t\t\t\t\tfor (const color of colors) {\n\t\t\t\t\t\t\tif (color === armyColor) continue;\n\t\t\t\t\t\t\tconst preGeneratedAttacks = this.preGeneratedAttacks[color];\n\t\t\t\t\t\t\tpreGeneratedAttacks.hoppingPieces[attack[0]][attack[1]]++;\n\t\t\t\t\t\t\tpreGeneratedAttacks.hoppingPieceLines.push([coordinate, attack]);\n\t\t\t\t\t\t\tconst l = preGeneratedAttacks.attackingColors[attack[0]][attack[1]];\n\t\t\t\t\t\t\tif (~l && preGeneratedAttacks.attackingColors[attack[0]][attack[1]] !== color + 1) {\n\t\t\t\t\t\t\t\tpreGeneratedAttacks.attackingColors[attack[0]][attack[1]] = l === 0 ? 1 + color : -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (setting.moveGenerationSettings.isSliding) {\n\t\t\t\t\tconst attacks = control.rayGenSlidingAttacks();\n\t\t\t\t\tfor (const attack of attacks) {\n\t\t\t\t\t\tfor (const color of colors) {\n\t\t\t\t\t\t\tif (color === armyColor) continue;\n\t\t\t\t\t\t\tconst preGeneratedAttacks = this.preGeneratedAttacks[color];\n\n\t\t\t\t\t\t\tfor (const { move: subAttack } of attack) {\n\t\t\t\t\t\t\t\tpreGeneratedAttacks.slidingPieces[subAttack[0]][subAttack[1]]++;\n\t\t\t\t\t\t\t\tconst l = preGeneratedAttacks.attackingColors[subAttack[0]][subAttack[1]];\n\t\t\t\t\t\t\t\tif (~l && preGeneratedAttacks.attackingColors[subAttack[0]][subAttack[1]] !== color + 1) {\n\t\t\t\t\t\t\t\t\tpreGeneratedAttacks.attackingColors[subAttack[0]][subAttack[1]] = l === 0 ? 1 + color : -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (attack.length !== 0) {\n\t\t\t\t\t\t\t\tpreGeneratedAttacks.slidingPiecesLines.push([coordinate, attack.map((m) => m.move)]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst coordinateArray: Coordinate[] = [];\n\t\t\t\t\t\t\t\tpreGeneratedAttacks.slidingPiecesLines.push([coordinate, coordinateArray]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rayGen = control.rayGenSlidingAttacks(AttackType.RayTraceLimited);\n\t\t\t\t\tfor (const attack of rayGen) {\n\t\t\t\t\t\tfor (const color of colors) {\n\t\t\t\t\t\t\tif (color === armyColor) continue;\n\t\t\t\t\t\t\tconst preGeneratedAttacks = this.preGeneratedAttacks[color];\n\n\t\t\t\t\t\t\tif (attack.length !== 0) {\n\t\t\t\t\t\t\t\tlet isRoyalOnLine = false;\n\t\t\t\t\t\t\t\tconst resultingAttack: Coordinate[] = [];\n\t\t\t\t\t\t\t\tfor (const { move } of attack) {\n\t\t\t\t\t\t\t\t\tresultingAttack.push(move);\n\t\t\t\t\t\t\t\t\tif (isRoyalOnLine) {\n\t\t\t\t\t\t\t\t\t\tpreGeneratedAttacks.slidingPieces[move[0]][move[1]]++;\n\t\t\t\t\t\t\t\t\t} else if (compareCoordinates(royal[color] ?? [-1, -1], move)) {\n\t\t\t\t\t\t\t\t\t\tisRoyalOnLine = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpreGeneratedAttacks.slidingPiecesRayTracing.push([coordinate, attack.map((m) => m.move)]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpreGeneratedAttacks.slidingPiecesLines.push([coordinate, []]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpreGeneratedAttacks.pieceMovements.set(stringifyCoordinate(coordinate), resultingMoves);\n\t\t\t}\n\n\t\t\tpreGeneratedAttacks.pieceDrops.piece = this.getDroppingMoves(createPieceFromData(armyColor, nonPlayablePieces.wall));\n\t\t\tpreGeneratedAttacks.pieceDrops.pawn = this.getDroppingMoves(createPieceFromData(armyColor, pawnPieceString.piece));\n\t\t});\n\t}\n\n\tisSetupComplex() {\n\t\treturn this.isComplexSetup.hasComplexPieces || this.isComplexSetup.hasComplexRules || this.data.isComplexEvaluation();\n\t}\n\n\tisTheMoveLegal(color: NumericColor, moveData: MoveData, isSeirawanDrop = false): boolean {\n\t\tconst royals = this.data.fenOptions.tag(\"royal\");\n\t\tconst {\n\t\t\tstartCoordinates: [pieceI, pieceJ],\n\t\t\tendCoordinates: [attackI, attackJ]\n\t\t} = moveData;\n\t\tconst royal = royals[color];\n\t\tif (!this.board[attackI][attackJ].isEmpty() && royal && attackI === royal[0] && attackJ === royal[1]) return false;\n\n\t\tif (this.isSetupComplex()) {\n\t\t\tconst snapshot = this.createSnapshot();\n\t\t\tconst moveArray: Move = [\n\t\t\t\t{\n\t\t\t\t\tstartCoordinates: [pieceI, pieceJ],\n\t\t\t\t\tendCoordinates: [attackI, attackJ]\n\t\t\t\t}\n\t\t\t];\n\t\t\tif (isSeirawanDrop) moveArray.push({ piece: wallPieceString, endCoordinates: [pieceI, pieceJ] });\n\t\t\tconst { checks, checkmates } = this.makeMove(moveArray, true);\n\n\t\t\tlet isKingInCheck = checks[color] || checkmates[color];\n\t\t\tif (!isKingInCheck) {\n\t\t\t\tthis.pregenerateAttacks(color);\n\t\t\t\tisKingInCheck = this.isKingInCheck(color);\n\t\t\t}\n\t\t\tthis.loadSnapshot(snapshot);\n\t\t\treturn !isKingInCheck;\n\t\t} else {\n\t\t\tconst [royalI, royalJ] = royal ?? [null, null];\n\t\t\tconst preGeneratedAttacks = this.preGeneratedAttacks[color];\n\t\t\tif (royalI === null) return true;\n\t\t\tconst isRoyalMove = royalI === pieceI && royalJ === pieceJ;\n\t\t\tconst attackers = preGeneratedAttacks.hoppingPieces[royalI][royalJ] + preGeneratedAttacks.slidingPieces[royalI][royalJ];\n\t\t\tconst targetSafety = preGeneratedAttacks.slidingPieces[attackI][attackJ] + preGeneratedAttacks.hoppingPieces[attackI][attackJ] === 0;\n\t\t\tconst legalitySettings: { canKingCapture: number | undefined } = {\n\t\t\t\tcanKingCapture: undefined\n\t\t\t};\n\n\t\t\tfor (const kingCaptureColor of colors) {\n\t\t\t\tconst royal = royals[kingCaptureColor];\n\t\t\t\tif (kingCaptureColor !== color && royal && royal[0] === attackI && royal[1] === attackJ) {\n\t\t\t\t\tconst royalDefendedSquare = preGeneratedAttacks.attackingColors[royal[1]][royal[0]];\n\t\t\t\t\tif (\n\t\t\t\t\t\t(royalDefendedSquare === kingCaptureColor + 1 || royalDefendedSquare === 0) &&\n\t\t\t\t\t\t(isRoyalMove || preGeneratedAttacks.attackingColors[royalI][royalJ] === kingCaptureColor + 1)\n\t\t\t\t\t) {\n\t\t\t\t\t\tlegalitySettings.canKingCapture = kingCaptureColor + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!this.gameType.isFFA() && legalitySettings.canKingCapture !== undefined) return true;\n\n\t\t\tfor (const [attackingPiece, attackLine] of preGeneratedAttacks.slidingPiecesRayTracing) {\n\t\t\t\tlet isPieceUnderAttack = false,\n\t\t\t\t\tisRoyalUnderAttack = false,\n\t\t\t\t\tisTheTargetSquarePinListed = false;\n\t\t\t\tfor (const [attackedX, attackedY] of attackLine) {\n\t\t\t\t\tif (!isPieceUnderAttack && attackedX === pieceI && attackedY === pieceJ) isPieceUnderAttack = true;\n\t\t\t\t\telse if (!isTheTargetSquarePinListed && !isRoyalUnderAttack && attackedX === attackI && attackedY === attackJ)\n\t\t\t\t\t\tisTheTargetSquarePinListed = true;\n\t\t\t\t\tif (!isRoyalUnderAttack && attackedX === royalI && attackedY === royalJ) isRoyalUnderAttack = true;\n\n\t\t\t\t\tif (isRoyalMove) {\n\t\t\t\t\t\tif (isRoyalUnderAttack && attackedX === attackI && attackedY === attackJ) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tlegalitySettings.canKingCapture &&\n\t\t\t\t\t\t\t\tlegalitySettings.canKingCapture > 0 &&\n\t\t\t\t\t\t\t\tthis.board[attackedX][attackedY].color + 1 === legalitySettings.canKingCapture\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tisPieceUnderAttack &&\n\t\t\t\t\t\t\tisRoyalUnderAttack &&\n\t\t\t\t\t\t\t!compareCoordinates(attackingPiece, moveData.endCoordinates) &&\n\t\t\t\t\t\t\t!isTheTargetSquarePinListed\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tlegalitySettings.canKingCapture &&\n\t\t\t\t\t\t\t\tlegalitySettings.canKingCapture > 0 &&\n\t\t\t\t\t\t\t\tthis.board[attackedX][attackedY].color + 1 === legalitySettings.canKingCapture\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (attackers > 1) {\n\t\t\t\treturn isRoyalMove ? targetSafety || Boolean(legalitySettings.canKingCapture) : Boolean(legalitySettings.canKingCapture);\n\t\t\t} else if (attackers === 1) {\n\t\t\t\tif (!isRoyalMove) {\n\t\t\t\t\tif (preGeneratedAttacks.hoppingPieces[royalI][royalJ] === 1) {\n\t\t\t\t\t\tfor (const [attackingPiece, attackCoordinates] of preGeneratedAttacks.hoppingPieceLines) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tattackCoordinates[0] === royalI &&\n\t\t\t\t\t\t\t\tattackCoordinates[1] === royalJ &&\n\t\t\t\t\t\t\t\tattackingPiece[0] === attackI &&\n\t\t\t\t\t\t\t\tattackingPiece[1] === attackJ\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn Boolean(legalitySettings.canKingCapture);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (const [attackingPiece, attackLine] of preGeneratedAttacks.slidingPiecesLines) {\n\t\t\t\t\t\t\tlet isRoyalUnderAttack = false,\n\t\t\t\t\t\t\t\tisTheTargetSquareBlocked = false;\n\t\t\t\t\t\t\tfor (const [attackedX, attackedY] of attackLine) {\n\t\t\t\t\t\t\t\tif (!isRoyalUnderAttack && attackedX === royalI && attackedY === royalJ) isRoyalUnderAttack = true;\n\t\t\t\t\t\t\t\telse if (!isTheTargetSquareBlocked && !isRoyalUnderAttack && attackedX === attackI && attackedY === attackJ)\n\t\t\t\t\t\t\t\t\tisTheTargetSquareBlocked = true;\n\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tisRoyalUnderAttack &&\n\t\t\t\t\t\t\t\t\t!compareCoordinates(attackingPiece, moveData.endCoordinates) &&\n\t\t\t\t\t\t\t\t\t!isTheTargetSquareBlocked\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tlegalitySettings.canKingCapture &&\n\t\t\t\t\t\t\t\t\t\tlegalitySettings.canKingCapture > 0 &&\n\t\t\t\t\t\t\t\t\t\tthis.board[attackedX][attackedY].color + 1 === legalitySettings.canKingCapture\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\treturn Boolean(legalitySettings.canKingCapture);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn targetSafety || Boolean(legalitySettings.canKingCapture);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn isRoyalMove ? targetSafety || Boolean(legalitySettings.canKingCapture) : true;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getCastlingMoves(parameters: SpecialMoveGenerationSettings) {\n\t\tconst { i, j, baseColor } = parameters;\n\t\tconst specialMoves: MoveData[] = [];\n\t\tconst royal = this.data.fenOptions.tag(\"royal\")[baseColor];\n\n\t\tif (royal && royal[0] === i && royal[1] === j) {\n\t\t\tif (this.data.fenOptions.isKingsideCastlingAvailable(baseColor, this)) {\n\t\t\t\tspecialMoves.push({\n\t\t\t\t\tstartCoordinates: [i, j],\n\t\t\t\t\tendCoordinates: this.data.fenOptions.getKingsideCastlingEndCoordinate(baseColor),\n\t\t\t\t\tspecialType: SpecialMove.CastlingKingside\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this.data.fenOptions.isQueensideCastlingAvailable(baseColor, this)) {\n\t\t\t\tspecialMoves.push({\n\t\t\t\t\tstartCoordinates: [i, j],\n\t\t\t\t\tendCoordinates: this.data.fenOptions.getQueensideCastlingEndCoordinate(baseColor),\n\t\t\t\t\tspecialType: SpecialMove.CastlingQueenside\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn specialMoves;\n\t}\n\n\tprivate getEnPassantMoves(parameters: SpecialMoveGenerationSettings) {\n\t\tconst { i, j, baseColor, pieceLetter } = parameters;\n\t\tconst specialMoves: MoveData[] = [];\n\t\tif (pieceControlConfigSettings[pieceLetter].moveGenerationSettings.isPawn) {\n\t\t\tconst enPassantCaptures = this.data.fenOptions.getAvailableEnPassantCaptures(baseColor);\n\t\t\tconst pawnAttacks = this.controls[pieceLetter]()\n\t\t\t\t.setBaseImmunePieces(this.gameType.getBaseColors(baseColor))\n\t\t\t\t.setBoard(this.board)\n\t\t\t\t.setCoordinates(i, j)\n\t\t\t\t.setColor(baseColor)\n\t\t\t\t.constructPieceControl()\n\t\t\t\t.rayGenJumpingAttacks();\n\t\t\tif (enPassantCaptures.length !== 0) {\n\t\t\t\tfor (const attack of pawnAttacks) {\n\t\t\t\t\tfor (const enP of enPassantCaptures) {\n\t\t\t\t\t\tif (compareCoordinates(attack.move, enP)) {\n\t\t\t\t\t\t\tconst snapshot = this.createSnapshot();\n\t\t\t\t\t\t\tconst move: [MoveData] = [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tstartCoordinates: [i, j],\n\t\t\t\t\t\t\t\t\tendCoordinates: attack.move,\n\t\t\t\t\t\t\t\t\tspecialType: SpecialMove.EnPassant,\n\t\t\t\t\t\t\t\t\tisIrreversible: attack.irreversible\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\tthis.makeMove(move, true);\n\t\t\t\t\t\t\tthis.pregenerateAttacks();\n\t\t\t\t\t\t\tif (!this.isKingInCheck(baseColor)) specialMoves.push(move[0]);\n\t\t\t\t\t\t\tthis.loadSnapshot(snapshot);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn specialMoves;\n\t}\n\n\tprivate getSpecialMoves(parameters: SpecialMoveGenerationSettings) {\n\t\treturn [...this.getCastlingMoves(parameters), ...this.getEnPassantMoves(parameters)];\n\t}\n\n\tgetLegalMoves(i: number, j: number, baseColor = this.data.sideToMove, isSeirawanDrop = false): MoveData[] {\n\t\tconst pieceString = this.board[i]?.[j],\n\t\t\troyal = this.data.fenOptions.tag(\"royal\")[baseColor];\n\t\tif (pieceString.isPiece()) {\n\t\t\tconst color = pieceString.color;\n\t\t\tif (color !== baseColor) return [];\n\t\t\tconst pseudoLegalMoves = this.preGeneratedAttacks[color].pieceMovements.get(stringifyCoordinate([i, j]));\n\t\t\tassertNonUndefined(pseudoLegalMoves);\n\n\t\t\tconst specialMoves = this.getSpecialMoves({ i, j, baseColor, pieceLetter: pieceString.piece });\n\t\t\treturn [\n\t\t\t\t...pseudoLegalMoves\n\t\t\t\t\t.map((generatedMove) => {\n\t\t\t\t\t\tconst moveData: MoveData = {\n\t\t\t\t\t\t\tstartCoordinates: [i, j],\n\t\t\t\t\t\t\tendCoordinates: generatedMove.move,\n\t\t\t\t\t\t\tisIrreversible: generatedMove.irreversible\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (generatedMove.move[2]) {\n\t\t\t\t\t\t\tmoveData.promotion = generatedMove.move[2].split(\"\").map((piece) => createPieceFromData(color, piece));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn moveData;\n\t\t\t\t\t})\n\t\t\t\t\t.filter((m) => {\n\t\t\t\t\t\tconst capturedPieces = this.data.getCapturedPieces(m);\n\t\t\t\t\t\tconst isKingCapture = royal && capturedPieces.find((c) => royal[0] === c[0] && royal[1] === c[1]);\n\t\t\t\t\t\treturn this.isTheMoveLegal(color, m, isSeirawanDrop) && !isKingCapture;\n\t\t\t\t\t}),\n\t\t\t\t...specialMoves\n\t\t\t];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tgetDroppingMoves(_piece: PieceString, _sideToMove = this.data.sideToMove): DroppingMove[] {\n\t\treturn [];\n\t}\n\n\tgetAllowedInternalMoves(sideToMove = this.data.sideToMove): InternalMove[] {\n\t\tconst currentMoves = [InternalMoveSignature.DrawByAgreement];\n\n\t\tconst currentSnapshot = this.createSnapshot();\n\t\tthis.makeMove([{ type: InternalMoveSignature.Resign }], true);\n\t\tconst maximum = Math.max(...this.data.points);\n\t\tconst pointIndexes = this.data.points.reduce<number[]>((p, n, i) => (n === maximum ? [...p, i] : p), []);\n\t\tthis.loadSnapshot(currentSnapshot);\n\t\tif (pointIndexes.length === 1 && pointIndexes[0] === sideToMove) {\n\t\t\tcurrentMoves.push(InternalMoveSignature.ClaimWin);\n\t\t} else {\n\t\t\tcurrentMoves.push(InternalMoveSignature.Resign, InternalMoveSignature.Timeout);\n\t\t}\n\n\t\treturn currentMoves.map((type) => ({ type }));\n\t}\n\n\t/*---------------------------------------- API ----------------------------------------------*/\n}\n","import { createTupleFromCallback, Tuple, verifyTupleType } from \"../../../baseTypes\";\nimport { BoardSquares, initializeBoardSquares } from \"../../BaseInterfaces\";\nimport type { FENDataSnapshot } from \"../FENData/FENDataInterface\";\nimport { totalPlayers, VariantType } from \"../GameInformation/GameData\";\nimport { Coordinate, NumericColor, verifyNumericColor } from \"../GameInformation/GameUnits/GameUnits\";\nimport type { PieceString } from \"../GameInformation/GameUnits/PieceString\";\nimport type { DroppingMove } from \"../MoveTree/MoveTreeInterface\";\nimport type { PieceControlGeneratedMove, PieceLetter } from \"../PieceControl/PieceControlInterface\";\nimport type { Board, PlayerBooleanTuple } from \"./Board\";\n\nexport const enum DisplaySettings {\n\tHighlighted,\n\tFogged,\n\tGhosted,\n\tBlindfolded,\n\tPieceFacesCenter\n}\n\nexport interface BoardSnapshot {\n\tdata: FENDataSnapshot;\n\tboard: BoardSquares<PieceString>;\n\tisComplexSetup: Board[\"isComplexSetup\"];\n}\n\nexport interface PreGeneratedAttacks {\n\thoppingPieces: BoardSquares<number>;\n\tslidingPieces: BoardSquares<number>;\n\thoppingPieceLines: Array<[Coordinate, Coordinate]>;\n\tslidingPiecesLines: Array<readonly [startCoordinate: Coordinate, destinations: Coordinate[]]>;\n\tslidingPiecesRayTracing: Array<readonly [startCoordinate: Coordinate, destinations: Coordinate[]]>;\n\tattackingColors: BoardSquares<number>;\n\tvariantRuleCache: {\n\t\thasCaptures?: boolean;\n\t};\n\tpieceMovements: Map<string, PieceControlGeneratedMove[]>;\n\tpieceDrops: {\n\t\tpawn: DroppingMove[];\n\t\tpiece: DroppingMove[];\n\t};\n}\n\nexport interface SpecialMoveGenerationSettings {\n\ti: number;\n\tj: number;\n\tbaseColor: NumericColor;\n\tpieceLetter: PieceLetter;\n}\n\nconst baseTeams: Tuple<boolean, typeof totalPlayers> = [true, false, true, false];\nexport const stringifyCoordinate = (coordinate: Coordinate) => `${coordinate[0]}:${coordinate[1]}`;\nexport const unstringifyCoordinate = (coordinate: string): Coordinate => {\n\tconst result = coordinate.split(\":\").map((v) => Number(v));\n\tif (verifyTupleType(result, 2) && result.every((n) => !Number.isNaN(n))) {\n\t\treturn result;\n\t} else throw new Error(`Unexpected stringified coordinate: ${coordinate}`);\n};\nexport const createGameTypeSettings = () => ({\n\ttype: VariantType.FFA,\n\tteamSettings: {\n\t\tfirstTeamColors: baseTeams.map((e) => e),\n\t\tsecondTeamColors: baseTeams.map((e) => !e)\n\t},\n\tgetBaseColors(color: NumericColor): PlayerBooleanTuple {\n\t\tif (this.isFFA()) {\n\t\t\treturn createTupleFromCallback((_, i) => i === color, totalPlayers);\n\t\t} else {\n\t\t\treturn this.teamSettings.firstTeamColors[color] ? this.teamSettings.firstTeamColors : this.teamSettings.secondTeamColors;\n\t\t}\n\t},\n\tisFFA() {\n\t\treturn this.type === VariantType.FFA || this.type === VariantType.Solo;\n\t},\n\tisSameTeam(colorA: NumericColor, colorB: NumericColor) {\n\t\tif (colorA === colorB) return true;\n\t\tif (this.isFFA()) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.teamSettings.firstTeamColors[colorA]\n\t\t\t\t? this.teamSettings.firstTeamColors[colorA] && this.teamSettings.firstTeamColors[colorA]\n\t\t\t\t: this.teamSettings.secondTeamColors[colorA] && this.teamSettings.secondTeamColors[colorB];\n\t\t}\n\t},\n\tgetTeammateColor(color: NumericColor): NumericColor {\n\t\tif (this.isFFA()) return color;\n\t\tconst teammateIndex = this.teamSettings.firstTeamColors[color]\n\t\t\t? this.teamSettings.firstTeamColors.map((b, i) => b && i !== color).indexOf(true)\n\t\t\t: this.teamSettings.secondTeamColors.map((b, i) => b && i !== color).indexOf(true);\n\t\treturn verifyNumericColor(teammateIndex) ? teammateIndex : color;\n\t}\n});\n\nexport const createComplexMoveLegalityTracker = () => ({\n\thasComplexPieces: false,\n\thasComplexRules: false\n});\n\nexport const createBasePreGeneratedAttacks = (): PreGeneratedAttacks => {\n\treturn {\n\t\thoppingPieces: initializeBoardSquares(() => 0),\n\t\tslidingPieces: initializeBoardSquares(() => 0),\n\t\thoppingPieceLines: [],\n\t\tslidingPiecesLines: [],\n\t\tslidingPiecesRayTracing: [],\n\t\tattackingColors: initializeBoardSquares(() => 0),\n\t\tpieceMovements: new Map<string, PieceControlGeneratedMove[]>(),\n\t\tpieceDrops: {\n\t\t\tpawn: [],\n\t\t\tpiece: []\n\t\t},\n\t\tvariantRuleCache: {}\n\t};\n};\n\nexport const compareCoordinates = (coordinate1: Coordinate, coordinate2: Coordinate): boolean =>\n\tcoordinate1[0] === coordinate2[0] && coordinate1[1] === coordinate2[1];\n","import { Tuple, createTupleFromCallback, assertNonUndefined } from \"@client/ts/baseTypes\";\nimport {\n\tCloneable,\n\tgetHorizontalPlacementModulus,\n\tgetVerticalPlacementModulus,\n\tisVerticalPlacement,\n\tMemento\n} from \"@client/ts/logic/BaseInterfaces\";\nimport type { NumericColor, Coordinate } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport {\n\tbotAlgorithms,\n\tZombieMoveGenerationAlgorithm,\n\tZombieType\n} from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/BotInterface\";\nimport { copyClass } from \"@utils/ObjectUtils\";\nimport type { Board } from \"../../Board/Board\";\nimport { totalPlayers } from \"../../GameInformation/GameData\";\nimport {\n\tcreateFENOptionsTags,\n\tcreateFENOptionsTagsSnapshot,\n\tDynamicFENOptionTag,\n\tFENOptionsSerializedState,\n\tFENOptionsTags,\n\tFENOptionsTagsSnapshot\n} from \"./FENOptionsTagsInterface\";\n\ninterface CastlingData {\n\tendCoordinates: number;\n\tpieceCoordinates: number;\n\tpieceEndCoordinates: number;\n\tcheckSquares: number[];\n}\n\nexport interface FENOptionsSnapshot {\n\ttagsSnapshot: FENOptionsTagsSnapshot;\n}\n\nexport class FENOptions implements Cloneable<FENOptions>, Memento<FENOptionsSnapshot> {\n\tstatic loadSerializedState(state: FENOptionsSerializedState) {\n\t\tconst newTags = createFENOptionsTags();\n\t\tlet key: keyof FENOptionsTags;\n\t\tfor (key in newTags) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(newTags, key)) {\n\t\t\t\tnewTags[key].value = state[key] as never;\n\t\t\t}\n\t\t}\n\n\t\treturn newTags;\n\t}\n\n\ttags = createFENOptionsTags();\n\tprivate castlingKingsideData: Tuple<CastlingData, typeof totalPlayers> = createTupleFromCallback(\n\t\t() => ({ endCoordinates: -1, pieceCoordinates: -1, pieceEndCoordinates: -1, checkSquares: [] }),\n\t\ttotalPlayers\n\t);\n\tprivate castlingQueensideData: Tuple<CastlingData, typeof totalPlayers> = createTupleFromCallback(\n\t\t() => ({ endCoordinates: -1, pieceCoordinates: -1, pieceEndCoordinates: -1, checkSquares: [] }),\n\t\ttotalPlayers\n\t);\n\n\tcreateSnapshot(): FENOptionsSnapshot {\n\t\treturn {\n\t\t\ttagsSnapshot: createFENOptionsTagsSnapshot(this.tags)\n\t\t};\n\t}\n\n\tprivate loadTagSnapshot<V extends FENOptionsTagsSnapshot[keyof FENOptionsTagsSnapshot]>(value: V, tag: DynamicFENOptionTag<V>) {\n\t\ttag.loadSnapshot(value);\n\t}\n\tloadSnapshot(snapshot: FENOptionsSnapshot): void {\n\t\tlet key: keyof FENOptionsTagsSnapshot;\n\t\tfor (key in snapshot.tagsSnapshot) {\n\t\t\tif (!Object.prototype.hasOwnProperty.call(snapshot.tagsSnapshot, key)) continue;\n\t\t\tthis.loadTagSnapshot(snapshot.tagsSnapshot[key], this.tags[key]);\n\t\t}\n\t}\n\n\tprivate verifyKeyTag(key: keyof FENOptionsTags, snapshot: FENOptionsTagsSnapshot): key is keyof FENOptionsTagsSnapshot {\n\t\treturn key in snapshot;\n\t}\n\tcreateClone(): FENOptions {\n\t\tconst newOptions = copyClass(this, FENOptions);\n\t\tconst snapshot = this.createSnapshot();\n\t\tnewOptions.tags = createFENOptionsTags();\n\t\tnewOptions.loadSnapshot(snapshot);\n\n\t\tlet key: keyof FENOptionsTags;\n\t\tfor (key in this.tags) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(this.tags, key) && !this.verifyKeyTag(key, snapshot.tagsSnapshot)) {\n\t\t\t\tnewOptions.tags[key].value = this.tags[key].value;\n\t\t\t}\n\t\t}\n\n\t\treturn newOptions;\n\t}\n\n\ttag<K extends keyof FENOptionsTags>(key: K): FENOptionsTags[K][\"value\"] {\n\t\treturn this.tags[key].value;\n\t}\n\tsetTag<K extends keyof FENOptionsTags>(key: K, value: FENOptionsTags[K][\"value\"]): void {\n\t\tthis.tags[key].value = value;\n\t}\n\n\tcreateSerializedState() {\n\t\tconst serializedState: Partial<FENOptionsSerializedState> = {};\n\t\tlet fenTag: keyof FENOptionsTags;\n\t\tfor (fenTag in this.tags) {\n\t\t\tif (!Object.prototype.hasOwnProperty.call(this.tags, fenTag)) continue;\n\t\t\tconst tag = this.tags[fenTag];\n\t\t\tserializedState[fenTag] = tag.createSnapshot() as never;\n\t\t}\n\n\t\treturn serializedState as FENOptionsSerializedState;\n\t}\n\n\tgenerateCastling(board: Board) {\n\t\tlet [dimensionRY, dimensionBG] = this.tag(\"dim\");\n\t\tif (!this.tag(\"noCorners\")) {\n\t\t\tif (dimensionRY > 8) dimensionRY = 8;\n\t\t\tif (dimensionBG > 8) dimensionBG = 8;\n\t\t}\n\n\t\tconst dimensions: [number, number, number, number] = [dimensionRY, dimensionBG, dimensionRY, dimensionBG];\n\t\tconst royalRanks = this.tag(\"royal\").map((r, i) => (r ? r[getVerticalPlacementModulus(i)] : r));\n\t\tconst royalCoordinates = this.tag(\"royal\").map((r, i) => (r ? r[getHorizontalPlacementModulus(i)] : r));\n\t\tconst kingsideCastlePieceCoordinate: number[] = [];\n\t\tconst queensideCastlePieceCoordinate: number[] = [];\n\n\t\tconst boardSquares = board.board;\n\t\tfor (let i = 0; i < this.tag(\"royal\").length; i++) {\n\t\t\tconst royalCoordinateI = royalCoordinates[i];\n\t\t\tconst royalRanksI = royalRanks[i];\n\t\t\tif (royalCoordinateI === null || royalRanksI === null) {\n\t\t\t\tkingsideCastlePieceCoordinate.push(-1);\n\t\t\t\tqueensideCastlePieceCoordinate.push(-1);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst condition = i % 2 === 0;\n\t\t\tfor (let j = royalCoordinateI; j < 14; j++) {\n\t\t\t\tconst pieceString = boardSquares[condition ? royalRanksI : j][condition ? j : royalRanksI];\n\t\t\t\tif (!pieceString.isEmpty() && pieceString.piece === this.tag(\"castleWith\")) {\n\t\t\t\t\tkingsideCastlePieceCoordinate.push(j);\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (j === 13) {\n\t\t\t\t\tkingsideCastlePieceCoordinate.push(-1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let j = royalCoordinateI; j > -1; j--) {\n\t\t\t\tconst pieceString = boardSquares[condition ? royalRanksI : j][condition ? j : royalRanksI];\n\t\t\t\tif (!pieceString.isEmpty() && pieceString.piece === this.tag(\"castleWith\")) {\n\t\t\t\t\tqueensideCastlePieceCoordinate.push(j);\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (j === 0) {\n\t\t\t\t\tqueensideCastlePieceCoordinate.push(-1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (let i = 0; i < this.tag(\"royal\").length; i++) {\n\t\t\tconst royalCoordinate = royalCoordinates[i];\n\t\t\tif (royalCoordinate === null) continue;\n\n\t\t\tconst d = dimensions[i] - 6 < 1 ? 1 : dimensions[i] - 6;\n\n\t\t\tif (kingsideCastlePieceCoordinate[i] === -1) {\n\t\t\t\tthis.tag(\"castleKingside\")[i] = false;\n\t\t\t} else {\n\t\t\t\tconst kArr = [...Array(kingsideCastlePieceCoordinate[i] - royalCoordinate - 1).keys()];\n\t\t\t\tconst endCoordinates = royalCoordinate + d;\n\t\t\t\tconst castlingData = {\n\t\t\t\t\tendCoordinates,\n\t\t\t\t\tcheckSquares: kArr.map((j) => j + royalCoordinate + 1),\n\t\t\t\t\tpieceCoordinates: kingsideCastlePieceCoordinate[i],\n\t\t\t\t\tpieceEndCoordinates: endCoordinates - 1\n\t\t\t\t};\n\t\t\t\tif (royalCoordinate <= 6) {\n\t\t\t\t\tthis.castlingQueensideData[i] = castlingData;\n\t\t\t\t} else {\n\t\t\t\t\tthis.castlingKingsideData[i] = castlingData;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (queensideCastlePieceCoordinate[i] === -1) {\n\t\t\t\tthis.tags.castleQueenside.value[i] = false;\n\t\t\t} else {\n\t\t\t\tconst qArr = [...Array(royalCoordinate - queensideCastlePieceCoordinate[i] - 1).keys()];\n\t\t\t\tconst endCoordinates = royalCoordinate - d;\n\t\t\t\tconst castlingData = {\n\t\t\t\t\tendCoordinates,\n\t\t\t\t\tcheckSquares: royalCoordinate <= 6 ? qArr.map((j) => j + royalCoordinate - 2) : qArr.map((j) => j + royalCoordinate - 3),\n\t\t\t\t\tpieceCoordinates: queensideCastlePieceCoordinate[i],\n\t\t\t\t\tpieceEndCoordinates: endCoordinates + 1\n\t\t\t\t};\n\t\t\t\tif (royalCoordinate <= 6) {\n\t\t\t\t\tthis.castlingKingsideData[i] = castlingData;\n\t\t\t\t} else {\n\t\t\t\t\tthis.castlingQueensideData[i] = castlingData;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate isCastlingAvailable(player: NumericColor, board: Board, checks: number[]): boolean {\n\t\tconst royal = this.tag(\"royal\")[player];\n\t\tif (royal === null) return false;\n\n\t\tconst royalCoordinate = royal[getVerticalPlacementModulus(player)];\n\t\tconst squares = board.board;\n\n\t\tfor (const checkSquare of checks) {\n\t\t\tconst coordinateA = isVerticalPlacement(player) ? royalCoordinate : checkSquare;\n\t\t\tconst coordinateB = isVerticalPlacement(player) ? checkSquare : royalCoordinate;\n\t\t\tif (\n\t\t\t\t!squares[coordinateA][coordinateB].isEmpty() ||\n\t\t\t\tboard.preGeneratedAttacks[player].hoppingPieces[coordinateA][coordinateB] > 0 ||\n\t\t\t\tboard.preGeneratedAttacks[player].slidingPieces[coordinateA][coordinateB] > 0\n\t\t\t)\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif (board.isKingInCheck(player)) return false;\n\n\t\treturn true;\n\t}\n\n\tisKingsideCastlingAvailable(player: NumericColor, board: Board): boolean {\n\t\tif (!this.tag(\"castleKingside\")[player]) return false;\n\t\tif (this.castlingKingsideData[player].endCoordinates === -1) {\n\t\t\tthis.generateCastling(board);\n\t\t}\n\n\t\treturn this.isCastlingAvailable(player, board, this.castlingKingsideData[player].checkSquares);\n\t}\n\n\tisQueensideCastlingAvailable(player: NumericColor, board: Board): boolean {\n\t\tif (!this.tag(\"castleQueenside\")[player]) return false;\n\t\tif (this.castlingQueensideData[player].endCoordinates === -1) {\n\t\t\tthis.generateCastling(board);\n\t\t}\n\n\t\treturn this.isCastlingAvailable(player, board, this.castlingQueensideData[player].checkSquares);\n\t}\n\n\tprivate getCastlingEndCoordinate(player: NumericColor, coordinates: number | undefined): [number, number] {\n\t\tconst royalCoordinate = this.tag(\"royal\")[player]?.[getVerticalPlacementModulus(player)];\n\t\tassertNonUndefined(coordinates);\n\t\tassertNonUndefined(royalCoordinate);\n\t\tconst coordinateA = isVerticalPlacement(player) ? royalCoordinate : coordinates;\n\t\tconst coordinateB = isVerticalPlacement(player) ? coordinates : royalCoordinate;\n\t\treturn [coordinateA, coordinateB];\n\t}\n\n\tgetKingsideCastlingEndCoordinate(player: NumericColor): [number, number] {\n\t\treturn this.getCastlingEndCoordinate(player, this.castlingKingsideData[player].endCoordinates);\n\t}\n\tgetQueensideCastlingEndCoordinate(player: NumericColor): [number, number] {\n\t\treturn this.getCastlingEndCoordinate(player, this.castlingQueensideData[player].endCoordinates);\n\t}\n\tgetKingsideCastlingPieceEndCoordinate(player: NumericColor): [number, number] {\n\t\treturn this.getCastlingEndCoordinate(player, this.castlingKingsideData[player].pieceEndCoordinates);\n\t}\n\tgetQueensideCastlingPieceEndCoordinate(player: NumericColor): [number, number] {\n\t\treturn this.getCastlingEndCoordinate(player, this.castlingQueensideData[player].pieceEndCoordinates);\n\t}\n\tgetKingsideCastlingTandemPiece(player: NumericColor) {\n\t\treturn this.castlingKingsideData[player].pieceCoordinates;\n\t}\n\tgetQueensideCastlingTandemPiece(player: NumericColor) {\n\t\treturn this.castlingQueensideData[player].pieceCoordinates;\n\t}\n\n\tgetAvailableEnPassantCaptures(baseColor: NumericColor): Coordinate[] {\n\t\tconst coordinates: Coordinate[] = [];\n\t\tthis.tag(\"enPassant\").forEach((enPassant, i) => {\n\t\t\tif (i === baseColor) return;\n\t\t\tif (enPassant) coordinates.push(enPassant[0]);\n\t\t});\n\n\t\treturn coordinates.map((e) => [...e]);\n\t}\n\n\tgetDefaultZombieAlgorithm(baseColor: NumericColor): ZombieMoveGenerationAlgorithm {\n\t\tconst algorithm = botAlgorithms.get(this.tag(\"resigned\")[baseColor] ? this.tag(\"zombieType\")[baseColor] : ZombieType.F_Checker);\n\t\tassertNonUndefined(algorithm);\n\t\treturn algorithm;\n\t}\n}\n","import { Cloneable, isVerticalPlacement, Memento } from \"../../BaseInterfaces\";\nimport type { Board, PlayerBooleanTuple } from \"../Board/Board\";\nimport {\n\tcreateDefaultArmyDeathSettings,\n\tcreateDefaultFENEffectSettings,\n\tFENDataSnapshot,\n\tgetNeighboringSideToMove,\n\tPostMoveResults\n} from \"./FENDataInterface\";\nimport {\n\tDroppingMove,\n\tInternalMove,\n\tInternalMoveSignature,\n\tMoveComponent,\n\tMoveData,\n\tSpecialMove,\n\tverifyDroppingMove,\n\tverifyInternalMove,\n\tverifyStandardMove\n} from \"../MoveTree/MoveTreeInterface\";\nimport { Tuple, createTuple, throwOnNever } from \"../../../baseTypes\";\nimport {\n\tcolors,\n\tDrawnResult,\n\tGeneralTermination,\n\tgetPlayerNameFromColor,\n\tResult,\n\tTermination,\n\ttotalPlayers,\n\tverifyDrawingTermination,\n\tverifyWinningTermination\n} from \"../GameInformation/GameData\";\nimport { PieceString, createPieceFromData, emptyPieceString, deadColorIndex } from \"../GameInformation/GameUnits/PieceString\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { compareCoordinates } from \"../Board/BoardInterface\";\nimport { Coordinate, nonPlayablePieces, NumericColor, verifyNumericColor } from \"../GameInformation/GameUnits/GameUnits\";\nimport type { VariantHandlerTarget } from \"../VariantRules/VariantRuleInterface\";\nimport { FENOptions } from \"./FENOptions/FENOptions\";\n\nconst defaultPointsForMate = 20;\nclass FENData implements VariantHandlerTarget<FENData>, Cloneable<FENData>, Memento<FENDataSnapshot> {\n\tpoints: [number, number, number, number];\n\tsideToMove: NumericColor;\n\tfenOptions: FENOptions;\n\tplyCount: number;\n\tboard!: Board;\n\tprivate privateGameOver: Termination | false = false;\n\n\t__baseClass: FENData;\n\tinitDecoratorSettings() {\n\t\t/* no-op */\n\t}\n\n\tconstructor() {\n\t\tthis.points = [0, 0, 0, 0];\n\t\tthis.sideToMove = 0;\n\t\tthis.fenOptions = new FENOptions();\n\t\tthis.plyCount = 0;\n\t\tthis.__baseClass = this;\n\t}\n\n\tget gameOver() {\n\t\treturn this.privateGameOver;\n\t}\n\n\tset gameOver(gameOver: Termination | false) {\n\t\tif (gameOver === false || this.privateGameOver === false) {\n\t\t\tthis.privateGameOver = gameOver;\n\t\t}\n\t}\n\n\tinjectBoard(board: Board) {\n\t\tthis.board = board;\n\t\tthis.fenOptions.generateCastling(board);\n\t}\n\n\tcreateClone(): FENData {\n\t\tconst newFENData = new FENData();\n\t\tnewFENData.fenOptions = this.fenOptions.createClone();\n\t\tnewFENData.points = [...this.points];\n\t\tnewFENData.sideToMove = this.sideToMove;\n\t\tnewFENData.plyCount = this.plyCount;\n\t\treturn newFENData;\n\t}\n\n\tcreateSnapshot(): FENDataSnapshot {\n\t\treturn {\n\t\t\tpoints: [...this.points],\n\t\t\tsideToMove: this.sideToMove,\n\t\t\tfenOptionsSnapshot: this.fenOptions.createSnapshot(),\n\t\t\tplyCount: this.plyCount,\n\t\t\tgameOver: this.gameOver\n\t\t};\n\t}\n\n\tloadSnapshot(snapshot: FENDataSnapshot): void {\n\t\tthis.fenOptions.loadSnapshot(snapshot.fenOptionsSnapshot);\n\t\tthis.points = [...snapshot.points];\n\t\tthis.sideToMove = snapshot.sideToMove;\n\t\tthis.plyCount = snapshot.plyCount;\n\t\tthis.privateGameOver = snapshot.gameOver;\n\t}\n\n\tgetCapturedPieces(moveData: MoveData): Coordinate[] {\n\t\tconst pieceString = this.board.board[moveData.endCoordinates[0]][moveData.endCoordinates[1]];\n\t\treturn pieceString.isEmpty() || pieceString.isDead() ? [] : [[...moveData.endCoordinates]];\n\t}\n\n\tprivate getCastlingPieceEndCoordinates(coordinates: Coordinate, color: NumericColor): [Coordinate, Coordinate] {\n\t\treturn [\n\t\t\tisVerticalPlacement(color)\n\t\t\t\t? [coordinates[0], this.fenOptions.getKingsideCastlingTandemPiece(color)]\n\t\t\t\t: [this.fenOptions.getKingsideCastlingTandemPiece(color), coordinates[1]],\n\t\t\tisVerticalPlacement(color)\n\t\t\t\t? [coordinates[0], this.fenOptions.getQueensideCastlingTandemPiece(color)]\n\t\t\t\t: [this.fenOptions.getQueensideCastlingTandemPiece(color), coordinates[1]]\n\t\t];\n\t}\n\n\tprocessStandardMove(moveData: MoveData): { endPiece: PieceString[] } {\n\t\tconst {\n\t\t\tstartCoordinates: [startI, startJ],\n\t\t\tendCoordinates: [endI, endJ],\n\t\t\tpromotion\n\t\t} = moveData;\n\t\tconst endPiece = this.board.board[endI][endJ];\n\n\t\tconst piece = promotion?.[0] ?? this.board.board[startI][startJ];\n\t\tconst capturedPieces = this.getCapturedPieces(moveData);\n\t\tthis.board.board[endI][endJ] = piece;\n\t\tthis.board.board[startI][startJ] = emptyPieceString;\n\t\tfor (const coordinate of capturedPieces) {\n\t\t\tif (compareCoordinates(coordinate, moveData.startCoordinates)) {\n\t\t\t\tthis.board.board[endI][endJ] = emptyPieceString;\n\t\t\t} else if (!compareCoordinates(coordinate, moveData.endCoordinates)) {\n\t\t\t\tthis.board.board[coordinate[0]][coordinate[1]] = emptyPieceString;\n\t\t\t}\n\t\t}\n\n\t\tconst [kingsidePiece, queensidePiece] = this.getCastlingPieceEndCoordinates(moveData.startCoordinates, this.sideToMove);\n\t\tif (\"specialType\" in moveData) {\n\t\t\tconst type = moveData.specialType;\n\n\t\t\tswitch (type) {\n\t\t\t\tcase SpecialMove.CastlingKingside: {\n\t\t\t\t\tconst secondKPiece = isVerticalPlacement(this.sideToMove)\n\t\t\t\t\t\t? this.board.board[startI][this.fenOptions.getKingsideCastlingTandemPiece(this.sideToMove)]\n\t\t\t\t\t\t: this.board.board[this.fenOptions.getKingsideCastlingTandemPiece(this.sideToMove)][startJ];\n\t\t\t\t\tconst [kI, kJ] = this.fenOptions.getKingsideCastlingPieceEndCoordinate(this.sideToMove);\n\n\t\t\t\t\tthis.board.board[kI][kJ] = secondKPiece;\n\t\t\t\t\tthis.board.board[kingsidePiece[0]][kingsidePiece[1]] = emptyPieceString;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase SpecialMove.CastlingQueenside: {\n\t\t\t\t\tconst secondQPiece = isVerticalPlacement(this.sideToMove)\n\t\t\t\t\t\t? this.board.board[startI][this.fenOptions.getQueensideCastlingTandemPiece(this.sideToMove)]\n\t\t\t\t\t\t: this.board.board[this.fenOptions.getQueensideCastlingTandemPiece(this.sideToMove)][startJ];\n\t\t\t\t\tconst [qI, qJ] = this.fenOptions.getQueensideCastlingPieceEndCoordinate(this.sideToMove);\n\t\t\t\t\tthis.board.board[qI][qJ] = secondQPiece;\n\t\t\t\t\tthis.board.board[queensidePiece[0]][queensidePiece[1]] = emptyPieceString;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tif (type === undefined || !(type in SpecialMove)) {\n\t\t\t\t\t\tconsole.error(`Unknown special move constant: ${String(type)}`);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst castleKingside = this.fenOptions.tag(\"castleKingside\"),\n\t\t\tcastleQueenside = this.fenOptions.tag(\"castleQueenside\"),\n\t\t\troyal = this.fenOptions.tag(\"royal\");\n\t\tthis.fenOptions.setTag(\n\t\t\t\"royal\",\n\t\t\tthis.fenOptions.tag(\"royal\").map((r, i): Coordinate | null => {\n\t\t\t\tif (r) {\n\t\t\t\t\tif (r[0] === startI && r[1] === startJ) {\n\t\t\t\t\t\tcastleKingside[i] = false;\n\t\t\t\t\t\tcastleQueenside[i] = false;\n\t\t\t\t\t\treturn [endI, endJ];\n\t\t\t\t\t} else return [...r];\n\t\t\t\t} else return null;\n\t\t\t})\n\t\t);\n\n\t\tfor (const color of colors) {\n\t\t\tconst royalPiece = royal[color];\n\t\t\tif (!royalPiece) continue;\n\t\t\tif (compareCoordinates(royalPiece, moveData.startCoordinates)) {\n\t\t\t\tcastleKingside[color] = false;\n\t\t\t\tcastleQueenside[color] = false;\n\t\t\t\tbreak;\n\t\t\t} else if (compareCoordinates(kingsidePiece, moveData.startCoordinates)) {\n\t\t\t\tcastleKingside[color] = false;\n\t\t\t\tbreak;\n\t\t\t} else if (compareCoordinates(queensidePiece, moveData.startCoordinates)) {\n\t\t\t\tcastleQueenside[color] = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn { endPiece: endPiece.isEmpty() ? [] : [endPiece] };\n\t}\n\n\tprotected spreadPointsBetweenPlayersEvenly() {\n\t\tconst resigned = this.fenOptions.tag(\"resigned\"),\n\t\t\tdead = this.fenOptions.tag(\"dead\");\n\t\tconst realPlayers = resigned.reduce((p, n, i) => p + Number(n || dead[i]), 0);\n\t\tconst individualPoints = Math.ceil(this.obtainPointsForMate() / realPlayers);\n\t\tfor (const color of colors) {\n\t\t\tif (!dead[color]) {\n\t\t\t\tthis.assignPoints(color, individualPoints);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate branchBetweenResignationMoves(\n\t\tmove: InternalMoveSignature.Resign | InternalMoveSignature.Timeout | InternalMoveSignature.ClaimWin,\n\t\tsideToMove: NumericColor\n\t) {\n\t\tconst playerName = getPlayerNameFromColor(sideToMove).toUpperCase();\n\t\tswitch (move) {\n\t\t\tcase InternalMoveSignature.Resign:\n\t\t\t\tthis.gameOver = `${playerName} RESIGNED!`;\n\t\t\t\tbreak;\n\t\t\tcase InternalMoveSignature.Timeout:\n\t\t\t\tthis.gameOver = `${playerName} FORFEITS ON TIME!`;\n\t\t\t\tbreak;\n\t\t\tcase InternalMoveSignature.ClaimWin:\n\t\t\t\tthis.gameOver = `${playerName} CLAIMED THE WIN!`;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrowOnNever(move);\n\t\t}\n\t}\n\n\tprocessInternalMove(internalMove: InternalMove): { stalemates: PlayerBooleanTuple } {\n\t\tconst resigned = this.fenOptions.tag(\"resigned\"),\n\t\t\tdead = this.fenOptions.tag(\"dead\");\n\t\tconst stalemates = createTuple(false, totalPlayers);\n\t\tconst insufficientMaterial = this.board.insufficientMaterialChecker?.checkCurrentState(this.board).every((b, i) => {\n\t\t\tif (i === this.sideToMove) {\n\t\t\t\treturn b;\n\t\t\t} else {\n\t\t\t\treturn b || dead[i];\n\t\t\t}\n\t\t});\n\n\t\tswitch (internalMove.type) {\n\t\t\tcase InternalMoveSignature.Stalemate:\n\t\t\t\tdead[this.sideToMove] = true;\n\t\t\t\tstalemates[this.sideToMove] = true;\n\t\t\t\tbreak;\n\t\t\tcase InternalMoveSignature.Resign:\n\t\t\tcase InternalMoveSignature.Timeout:\n\t\t\t\tif (insufficientMaterial) {\n\t\t\t\t\tthis.assignGeneralTermination(\"Timeout vs Insufficient Material\");\n\t\t\t\t}\n\t\t\t// * Fallthrough\n\t\t\tcase InternalMoveSignature.ClaimWin: {\n\t\t\t\tresigned[this.sideToMove] = true;\n\t\t\t\tthis.turnPiecesDead(this.sideToMove, { ...createDefaultArmyDeathSettings(), excludeRoyals: true, doNotSetDead: true });\n\t\t\t\tconst deadPlayers = dead.map((d, i) => d || resigned[i]).filter(Boolean);\n\n\t\t\t\tlet isResignationOver = deadPlayers.length === totalPlayers - 1;\n\t\t\t\tif (insufficientMaterial) {\n\t\t\t\t\tthis.spreadPointsBetweenPlayersEvenly();\n\t\t\t\t} else if (deadPlayers.length === totalPlayers - 1) {\n\t\t\t\t\tconst alivePlayer = deadPlayers.findIndex((d) => !d);\n\t\t\t\t\tif (verifyNumericColor(alivePlayer)) {\n\t\t\t\t\t\tthis.assignPoints(\n\t\t\t\t\t\t\talivePlayer,\n\t\t\t\t\t\t\tthis.countTotalPointsOnBoard().reduce((p, n, i) => p + (i === alivePlayer ? n : 0), 0)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tisResignationOver = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (!this.board.gameType.isFFA()) {\n\t\t\t\t\tisResignationOver = true;\n\t\t\t\t}\n\n\t\t\t\tif (isResignationOver) {\n\t\t\t\t\tthis.branchBetweenResignationMoves(internalMove.type, this.sideToMove);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase InternalMoveSignature.DrawByAgreement:\n\t\t\t\tthis.gameOver = \"½-½ AGREED.\";\n\t\t\t\tbreak;\n\t\t\tcase InternalMoveSignature.Pass:\n\t\t\t\tbreak;\n\t\t\tcase InternalMoveSignature.TeamsCheckmate: {\n\t\t\t\tthis.gameOver = `CHECKMATE • ${this.getCurrentResult()}`;\n\t\t\t\tthis.turnPiecesDead(this.sideToMove);\n\t\t\t\tthis.turnPiecesDead(this.board.gameType.getTeammateColor(this.sideToMove));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrowOnNever(internalMove.type);\n\t\t}\n\n\t\treturn { stalemates };\n\t}\n\n\tprivate processDroppingMove(move: DroppingMove) {\n\t\tconst bank = this.fenOptions.tag(\"bank\"),\n\t\t\tareBanksEnabled = this.fenOptions.tag(\"areBanksEnabled\"),\n\t\t\tsetupComplete = this.fenOptions.tag(\"setupComplete\");\n\t\tif (!this.board.variantData.duckChess && !areBanksEnabled[this.sideToMove]) return;\n\t\tconst playerBank = bank[this.sideToMove];\n\t\tconst pieceStringReference = [...playerBank.keys()].find((pieceString) => pieceString.piece === move.piece.piece);\n\t\tif (!pieceStringReference && !this.board.variantData.duckChess && move.piece.piece !== nonPlayablePieces.duck) return;\n\t\tconst safeReference = pieceStringReference ?? move.piece;\n\n\t\tthis.board.board[move.endCoordinates[0]][move.endCoordinates[1]] = move.piece;\n\n\t\tif (!setupComplete[this.sideToMove]) return;\n\t\tconst bankPieceCount = playerBank.get(safeReference);\n\t\tif (bankPieceCount == 1) {\n\t\t\tplayerBank.delete(safeReference);\n\t\t} else if (bankPieceCount) {\n\t\t\tplayerBank.set(safeReference, bankPieceCount - 1);\n\t\t}\n\t}\n\n\tturnPiecesDead(color: NumericColor, settings = createDefaultArmyDeathSettings()) {\n\t\tconst royal = this.fenOptions.tag(\"royal\"),\n\t\t\tdead = this.fenOptions.tag(\"dead\");\n\t\tconst royalPiece = royal[color];\n\t\tif (!settings.doNotSetDead) {\n\t\t\tdead[color] = true;\n\t\t\troyal[color] = null;\n\t\t}\n\n\t\tfor (const coordinate of this.board.getPlayerPieces()[color]) {\n\t\t\tif (settings.excludeRoyals && royalPiece && compareCoordinates(coordinate, royalPiece)) continue;\n\t\t\tconst piece = this.board.board[coordinate[0]][coordinate[1]].piece;\n\t\t\tif (settings.onlyPawns && !pieceControlConfigSettings[piece].moveGenerationSettings.isPawn) continue;\n\t\t\tthis.board.board[coordinate[0]][coordinate[1]] = createPieceFromData(\n\t\t\t\tdeadColorIndex,\n\t\t\t\tthis.board.board[coordinate[0]][coordinate[1]].piece\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate getKingCaptures() {\n\t\tconst kingCaptures = createTuple(false, totalPlayers);\n\t\tfor (const color of colors) {\n\t\t\tconst royalCoordinate = this.fenOptions.tag(\"royal\")[color];\n\t\t\tif (!royalCoordinate) continue;\n\t\t\tconst pieceString = this.board.board[royalCoordinate[0]][royalCoordinate[1]];\n\t\t\tif (pieceString.isEmpty() || pieceString.color !== color) {\n\t\t\t\tkingCaptures[color] = true;\n\t\t\t}\n\t\t}\n\n\t\treturn kingCaptures;\n\t}\n\n\tprivate processPointsForChecks(currentChecks: Tuple<Set<string>, typeof totalPlayers>) {\n\t\tconst sideToMove = this.sideToMove;\n\t\tconst updatedChecks = this.board.getCurrentChecks(),\n\t\t\tplayerChecks = createTuple(false, totalPlayers);\n\t\tfor (const color of colors) {\n\t\t\tfor (const coordinate of updatedChecks[color]) {\n\t\t\t\tif (!currentChecks[color].has(coordinate)) {\n\t\t\t\t\tplayerChecks[color] = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst checkedPlayers = playerChecks.filter(Boolean).length;\n\t\tif (checkedPlayers === 2) {\n\t\t\tthis.assignPoints(sideToMove, 1);\n\t\t} else if (checkedPlayers === 3) {\n\t\t\tthis.assignPoints(sideToMove, 5);\n\t\t}\n\t}\n\n\taffectOptions(move: MoveComponent, settings = createDefaultFENEffectSettings()): PostMoveResults {\n\t\tlet moveStalemates: PlayerBooleanTuple | undefined;\n\t\tlet endSquare: PieceString[] | undefined;\n\t\tconst currentChecks = this.board.getCurrentChecks().map((arr) => new Set(arr));\n\n\t\tif (verifyInternalMove(move)) {\n\t\t\tmoveStalemates = this.processInternalMove(move).stalemates;\n\t\t} else if (verifyStandardMove(move)) {\n\t\t\tendSquare = this.processStandardMove(move).endPiece;\n\t\t} else if (verifyDroppingMove(move)) {\n\t\t\tthis.processDroppingMove(move);\n\t\t}\n\n\t\tif (!settings.ignoreCheckmateChecks) this.board.pregenerateAttacks();\n\t\tconst { checkmates, stalemates, checks } = settings.ignoreCheckmateChecks\n\t\t\t? {\n\t\t\t\t\tcheckmates: createTuple(false, totalPlayers),\n\t\t\t\t\tchecks: createTuple(false, totalPlayers),\n\t\t\t\t\tstalemates: createTuple(false, totalPlayers)\n\t\t\t  }\n\t\t\t: this.board.getCheckmatesAndStalemates();\n\t\tif (moveStalemates) {\n\t\t\tfor (let i = 0; i < totalPlayers; i++) {\n\t\t\t\tif (moveStalemates[i]) {\n\t\t\t\t\tstalemates[i] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst totalMateSum = checkmates.reduce((p, n) => (n ? p + this.obtainPointsForMate() : p), 0);\n\t\tconst boardAlternations = {\n\t\t\tpointDistribution: {\n\t\t\t\tcheckmatePoints: checkmates.map((_, i) => (i === this.sideToMove ? totalMateSum : 0)),\n\t\t\t\tpieceCapturingPoints: createTuple(0, totalPlayers)\n\t\t\t}\n\t\t};\n\n\t\tif (endSquare) {\n\t\t\tfor (const piece of endSquare) {\n\t\t\t\tboardAlternations.pointDistribution.pieceCapturingPoints[this.sideToMove] = this.getPointsForPiece(piece);\n\t\t\t}\n\t\t}\n\n\t\tconst kingCaptures = this.getKingCaptures();\n\t\tconst dead = this.fenOptions.tag(\"dead\"),\n\t\t\tresigned = this.fenOptions.tag(\"resigned\");\n\t\tif (this.board.gameType.isFFA()) {\n\t\t\tfor (const color of colors) {\n\t\t\t\tif (dead[color] || resigned[color]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (checkmates[color] || (color === this.sideToMove && stalemates[color])) {\n\t\t\t\t\tthis.turnPiecesDead(color);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.assignPoints(\n\t\t\t\t\tcolor,\n\t\t\t\t\tboardAlternations.pointDistribution.checkmatePoints[color] + boardAlternations.pointDistribution.pieceCapturingPoints[color]\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const color of colors) {\n\t\t\t\tif (kingCaptures[color]) {\n\t\t\t\t\tthis.turnPiecesDead(color);\n\t\t\t\t\tthis.assignGeneralTermination(\"King Captured\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst realPlayers = this.getRealPlayers();\n\t\tconst isOver = this.board.gameType.isFFA() ? realPlayers === 1 : realPlayers !== totalPlayers;\n\t\tif (isOver) this.assignGeneralTermination(\"Checkmate\");\n\n\t\tif (!settings.ignoreNextTurn && !isOver) {\n\t\t\tthis.processPointsForChecks(currentChecks);\n\n\t\t\tconst insufficientPieces = this.board.insufficientMaterialChecker?.checkCurrentState(this.board);\n\t\t\tif (!this.gameOver && insufficientPieces?.every((insufficient, i) => dead[i] || insufficient)) {\n\t\t\t\tthis.gameOver = `INSUFFICIENT MATERIAL • ${this.getCurrentResult()}`;\n\t\t\t\tthis.spreadPointsBetweenPlayersEvenly();\n\t\t\t}\n\t\t\tif (this.getRealPlayers() > 1) {\n\t\t\t\tthis.sideToMove = this.nextTurn();\n\t\t\t}\n\t\t}\n\n\t\treturn { checkmates, stalemates, checks };\n\t}\n\n\tgetRealPlayers() {\n\t\tconst dead = this.fenOptions.tag(\"dead\"),\n\t\t\tresigned = this.fenOptions.tag(\"resigned\");\n\n\t\tlet totalPlayers = 0;\n\t\tfor (const color of colors) {\n\t\t\tif (resigned[color] || dead[color]) continue;\n\t\t\ttotalPlayers++;\n\t\t}\n\t\treturn totalPlayers;\n\t}\n\n\tnextTurn(player: NumericColor = this.sideToMove): NumericColor {\n\t\tif (this.getRealPlayers() <= 1) throw new Error(\"Next turn called while the game is terminated\");\n\t\treturn getNeighboringSideToMove(player, this.fenOptions.tag(\"dead\"));\n\t}\n\n\tpreviousTurn(player: NumericColor = this.sideToMove): NumericColor {\n\t\tconst dead = this.fenOptions.tag(\"dead\");\n\n\t\tif (this.getRealPlayers() <= 1) throw new Error(\"Previous turn called while the game is terminated\");\n\t\tlet sideToMove: number = player;\n\t\tdo {\n\t\t\tsideToMove = sideToMove === 0 ? totalPlayers - 1 : sideToMove - 1;\n\t\t} while (dead[sideToMove]);\n\n\t\tif (verifyNumericColor(sideToMove)) {\n\t\t\treturn sideToMove;\n\t\t} else throw new Error(`Unexpected numeric color: ${sideToMove}`);\n\t}\n\n\tisComplexEvaluation() {\n\t\treturn false;\n\t}\n\n\tobtainPointsForMate() {\n\t\treturn defaultPointsForMate;\n\t}\n\n\tassignPoints(sideToMove: NumericColor, points: number) {\n\t\tif (points > 0) {\n\t\t\tthis.points[sideToMove] += points;\n\t\t}\n\t}\n\n\tgetPointsForPiece(pieceString: PieceString) {\n\t\tif (pieceString.isPiece() && this.board.gameType.isFFA()) {\n\t\t\treturn pieceControlConfigSettings[pieceString.piece].points.singlesPoints;\n\t\t} else return 0;\n\t}\n\n\tcountTotalPointsOnBoard(): Tuple<number, typeof totalPlayers> {\n\t\tconst royal = this.fenOptions.tag(\"royal\"),\n\t\t\tresigned = this.fenOptions.tag(\"resigned\"),\n\t\t\tzombieImmune = this.fenOptions.tag(\"zombieImmune\");\n\n\t\tconst resultingPoints: Tuple<number, typeof totalPlayers> = [0, 0, 0, 0];\n\t\tthis.board.getPlayerPieces().forEach((army, color) => {\n\t\t\tif (zombieImmune[color]) return;\n\n\t\t\tconst royalPiece = royal[color];\n\t\t\tfor (const coordinate of army) {\n\t\t\t\tif (royalPiece && compareCoordinates(coordinate, royalPiece)) {\n\t\t\t\t\tresultingPoints[color] += this.obtainPointsForMate();\n\t\t\t\t} else if (resigned[color]) {\n\t\t\t\t\tconst piece = this.board.board[coordinate[0]][coordinate[1]].piece;\n\t\t\t\t\tresultingPoints[color] += pieceControlConfigSettings[piece].points.singlesPoints;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn resultingPoints;\n\t}\n\n\tgetCurrentResult(): Result {\n\t\tif (this.board.gameType.isFFA()) {\n\t\t\tconst dead = this.fenOptions.tag(\"dead\"),\n\t\t\t\tresigned = this.fenOptions.tag(\"resigned\");\n\n\t\t\tif (!this.board.isTwoPlayer) throw new Error(\"Result can only get called for 2P and teams\");\n\t\t\tconst max = Math.max(...this.points);\n\t\t\tlet firstAlivePlayer: NumericColor | undefined, maximumIndex: NumericColor | undefined;\n\t\t\tfor (const color of colors) {\n\t\t\t\tif (dead[color] || resigned[color]) continue;\n\t\t\t\tif (this.points[color] === max) {\n\t\t\t\t\tif (maximumIndex === undefined) {\n\t\t\t\t\t\tmaximumIndex = color;\n\t\t\t\t\t} else return \"½-½\";\n\t\t\t\t}\n\t\t\t\tif (firstAlivePlayer === undefined) firstAlivePlayer = color;\n\t\t\t}\n\n\t\t\treturn firstAlivePlayer === maximumIndex ? \"1-0\" : \"0-1\";\n\t\t} else {\n\t\t\tlet result: Result = \"½-½\";\n\t\t\tfor (const color of colors) {\n\t\t\t\tif (this.points[color] > 0) {\n\t\t\t\t\tresult = this.board.gameType.teamSettings.firstTeamColors[color] ? \"1-0\" : \"0-1\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tassignGeneralTermination(generalTermination: GeneralTermination | DrawnResult, sideToMove?: NumericColor): void {\n\t\tif (this.board.gameType.isFFA() && !this.board.isTwoPlayer) {\n\t\t\tif (sideToMove !== undefined) {\n\t\t\t\tswitch (generalTermination) {\n\t\t\t\t\tcase \"Stalemate\":\n\t\t\t\t\t\tthis.gameOver = `${getPlayerNameFromColor(sideToMove).toUpperCase()} STALEMATED!`;\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (verifyWinningTermination(generalTermination)) {\n\t\t\t\tthis.gameOver = `${generalTermination.toUpperCase()}!`;\n\t\t\t} else if (verifyDrawingTermination(generalTermination)) {\n\t\t\t\tthis.gameOver = `${generalTermination.toUpperCase()}`;\n\t\t\t} else {\n\t\t\t\tthrowOnNever(generalTermination);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.gameOver = `${generalTermination.toUpperCase()} • ${this.getCurrentResult()}`;\n\t\t}\n\t}\n}\n\nexport { FENData, FENOptions };\n","import type { PlayerBooleanTuple } from \"@moveGeneration/Board/Board\";\nimport { NumericColor, verifyNumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { Termination, totalPlayers } from \"../GameInformation/GameData\";\nimport type { FENOptionsSnapshot } from \"./FENOptions/FENOptions\";\n\nexport interface FENDataSnapshot {\n\tpoints: [number, number, number, number];\n\tsideToMove: NumericColor;\n\tfenOptionsSnapshot: FENOptionsSnapshot;\n\tplyCount: number;\n\tgameOver: Termination | false;\n}\n\nexport interface PostMoveResults {\n\tchecks: [boolean, boolean, boolean, boolean];\n\tcheckmates: [boolean, boolean, boolean, boolean];\n\tstalemates: [boolean, boolean, boolean, boolean];\n}\n\nexport interface FENEffectSettings {\n\tignoreCheckmateChecks: boolean;\n\tignoreNextTurn: boolean;\n}\n\nexport const createDefaultFENEffectSettings = (): FENEffectSettings => ({\n\tignoreCheckmateChecks: false,\n\tignoreNextTurn: false\n});\n\nexport interface ArmyDeathSettings {\n\texcludeRoyals: boolean;\n\tonlyPawns: boolean;\n\tdoNotSetDead: boolean;\n}\n\nexport const createDefaultArmyDeathSettings = (): ArmyDeathSettings => ({\n\texcludeRoyals: false,\n\tonlyPawns: false,\n\tdoNotSetDead: false\n});\n\nexport function getNeighboringSideToMove(player: NumericColor, dead: PlayerBooleanTuple) {\n\tlet sideToMove: number = player;\n\tdo {\n\t\tsideToMove = sideToMove === totalPlayers - 1 ? 0 : sideToMove + 1;\n\t} while (dead[sideToMove]);\n\n\tif (verifyNumericColor(sideToMove)) {\n\t\treturn sideToMove;\n\t} else throw new Error(`Unexpected numeric color: ${sideToMove}`);\n}\n","import { createTuple, createTupleFromCallback, Tuple, verifyTupleType } from \"@client/ts/baseTypes\";\nimport { compareArrays } from \"@client/ts/utils/ArrayUtils\";\nimport type { PlayerBooleanTuple } from \"../../Board/Board\";\nimport { compareCoordinates, stringifyCoordinate, unstringifyCoordinate } from \"../../Board/BoardInterface\";\nimport { boardDimension, colors, convertCoordinateToPGN4, totalPlayers } from \"../../GameInformation/GameData\";\nimport { Coordinate, verifyNumericColor } from \"../../GameInformation/GameUnits/GameUnits\";\nimport { createPieceFromString, PieceString } from \"../../GameInformation/GameUnits/PieceString\";\nimport { PieceLetter, verifyPieceLetter } from \"../../PieceControl/PieceControlInterface\";\nimport type { DynamicFENOptionTag, FENOptionsTags, StaticFENOptionTag } from \"./FENOptionsTagsInterface\";\nimport {\n\tverifyZombieType,\n\tZombieType\n} from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/BotInterface\";\nimport { PGN4_SYNTAX } from \"@client/ts/logic/utils/Tags/Moves/ParsePGNMoves\";\nimport { parseEnPassantCoordinates, parseSingleCoordinate } from \"@client/ts/logic/utils/Tags/Utils\";\nimport { verifyObjectType } from \"@client/ts/utils/ObjectUtils\";\n\ntype ExtractTagsByType<T> = {\n\t[K in keyof FENOptionsTags]: FENOptionsTags[K] extends StaticFENOptionTag<T> ? K : never;\n}[keyof FENOptionsTags];\ntype ExtractTagKeysByType<T> = keyof Pick<FENOptionsTags, ExtractTagsByType<T>>;\n\nconst verifyParameterType = <T>(param: unknown, type: string): param is Tuple<T, typeof totalPlayers> => {\n\treturn Array.isArray(param) && verifyTupleType(param, totalPlayers) && param.every((v) => typeof v === type);\n};\n\ninterface TagFactoryParameters<K extends keyof FENOptionsTags> {\n\tkey: K;\n\tdefaultValue: FENOptionsTags[K][\"value\"];\n\tname: string;\n}\ninterface DynamicTagFactoryParameters<K extends keyof FENOptionsTags> extends TagFactoryParameters<K> {\n\tisStatic: false;\n}\ninterface StaticTagFactoryParameters<K extends keyof FENOptionsTags> extends TagFactoryParameters<K> {\n\tisStatic: true;\n}\ntype OverloadTagFactoryParameters<K extends keyof FENOptionsTags> = DynamicTagFactoryParameters<K> | StaticTagFactoryParameters<K>;\n\ntype FactoryGeneratedObject<K extends keyof FENOptionsTags> = StaticFENOptionTag<FENOptionsTags[K][\"value\"]> &\n\tPartial<DynamicFENOptionTag<FENOptionsTags[K][\"value\"]>>;\n\ntype BooleanTupleTag = ExtractTagKeysByType<PlayerBooleanTuple>;\nexport function createBooleanTupleTag(parameters: DynamicTagFactoryParameters<BooleanTupleTag>): DynamicFENOptionTag<PlayerBooleanTuple>;\nexport function createBooleanTupleTag(parameters: StaticTagFactoryParameters<BooleanTupleTag>): StaticFENOptionTag<PlayerBooleanTuple>;\nexport function createBooleanTupleTag(parameters: OverloadTagFactoryParameters<BooleanTupleTag>) {\n\tconst { defaultValue, key, isStatic, name } = parameters;\n\tconst resultingObject: FactoryGeneratedObject<BooleanTupleTag> = {\n\t\tvalue: [...defaultValue],\n\t\tparse(value): PlayerBooleanTuple {\n\t\t\tif (verifyParameterType<boolean>(value, \"boolean\")) {\n\t\t\t\treturn value;\n\t\t\t} else return this.createSnapshot();\n\t\t},\n\t\tserialize() {\n\t\t\tif (key === \"castleKingside\" || key === \"castleQueenside\" || key === \"dead\" || key === \"areBanksEnabled\") return;\n\t\t\tif (!compareArrays(this.value, defaultValue)) {\n\t\t\t\treturn `'${key}':(${this.value.join(\",\")})`;\n\t\t\t} else return;\n\t\t},\n\t\tcreateSnapshot() {\n\t\t\treturn [...this.value];\n\t\t},\n\t\tloadSnapshot(snapshot) {\n\t\t\tconst tuple: PlayerBooleanTuple = [...snapshot];\n\t\t\tthis.value = tuple;\n\t\t},\n\t\tgetName() {\n\t\t\treturn name;\n\t\t}\n\t};\n\n\tif (isStatic) delete resultingObject.loadSnapshot;\n\treturn resultingObject;\n}\n\nconst defaultPawnBaseRank = 2;\nexport const createPawnBaseRankTag = (): FENOptionsTags[\"pawnBaseRank\"] => ({\n\tvalue: defaultPawnBaseRank,\n\tparse(value) {\n\t\treturn typeof value === \"number\" && value > 0 && value <= boardDimension ? value : this.value;\n\t},\n\tserialize() {\n\t\treturn this.value === defaultPawnBaseRank ? undefined : `'pawnBaseRank':${this.value}`;\n\t},\n\tcreateSnapshot() {\n\t\treturn this.value;\n\t},\n\tgetName() {\n\t\treturn \"Pawns Home Rank\";\n\t}\n});\n\nexport const createEnPassantTag = (): FENOptionsTags[\"enPassant\"] => ({\n\tvalue: createTuple(null, totalPlayers),\n\tparse(input) {\n\t\tif (verifyParameterType<string>(input, \"string\")) {\n\t\t\treturn input.map((v) => parseEnPassantCoordinates(v) ?? null);\n\t\t} else return this.createSnapshot();\n\t},\n\tserialize() {\n\t\tif (this.value.some((v) => !v)) {\n\t\t\treturn `'enPassant':(${this.value\n\t\t\t\t.map((enP) => (enP ? `'${convertCoordinateToPGN4(enP[0])}:${convertCoordinateToPGN4(enP[1])}'` : \"''\"))\n\t\t\t\t.join(\",\")})`;\n\t\t} else return;\n\t},\n\tcreateSnapshot() {\n\t\treturn this.value.map((enP) => (enP ? [[...enP[0]], [...enP[1]]] : enP));\n\t},\n\tloadSnapshot(snapshot) {\n\t\tthis.value = snapshot.map((enP) => (enP ? [[...enP[0]], [...enP[1]]] : enP));\n\t},\n\tgetName() {\n\t\treturn \"En Passant\";\n\t}\n});\n\nconst defaultCastleWith = \"R\";\nexport const createCastleWithTag = (): FENOptionsTags[\"castleWith\"] => ({\n\tvalue: defaultCastleWith,\n\tparse(input) {\n\t\treturn typeof input === \"string\" ? input : this.value;\n\t},\n\tserialize() {\n\t\treturn this.value === defaultCastleWith ? undefined : `'castleWith':${this.value}`;\n\t},\n\tcreateSnapshot() {\n\t\treturn this.value;\n\t},\n\tgetName() {\n\t\treturn \"Second Castling Piece\";\n\t}\n});\n\nconst defaultBoxOffset = 0;\nexport const createBoxOffsetTag = (): FENOptionsTags[\"boxOffset\"] => ({\n\tvalue: defaultBoxOffset,\n\tparse(input) {\n\t\treturn typeof input === \"number\" && verifyNumericColor(input) ? input : this.value;\n\t},\n\tserialize() {\n\t\treturn this.value === defaultBoxOffset ? undefined : `'boxOffset':${this.value}`;\n\t},\n\tcreateSnapshot() {\n\t\treturn this.value;\n\t},\n\tgetName() {\n\t\treturn \"Box Offset\";\n\t}\n});\n\ntype BooleanTag = ExtractTagsByType<boolean>;\nexport function createBooleanTag(parameters: DynamicTagFactoryParameters<BooleanTag>): DynamicFENOptionTag<boolean>;\nexport function createBooleanTag(parameters: StaticTagFactoryParameters<BooleanTag>): StaticFENOptionTag<boolean>;\nexport function createBooleanTag(parameters: OverloadTagFactoryParameters<BooleanTag>) {\n\tconst { defaultValue, key, isStatic, name } = parameters;\n\tconst result: FactoryGeneratedObject<BooleanTag> = {\n\t\tvalue: defaultValue,\n\t\tparse(input) {\n\t\t\treturn typeof input === \"boolean\" ? input : this.createSnapshot();\n\t\t},\n\t\tserialize() {\n\t\t\treturn this.value === defaultValue ? undefined : `'${key}':${String(this.value)}`;\n\t\t},\n\t\tcreateSnapshot() {\n\t\t\treturn this.value;\n\t\t},\n\t\tloadSnapshot(snapshot) {\n\t\t\tthis.value = snapshot;\n\t\t},\n\t\tgetName() {\n\t\t\treturn name;\n\t\t}\n\t};\n\n\tif (isStatic) delete result.loadSnapshot;\n\treturn result;\n}\n\nconst defaultDimension: [number, number] = [14, 14];\nexport const createDimensionTag = (): FENOptionsTags[\"dim\"] => ({\n\tvalue: [...defaultDimension],\n\tparse(baseInput) {\n\t\tif (typeof baseInput !== \"string\") return this.createSnapshot();\n\t\tconst input = baseInput.split(\"x\");\n\t\treturn Array.isArray(input) &&\n\t\t\tverifyTupleType(input, 2) &&\n\t\t\tinput.every((i) => {\n\t\t\t\tconst v = Number(i);\n\t\t\t\treturn !isNaN(v) && v >= 2 && v <= 14 && v % 2 === 0;\n\t\t\t})\n\t\t\t? input.map((v) => Number(v)).reverse()\n\t\t\t: this.createSnapshot();\n\t},\n\tserialize() {\n\t\tif (compareArrays(this.value, defaultDimension)) return;\n\t\treturn `'dim':'${this.value.join(\"x\")}'`;\n\t},\n\tcreateSnapshot() {\n\t\treturn [...this.value];\n\t},\n\tgetName() {\n\t\treturn \"Board Dimension\";\n\t}\n});\n\nconst defaultZombies = createTuple(ZombieType.Rando, totalPlayers);\nexport const createZombiesTag = (): FENOptionsTags[\"zombieType\"] => ({\n\tvalue: [...defaultZombies],\n\tparse(input) {\n\t\tif (Array.isArray(input) && verifyTupleType(input, totalPlayers) && input.every<string>((v): v is string => typeof v === \"string\")) {\n\t\t\tconst newZombies = this.createSnapshot();\n\t\t\tfor (const color of colors) {\n\t\t\t\tconst zombieType = input[color];\n\t\t\t\tif (verifyZombieType(zombieType)) newZombies[color] = zombieType;\n\t\t\t}\n\n\t\t\treturn newZombies;\n\t\t} else return this.createSnapshot();\n\t},\n\tserialize() {\n\t\tif (compareArrays(this.value, defaultZombies)) return;\n\t\treturn `'zombieType':(${this.value.map((t, i) => (t === defaultZombies[i] ? \"''\" : `'${t}'`)).join(\",\")})`;\n\t},\n\tcreateSnapshot() {\n\t\treturn [...this.value];\n\t},\n\tgetName() {\n\t\treturn \"Zombie Types\";\n\t}\n});\n\nexport const createRoyalTag = (): FENOptionsTags[\"royal\"] => ({\n\tvalue: createTuple(null, totalPlayers),\n\tparse(input) {\n\t\tif (verifyParameterType<string>(input, \"string\")) {\n\t\t\treturn input.map((c) => parseSingleCoordinate(c) ?? null);\n\t\t} else return this.createSnapshot();\n\t},\n\tserialize() {\n\t\treturn `'royal':(${this.value.map((r) => (r ? `'${convertCoordinateToPGN4(r)}'` : \"''\")).join(\",\")})`;\n\t},\n\tcreateSnapshot() {\n\t\treturn this.value.map((c) => (c ? [...c] : c));\n\t},\n\tloadSnapshot(snapshot) {\n\t\tthis.value = snapshot.map((c) => (c ? [...c] : c));\n\t},\n\tgetName() {\n\t\treturn \"Set Royals\";\n\t},\n\tmapNewEndCoordinate(value, start, end) {\n\t\tconst currentValue = this.createSnapshot();\n\t\tthis.loadSnapshot(value);\n\t\tconst newValue = this.createSnapshot();\n\t\tthis.loadSnapshot(currentValue);\n\n\t\tconst changedIndex = newValue.findIndex((c) => c && compareCoordinates(c, start));\n\t\tif (changedIndex !== -1) {\n\t\t\tnewValue[changedIndex] = end;\n\t\t}\n\t\treturn newValue;\n\t}\n});\n\nexport const createLivesTag = (): FENOptionsTags[\"lives\"] => ({\n\tvalue: createTuple(null, totalPlayers),\n\tparse(input) {\n\t\tif (verifyParameterType<number>(input, \"number\")) {\n\t\t\treturn input;\n\t\t} else return this.createSnapshot();\n\t},\n\tserialize() {\n\t\tif (this.value.some((v) => v !== null)) {\n\t\t\treturn `'lives':(${this.value.map((l) => (l ? String(l) : \"1\")).join(\",\")})`;\n\t\t} else return;\n\t},\n\tcreateSnapshot() {\n\t\treturn [...this.value];\n\t},\n\tloadSnapshot(snapshot) {\n\t\tthis.value = [...snapshot];\n\t},\n\tgetName() {\n\t\treturn \"Royal Lives\";\n\t}\n});\n\nexport const createBankTag = (): FENOptionsTags[\"bank\"] => ({\n\tvalue: createTupleFromCallback(() => new Map<PieceString, number>(), totalPlayers),\n\tparse(input) {\n\t\tconst defaultBanks = createTupleFromCallback(() => new Map<PieceString, number>(), totalPlayers);\n\t\tif (verifyParameterType<string>(input, \"string\")) {\n\t\t\tfor (const color of colors) {\n\t\t\t\tfor (const pieceDefinition of input[color].split(\",\")) {\n\t\t\t\t\tconst [piece, count = 1] = pieceDefinition.split(\"x\").map((e, i) => (i === 1 ? Number(e) : e));\n\t\t\t\t\tif (typeof piece !== \"string\" || typeof count !== \"number\") continue;\n\t\t\t\t\tif (!/^(?:r|b|y|g).$/.test(piece)) continue;\n\t\t\t\t\tconst pieceLetter = piece.charAt(1);\n\t\t\t\t\tif (verifyPieceLetter(pieceLetter)) {\n\t\t\t\t\t\tdefaultBanks[color].set(createPieceFromString(piece), count);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn defaultBanks;\n\t},\n\tserialize() {\n\t\tif (this.value.some((b) => b.size !== 0)) {\n\t\t\treturn `'bank':(${this.value\n\t\t\t\t.map((bank) => {\n\t\t\t\t\tconst resultingStrings: string[] = [];\n\t\t\t\t\tfor (const [piece, count] of bank) {\n\t\t\t\t\t\tif (count === 1) {\n\t\t\t\t\t\t\tresultingStrings.push(piece.value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresultingStrings.push(`${piece.value}x${count}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn `'${resultingStrings.join(\",\")}'`;\n\t\t\t\t})\n\t\t\t\t.join(\",\")})`;\n\t\t} else return;\n\t},\n\tcreateSnapshot() {\n\t\treturn this.value.map((m) => [...m.entries()].map(([pieceString, count]) => [pieceString.toObject(), count]));\n\t},\n\tloadSnapshot(snapshot) {\n\t\tthis.value = snapshot.map(\n\t\t\t(v) => new Map(v.map(([pieceStringObject, count]) => [PieceString.fromObjectToClass(pieceStringObject), count]))\n\t\t);\n\t},\n\tgetName() {\n\t\treturn \"Piece Banks\";\n\t}\n});\n\nexport const createPromotedFromTag = (): FENOptionsTags[\"promotedFrom\"] => ({\n\tvalue: new Map(),\n\tparse(input) {\n\t\tconst promotedFromMap = new Map<Coordinate, PieceLetter>();\n\t\tif (!verifyObjectType(input)) return promotedFromMap;\n\t\tfor (const key in input) {\n\t\t\tif (!Object.prototype.hasOwnProperty.call(promotedFromMap, key)) continue;\n\t\t\tconst parsedCoordinate = parseSingleCoordinate(key);\n\t\t\tconst pieceLetter = input[key];\n\t\t\tif (!parsedCoordinate || typeof pieceLetter !== \"string\" || !verifyPieceLetter(pieceLetter)) continue;\n\n\t\t\tpromotedFromMap.set(parsedCoordinate, pieceLetter);\n\t\t}\n\n\t\treturn promotedFromMap;\n\t},\n\tserialize() {\n\t\tif (this.value.size === 0) return;\n\t\tconst promotedFromStrings: string[] = [];\n\t\tfor (const [coordinate, piece] of this.value) {\n\t\t\tpromotedFromStrings.push(`'${convertCoordinateToPGN4(coordinate)}':'${piece}'`);\n\t\t}\n\n\t\treturn `'promotedFrom':{${promotedFromStrings.join(\",\")}}`;\n\t},\n\tcreateSnapshot() {\n\t\tconst newMap: Array<[Coordinate, PieceLetter]> = [];\n\t\tfor (const [coordinate, pieceLetter] of this.value.entries()) {\n\t\t\tnewMap.push([[...coordinate], pieceLetter]);\n\t\t}\n\n\t\treturn newMap;\n\t},\n\tloadSnapshot(snapshot) {\n\t\tthis.value.clear();\n\t\tfor (const [coordinate, pieceLetter] of snapshot) {\n\t\t\tthis.value.set([...coordinate], pieceLetter);\n\t\t}\n\t},\n\tgetName() {\n\t\treturn \"Promoted From\";\n\t},\n\tmapNewEndCoordinate(value, start, end) {\n\t\tconst currentValue = this.createSnapshot();\n\t\tthis.loadSnapshot(value);\n\t\tconst newValue = this.createSnapshot();\n\t\tthis.loadSnapshot(currentValue);\n\n\t\tconst changedIndex = newValue.find(([c, ]) => compareCoordinates(c, start));\n\t\tif (changedIndex) changedIndex[0] = end;\n\t\treturn newValue;\n\t}\n});\n\nexport const createSetupPointsTag = (): FENOptionsTags[\"setupPoints\"] => ({\n\tvalue: null,\n\tparse(input) {\n\t\tif (verifyParameterType<number>(input, \"number\")) {\n\t\t\treturn input;\n\t\t} else return this.createSnapshot();\n\t},\n\tserialize() {\n\t\tif (this.value) {\n\t\t\treturn `'setupPoints':(${this.value.join(\",\")})`;\n\t\t} else return;\n\t},\n\tcreateSnapshot() {\n\t\treturn this.value ? [...this.value] : this.value;\n\t},\n\tloadSnapshot(snapshot) {\n\t\tthis.value = snapshot ? [...snapshot] : snapshot;\n\t},\n\tgetName() {\n\t\treturn \"Setup Points\";\n\t}\n});\n\nexport const createSeirawanDropsTag = (): FENOptionsTags[\"seirawanDrops\"] => ({\n\tvalue: createTupleFromCallback(() => new Set<string>(), totalPlayers),\n\tparse(input) {\n\t\tconst defaultValue = createTupleFromCallback(() => new Set<string>(), totalPlayers);\n\t\tif (\n\t\t\tArray.isArray(input) &&\n\t\t\t(verifyTupleType(input, totalPlayers) || verifyTupleType(input, totalPlayers + 1)) &&\n\t\t\tinput.every<unknown[]>((v): v is unknown[] => Array.isArray(v))\n\t\t) {\n\t\t\tfor (const color of colors) {\n\t\t\t\tconst seirawanDropsArray = input[color];\n\t\t\t\tif (!seirawanDropsArray.every<string>((v): v is string => typeof v === \"string\")) continue;\n\n\t\t\t\tfor (const pieceDefinition of seirawanDropsArray) {\n\t\t\t\t\tif (!PGN4_SYNTAX.COORDINATE_REGEX.test(pieceDefinition)) continue;\n\t\t\t\t\tconst coordinate = parseSingleCoordinate(pieceDefinition);\n\t\t\t\t\tif (coordinate) {\n\t\t\t\t\t\tdefaultValue[color].add(stringifyCoordinate(coordinate));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn defaultValue;\n\t},\n\tserialize() {\n\t\tif (this.value.every((m) => m.size === 0)) return;\n\t\treturn `'seirawanDrops':(${this.value\n\t\t\t.map((coordinates) => {\n\t\t\t\treturn `(${[...coordinates].map((coord) => `'${convertCoordinateToPGN4(unstringifyCoordinate(coord))}'`).join(\",\")})`;\n\t\t\t})\n\t\t\t.join(\",\")})`;\n\t},\n\tcreateSnapshot() {\n\t\treturn this.value.map((s) => [...s.values()]);\n\t},\n\tloadSnapshot(snapshot) {\n\t\tthis.value = snapshot.map((s) => new Set(s));\n\t},\n\tgetName() {\n\t\treturn \"Set Seirawan Drops\";\n\t}\n});\n","import { createTuple, Tuple } from \"@client/ts/baseTypes\";\nimport type { Coordinate, NumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport type { ZombieType } from \"@moveGeneration/VariantRules/VariantRuleDefinitions/BoardVariantModules/EngineMoveGeneration/BotInterface\";\nimport type { Memento } from \"../../../BaseInterfaces\";\nimport type { PlayerBooleanTuple } from \"../../Board/Board\";\nimport { totalPlayers } from \"../../GameInformation/GameData\";\nimport type { PieceString, PieceStringObject } from \"../../GameInformation/GameUnits/PieceString\";\nimport type { PieceLetter } from \"../../PieceControl/PieceControlInterface\";\nimport * as Tags from \"./FENOptionsTags\";\n\nexport interface StaticFENOptionTag<T, S = T> {\n\tvalue: T;\n\tparse(value: unknown): T;\n\tserialize(): string | undefined;\n\tcreateSnapshot(): S;\n\tgetName(): string;\n\tmapNewEndCoordinate?(value: S, startCoordinate: Coordinate, endCoordinate: Coordinate): S;\n}\nexport type DynamicFENOptionTag<T, S = T> = StaticFENOptionTag<T, S> & Memento<S>;\nexport const verifyDynamicFENOptionKey = (\n\tfenTag: StaticFENOptionTag<unknown> | DynamicFENOptionTag<unknown>,\n\tkey: keyof FENOptionsTags\n): key is keyof FENOptionsTagsSnapshot => \"loadSnapshot\" in fenTag;\nexport const verifyDynamicTag = (fenTag: StaticFENOptionTag<unknown> | DynamicFENOptionTag<unknown>): fenTag is DynamicFENOptionTag<unknown> =>\n\t\"loadSnapshot\" in fenTag;\n\nexport interface FENOptionsTags {\n\tdead: DynamicFENOptionTag<PlayerBooleanTuple>;\n\tresigned: DynamicFENOptionTag<PlayerBooleanTuple>;\n\n\tpawnBaseRank: StaticFENOptionTag<number>;\n\tenPassant: DynamicFENOptionTag<Tuple<[Coordinate, Coordinate] | null, typeof totalPlayers>>;\n\n\tcastleKingside: DynamicFENOptionTag<PlayerBooleanTuple>;\n\tcastleQueenside: DynamicFENOptionTag<PlayerBooleanTuple>;\n\tcastleWith: StaticFENOptionTag<string>;\n\n\tboxOffset: StaticFENOptionTag<NumericColor>;\n\twb: StaticFENOptionTag<boolean>;\n\tdim: StaticFENOptionTag<[number, number]>;\n\tnoCorners: StaticFENOptionTag<boolean>;\n\n\tzombieType: StaticFENOptionTag<Tuple<ZombieType, typeof totalPlayers>>;\n\tzombieImmune: StaticFENOptionTag<PlayerBooleanTuple>;\n\n\troyal: DynamicFENOptionTag<Tuple<Coordinate | null, typeof totalPlayers>>;\n\tlives: DynamicFENOptionTag<Tuple<number | null, typeof totalPlayers>>;\n\n\tbank: DynamicFENOptionTag<\n\t\tTuple<Map<PieceString, number>, typeof totalPlayers>,\n\t\tTuple<Array<[PieceStringObject, number]>, typeof totalPlayers>\n\t>;\n\tpromotedFrom: DynamicFENOptionTag<Map<Coordinate, PieceLetter>, Array<[Coordinate, PieceLetter]>>;\n\tsetupPoints: DynamicFENOptionTag<Tuple<number, typeof totalPlayers> | null>;\n\tsetupComplete: DynamicFENOptionTag<PlayerBooleanTuple>;\n\tseirawanDrops: DynamicFENOptionTag<Tuple<Set<string>, typeof totalPlayers>, Tuple<string[], typeof totalPlayers>>;\n\tareBanksEnabled: DynamicFENOptionTag<PlayerBooleanTuple>;\n}\n\ntype FENOptionsDynamicTags = Pick<\n\tFENOptionsTags,\n\t{\n\t\t[K in keyof FENOptionsTags]: FENOptionsTags[K] extends DynamicFENOptionTag<FENOptionsTags[K][\"value\"]> ? K : never;\n\t}[keyof FENOptionsTags]\n>;\nexport type FENOptionsTagsSnapshot = {\n\t[K in keyof FENOptionsDynamicTags]: ReturnType<FENOptionsTags[K][\"createSnapshot\"]>;\n};\nexport type FENOptionsSerializedState = {\n\t[K in keyof FENOptionsTags]: ReturnType<FENOptionsTags[K][\"createSnapshot\"]>;\n};\n\nexport function createFENOptionsTags(): FENOptionsTags {\n\treturn {\n\t\tdead: Tags.createBooleanTupleTag({ key: \"dead\", defaultValue: createTuple(false, totalPlayers), isStatic: false, name: \"Dead Players\" }),\n\t\tresigned: Tags.createBooleanTupleTag({\n\t\t\tkey: \"resigned\",\n\t\t\tdefaultValue: createTuple(false, totalPlayers),\n\t\t\tisStatic: false,\n\t\t\tname: \"Resigned Players\"\n\t\t}),\n\n\t\tpawnBaseRank: Tags.createPawnBaseRankTag(),\n\t\tenPassant: Tags.createEnPassantTag(),\n\n\t\tboxOffset: Tags.createBoxOffsetTag(),\n\t\twb: Tags.createBooleanTag({ key: \"wb\", defaultValue: false, isStatic: true, name: \"White & Black Color Theme\" }),\n\t\tdim: Tags.createDimensionTag(),\n\t\tnoCorners: Tags.createBooleanTag({ key: \"noCorners\", defaultValue: false, isStatic: true, name: \"Full Board Size\" }),\n\n\t\tcastleKingside: Tags.createBooleanTupleTag({\n\t\t\tkey: \"castleKingside\",\n\t\t\tdefaultValue: createTuple(true, totalPlayers),\n\t\t\tisStatic: false,\n\t\t\tname: \"Kingside Castling\"\n\t\t}),\n\t\tcastleQueenside: Tags.createBooleanTupleTag({\n\t\t\tkey: \"castleQueenside\",\n\t\t\tdefaultValue: createTuple(true, totalPlayers),\n\t\t\tisStatic: false,\n\t\t\tname: \"Queenside Castling\"\n\t\t}),\n\t\tcastleWith: Tags.createCastleWithTag(),\n\n\t\tzombieType: Tags.createZombiesTag(),\n\t\tzombieImmune: Tags.createBooleanTupleTag({\n\t\t\tkey: \"zombieImmune\",\n\t\t\tdefaultValue: createTuple(false, totalPlayers),\n\t\t\tisStatic: false,\n\t\t\tname: \"Immune Zombies\"\n\t\t}),\n\n\t\troyal: Tags.createRoyalTag(),\n\t\tlives: Tags.createLivesTag(),\n\n\t\tbank: Tags.createBankTag(),\n\t\tpromotedFrom: Tags.createPromotedFromTag(),\n\t\tsetupPoints: Tags.createSetupPointsTag(),\n\t\tsetupComplete: Tags.createBooleanTupleTag({\n\t\t\tkey: \"setupComplete\",\n\t\t\tdefaultValue: createTuple(true, totalPlayers),\n\t\t\tisStatic: false,\n\t\t\tname: \"Is Setup Complete\"\n\t\t}),\n\t\tseirawanDrops: Tags.createSeirawanDropsTag(),\n\t\tareBanksEnabled: Tags.createBooleanTupleTag({\n\t\t\tkey: \"areBanksEnabled\",\n\t\t\tdefaultValue: createTuple(false, totalPlayers),\n\t\t\tisStatic: false,\n\t\t\tname: \"Are Piece Banks Enabled\"\n\t\t})\n\t};\n}\n\nexport function createFENOptionsTagsSnapshot(tags: FENOptionsTags): FENOptionsTagsSnapshot {\n\tconst resultingTags: Partial<FENOptionsTagsSnapshot> = {};\n\tlet fenTag: keyof FENOptionsTags;\n\tfor (fenTag in tags) {\n\t\tif (!Object.prototype.hasOwnProperty.call(tags, fenTag)) continue;\n\t\tconst tag = tags[fenTag];\n\t\tif (!verifyDynamicFENOptionKey(tag, fenTag) || !verifyDynamicTag(tag)) continue;\n\t\tresultingTags[fenTag] = tag.createSnapshot() as never;\n\t}\n\n\treturn resultingTags as FENOptionsTagsSnapshot;\n}\n","import { throwOnNever, Tuple } from \"@client/ts/baseTypes\";\nimport { truncateNumber } from \"@utils/NumberUtils\";\nimport type { Coordinate, NumericColor } from \"./GameUnits/GameUnits\";\n\nexport type PlayerName = \"Red\" | \"Blue\" | \"Yellow\" | \"Green\" | \"White\" | \"Black\";\nexport type IndividualTermination = \"Won the Race\" | \"Checkmated\" | \"Stalemated\" | \"Forfeits on Time\" | \"Resigned\" | \"Claimed the Win\";\nexport type GeneralTermination = \"King of the Hill\" | \"King Captured\" | \"Checkmate\" | \"Stalemate\";\nexport type Result = \"1-0\" | \"0-1\" | \"½-½\";\nexport type DrawnResult = \"Threefold Repetition\" | \"Insufficient Material\" | \"Timeout vs Insufficient Material\" | \"50-move Rule\";\nexport type Termination =\n\t| `${Uppercase<PlayerName>} ${Uppercase<IndividualTermination>}!`\n\t| `${Uppercase<GeneralTermination | DrawnResult>} • ${Result}`\n\t| `${Uppercase<GeneralTermination>}!`\n\t| `${Uppercase<DrawnResult>}`\n\t| \"½-½ AGREED.\";\nexport const validateComprehensiveUnionArray =\n\t<T>() =>\n\t<U extends readonly T[]>(arr: U & ([T] extends [U[number]] ? unknown : never)) =>\n\t\tarr;\n\nexport interface TimeControl {\n\tbaseTime: number;\n\tincrement: number;\n\tisDelay: boolean;\n}\n\nexport const playerNames = validateComprehensiveUnionArray<PlayerName>()([\"Red\", \"Blue\", \"Yellow\", \"Green\", \"White\", \"Black\"] as const);\nconst individualTerminations = validateComprehensiveUnionArray<IndividualTermination>()([\n\t\"Won the Race\",\n\t\"Checkmated\",\n\t\"Stalemated\",\n\t\"Forfeits on Time\",\n\t\"Claimed the Win\",\n\t\"Resigned\"\n] as const);\nconst generalWinningTerminations = validateComprehensiveUnionArray<GeneralTermination>()([\n\t\"Checkmate\",\n\t\"King Captured\",\n\t\"King of the Hill\",\n\t\"Stalemate\"\n] as const);\nexport const verifyWinningTermination = (termination: string): termination is GeneralTermination => {\n\tconst generalWins: readonly string[] = generalWinningTerminations;\n\treturn generalWins.includes(termination);\n};\nconst generalDrawingTerminations = validateComprehensiveUnionArray<DrawnResult>()([\n\t\"50-move Rule\",\n\t\"Insufficient Material\",\n\t\"Threefold Repetition\",\n\t\"Timeout vs Insufficient Material\"\n] as const);\nexport const verifyDrawingTermination = (termination: string): termination is DrawnResult => {\n\tconst generalDraws: readonly string[] = generalDrawingTerminations;\n\treturn generalDraws.includes(termination);\n};\nconst generalTerminations = validateComprehensiveUnionArray<GeneralTermination | DrawnResult>()([\n\t...generalWinningTerminations,\n\t...generalDrawingTerminations\n] as const);\nconst results = validateComprehensiveUnionArray<Result>()([\"0-1\", \"1-0\", \"½-½\"]);\n\nexport interface GamePlayerData {\n\telo?: number;\n\tname?: string;\n}\nexport interface GameData {\n\tgameNumber: number | undefined;\n\ttimeControl: TimeControl;\n\tplayers: Tuple<GamePlayerData, typeof totalPlayers>;\n\tsite: string | undefined;\n\tdate: Date | string | undefined;\n\tresult: string | undefined;\n\ttermination: Termination | undefined;\n}\n\nexport const validateTerminationString = (termination: string): termination is Termination => {\n\tconst capitalizedTermination = termination.toUpperCase();\n\tif (\n\t\tplayerNames.some((str) => capitalizedTermination.startsWith(str.toUpperCase())) &&\n\t\tindividualTerminations.some((str) => capitalizedTermination.endsWith(str.toUpperCase() + \"!\"))\n\t) {\n\t\treturn true;\n\t} else if (\n\t\t/.*?\\s•\\s.*/.test(capitalizedTermination) &&\n\t\tgeneralTerminations.some((str) => capitalizedTermination.startsWith(str.toUpperCase())) &&\n\t\tresults.some((str) => capitalizedTermination.endsWith(str.toUpperCase()))\n\t) {\n\t\treturn true;\n\t} else if (capitalizedTermination === \"½-½ AGREED.\") {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nexport const stringifyTimeControl = (timeControl: TimeControl): string => {\n\tconst noIncrement = timeControl.increment === 0;\n\tlet timeControlString = \"\";\n\tif (timeControl.baseTime < 60) {\n\t\ttimeControlString += noIncrement ? `${timeControl.baseTime * 60} sec` : `${timeControl.baseTime * 60}s`;\n\t} else if (timeControl.baseTime > 60 && noIncrement) {\n\t\ttimeControlString += `${truncateNumber(timeControl.baseTime / 60, 1)} min`;\n\t} else {\n\t\ttimeControlString += truncateNumber(timeControl.baseTime / 60, 1);\n\t}\n\n\tif (!noIncrement) {\n\t\ttimeControlString += \"|\";\n\t\ttimeControlString += timeControl.increment;\n\t}\n\tif (timeControl.isDelay) {\n\t\ttimeControlString += \"D\";\n\t}\n\n\treturn timeControlString;\n};\nexport const obtainTimeControlType = (timeControl: TimeControl): TimeControlType => {\n\tconst { baseTime, increment, isDelay } = timeControl;\n\tif (isDelay) {\n\t\tconst formula = baseTime / 40 + increment;\n\t\tif (formula > 11.5) {\n\t\t\treturn TimeControlType.Rapid;\n\t\t} else if (formula <= 1.375) {\n\t\t\treturn TimeControlType.Hyperbullet;\n\t\t} else if (formula <= 4.5) {\n\t\t\treturn TimeControlType.Bullet;\n\t\t} else {\n\t\t\treturn TimeControlType.Blitz;\n\t\t}\n\t} else {\n\t\tconst formula = baseTime / 60 + increment;\n\t\tif (formula > 7.5) {\n\t\t\treturn TimeControlType.Rapid;\n\t\t} else if (formula <= 0.5) {\n\t\t\treturn TimeControlType.Hyperbullet;\n\t\t} else if (formula <= 3) {\n\t\t\treturn TimeControlType.Bullet;\n\t\t} else {\n\t\t\treturn TimeControlType.Blitz;\n\t\t}\n\t}\n};\n\nexport const convertCoordinateToPGN4 = (coordinate: Coordinate, dimension = boardDimension): string => {\n\tif (dimension === boardDimension) {\n\t\treturn `${String.fromCharCode(coordinate[1] + 97)}${boardDimension - coordinate[0]}`;\n\t} else {\n\t\tconst alternation = (boardDimension - dimension) / 2;\n\t\treturn `${String.fromCharCode(coordinate[1] - alternation + 97)}${boardDimension - coordinate[0] - alternation}`;\n\t}\n};\nexport const convertCoordinateToPGN4Array = (coordinate: Coordinate, dimension = boardDimension): [string, number] => {\n\tif (dimension === boardDimension) {\n\t\treturn [String.fromCharCode(coordinate[1] + 97), boardDimension - coordinate[0]];\n\t} else {\n\t\tconst alternation = (boardDimension - dimension) / 2;\n\t\treturn [String.fromCharCode(coordinate[1] - alternation + 97), boardDimension - coordinate[0] - alternation];\n\t}\n};\n\nexport const getOppositePlacedColor = (color: NumericColor) => {\n\tswitch (color) {\n\t\tcase 0:\n\t\t\treturn 2;\n\t\tcase 1:\n\t\t\treturn 3;\n\t\tcase 2:\n\t\t\treturn 0;\n\t\tcase 3:\n\t\t\treturn 1;\n\t\tdefault:\n\t\t\treturn throwOnNever(color);\n\t}\n};\nexport const getPlayerNameFromColor = (color: NumericColor, wb = false): PlayerName => {\n\tswitch (color) {\n\t\tcase 0:\n\t\t\treturn wb ? \"White\" : \"Red\";\n\t\tcase 1:\n\t\t\treturn \"Blue\";\n\t\tcase 2:\n\t\t\treturn wb ? \"Black\" : \"Yellow\";\n\t\tcase 3:\n\t\t\treturn \"Green\";\n\t\tdefault:\n\t\t\treturn throwOnNever(color);\n\t}\n};\n\ninterface NumericColorAugmentationSettings {\n\twb: boolean;\n}\nexport const createDefaultNumericColorAdjustment = (): NumericColorAugmentationSettings => ({\n\twb: false\n});\n\nexport enum TimeControlType {\n\tHyperbullet = \"Hyperbullet\",\n\tBullet = \"Bullet\",\n\tBlitz = \"Blitz\",\n\tRapid = \"Rapid\"\n}\nexport enum VariantType {\n\tFFA = \"FFA\",\n\tTeams = \"Teams\",\n\tSolo = \"Solo\"\n}\n\nexport const totalPlayers = 4;\nexport const boardDimension = 14;\nexport const colors: readonly NumericColor[] = [0, 1, 2, 3];\n","import type { PlayerName } from \"../GameData\";\n\nexport type Coordinate = [i: number, j: number] | [i: number, j: number, promotion: string];\nexport type NumericColor = 0 | 1 | 2 | 3;\nexport const verifyNumericColor = (num: number): num is NumericColor => num >= 0 && num < 4;\nexport const nonPlayablePieces = {\n\twall: \"X\",\n\ttransparentWall: \"x\",\n\tduck: \"Θ\"\n} as const;\n\nexport const colorEnum = {\n\tr: 0,\n\tb: 1,\n\ty: 2,\n\tg: 3\n} as const;\nexport const verifyColorEnumValue = (value: string): value is keyof typeof colorEnum => value in colorEnum;\n\nexport const playerEnum: Record<PlayerName, NumericColor> = {\n\tRed: 0,\n\tBlue: 1,\n\tYellow: 2,\n\tGreen: 3,\n\tWhite: 0,\n\tBlack: 2\n} as const;\nexport const verifyPlayerEnumValue = (player: string): player is PlayerName => player in playerEnum;\n\nexport const stringColorEnum = {\n\t[0]: \"r\",\n\t[1]: \"b\",\n\t[2]: \"y\",\n\t[3]: \"g\",\n\t[4]: \"d\"\n} as const;\nexport type ColorEnum = (typeof stringColorEnum)[keyof typeof stringColorEnum];\n","import {\n\tduckLetter,\n\temptyLetter,\n\tpawnPieceLetter,\n\tPieceLetter,\n\tverifyPieceLetter,\n\twallPieceLetter\n} from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { colorEnum, nonPlayablePieces, NumericColor, stringColorEnum } from \"./GameUnits\";\n\nexport const deadColorIndex = 4;\ninterface PieceStringInterface {\n\treadonly value: string;\n\tisDead(): boolean;\n\tisEmpty(): boolean;\n\tisWall(): boolean;\n\tisPiece(): boolean;\n\tgetStringifiedColor(): keyof typeof colorEnum;\n\treadonly color: NumericColor | typeof deadColorIndex;\n\treadonly piece: PieceLetter;\n}\n\ninterface EmptyPieceStringInterface extends PieceStringInterface {\n\tisDead(): false;\n\tisEmpty(): true;\n\tisWall(): false;\n\tisPiece(): false;\n\treadonly color: never;\n\treadonly piece: never;\n}\nexport type EmptyPieceString = PieceString & EmptyPieceStringInterface;\n\ninterface WallPieceStringInterface extends PieceStringInterface {\n\tisDead(): true;\n\tisEmpty(): false;\n\tisWall(): true;\n\tisPiece(): false;\n\treadonly color: typeof deadColorIndex;\n\treadonly piece: PieceLetter & (typeof nonPlayablePieces)[keyof typeof nonPlayablePieces];\n}\nexport type WallPieceString = PieceString & WallPieceStringInterface;\n\ninterface DeadPieceStringInterface extends PieceStringInterface {\n\tisDead(): true;\n\tisEmpty(): false;\n\tisWall(): false;\n\tisPiece(): true;\n\treadonly color: typeof deadColorIndex;\n}\nexport type DeadPieceString = PieceString & DeadPieceStringInterface;\n\ninterface ActivePieceStringInterface extends PieceStringInterface {\n\tisDead(): false;\n\tisEmpty(): false;\n\tisWall(): false;\n\tisPiece(): true;\n\treadonly color: NumericColor;\n}\nexport type ActivePieceString = PieceString & ActivePieceStringInterface;\n\nexport interface PieceStringObject {\n\treadonly _color: NumericColor | typeof deadColorIndex;\n\treadonly _piece: PieceLetter;\n\treadonly value: string;\n}\n\nexport class PieceString implements PieceStringInterface {\n\tstatic comparePieceStrings(pieceString1: PieceString, pieceString2: PieceString) {\n\t\treturn pieceString1._piece === pieceString2._piece && pieceString1._color === pieceString2._color;\n\t}\n\n\tstatic comparePieceStringObjects(pieceString1: PieceStringObject, pieceString2: PieceStringObject) {\n\t\treturn pieceString1._piece === pieceString2._piece && pieceString1._color === pieceString2._color;\n\t}\n\n\tstatic fromObjectToClass(object: PieceStringObject) {\n\t\treturn new PieceString(object._color, object._piece);\n\t}\n\n\treadonly value: string;\n\tconstructor(private readonly _color: NumericColor | typeof deadColorIndex, private readonly _piece: PieceLetter) {\n\t\tthis.value = _piece.length ? (/[xXΘ]/.test(_piece) ? _piece : stringColorEnum[_color] + _piece) : \"\";\n\t}\n\n\tisDead(): this is DeadPieceStringInterface {\n\t\treturn this._color === deadColorIndex && !this.isWall();\n\t}\n\tisEmpty(): this is EmptyPieceStringInterface {\n\t\treturn this._piece.length === 0;\n\t}\n\tisWall(): this is WallPieceStringInterface {\n\t\treturn this.value.length === 1;\n\t}\n\tisPiece(): this is ActivePieceStringInterface {\n\t\treturn this.value.length === 2 && this._color !== deadColorIndex;\n\t}\n\n\tget piece() {\n\t\tif (this.isEmpty()) throw new TypeError(\"Accessing a piece string piece value while the piece string is empty.\");\n\t\treturn this._piece;\n\t}\n\n\tget color() {\n\t\tif (this.isEmpty()) throw new TypeError(\"Accessing a piece string color value while the piece string is empty.\");\n\t\treturn this._color;\n\t}\n\n\tgetStringifiedColor(): keyof typeof colorEnum {\n\t\treturn this.value.charAt(0) as keyof typeof colorEnum;\n\t}\n\n\ttoObject(): PieceStringObject {\n\t\treturn {\n\t\t\t_piece: this._piece,\n\t\t\t_color: this._color,\n\t\t\tvalue: this.value\n\t\t};\n\t}\n}\n\nexport const createPieceFromData = (color: NumericColor | typeof deadColorIndex, piece: string) => {\n\tif (verifyPieceLetter(piece)) {\n\t\treturn new PieceString(color, piece);\n\t}\n\tthrow new Error(\"Wrong color signature for the piece provided\");\n};\nexport const createPieceFromString = (piece: string) => {\n\tconst verifyColorEnum = (p: string): p is keyof typeof colorEnum => p in colorEnum;\n\n\tif (piece.length === 1 && verifyPieceLetter(piece)) {\n\t\treturn new PieceString(deadColorIndex, piece);\n\t} else {\n\t\tconst color = piece.charAt(0);\n\t\tconst pieceLetter = piece.charAt(1);\n\t\tif (!verifyPieceLetter(pieceLetter)) throw new Error(\"Wrong signature for the piece provided\");\n\t\tif (color === \"d\") {\n\t\t\treturn new PieceString(deadColorIndex, pieceLetter);\n\t\t} else {\n\t\t\tif (verifyColorEnum(color)) {\n\t\t\t\treturn new PieceString(colorEnum[color], pieceLetter);\n\t\t\t} else throw new Error(\"Wrong color signature for the piece provided\");\n\t\t}\n\t}\n};\n\nconst testEmptyPieceString = new PieceString(0, emptyLetter);\nif (!testEmptyPieceString.isEmpty()) throw new Error(\"Empty piece string is not isEmpty\");\nexport const emptyPieceString: EmptyPieceString = testEmptyPieceString;\n\nconst testWallPieceString = new PieceString(deadColorIndex, wallPieceLetter);\nif (!testWallPieceString.isWall()) throw new Error(\"Wall piece string is not isWall\");\nexport const wallPieceString: WallPieceString = testWallPieceString;\n\nconst testActivePieceString = new PieceString(0, pawnPieceLetter);\nif (!testActivePieceString.isPiece()) throw new Error(\"Active piece string is not isActive\");\nexport const pawnPieceString: ActivePieceString = testActivePieceString;\n\nconst testDuckPieceString = new PieceString(deadColorIndex, duckLetter);\nif (!testDuckPieceString.isWall()) throw new Error(\"Wall piece string is not isWall\");\nexport const duckPieceString: ActivePieceString = testActivePieceString;\n","import { throwOnNever } from \"@client/ts/baseTypes\";\nimport type { Coordinate } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { compareArrays } from \"../../../utils/ArrayUtils\";\nimport { isVerticalPlacement } from \"../../BaseInterfaces\";\nimport { unstringifyCoordinate } from \"../Board/BoardInterface\";\nimport { convertCoordinateToPGN4Array, convertCoordinateToPGN4 } from \"../GameInformation/GameData\";\nimport { deadColorIndex, pawnPieceString } from \"../GameInformation/GameUnits/PieceString\";\nimport {\n\tMoveData,\n\tMoveTreeSnapshot,\n\tMoveWrapper,\n\tMoveWrapperMetadata,\n\tSpecialMove,\n\tverifyDroppingMove,\n\tverifyInternalMove,\n\tverifyStandardMove\n} from \"./MoveTreeInterface\";\n\nexport type MoveNotationStringify = (moveWrapper: MoveWrapper, snapshot: MoveTreeSnapshot, dimension: number) => string;\n\nfunction generateCastlingString(moveData: MoveData): string {\n\tswitch (moveData.specialType) {\n\t\tcase SpecialMove.CastlingKingside:\n\t\t\treturn \"O-O\";\n\t\tcase SpecialMove.CastlingQueenside:\n\t\t\treturn \"O-O-O\";\n\t\tdefault:\n\t\t\treturn \"\";\n\t}\n}\n\nfunction extractPiece(metadata: MoveWrapperMetadata): string {\n\treturn metadata.movingPiece.piece !== pawnPieceString.piece ? metadata.movingPiece.piece : \"\";\n}\n\nfunction obtainAmbiguousOrthogonality(parameters: {\n\tmoveMetadata: MoveWrapperMetadata;\n\tmove: MoveData;\n\tsnapshot: MoveTreeSnapshot;\n\tisCapture: boolean;\n}) {\n\tconst {\n\t\tmoveMetadata,\n\t\tmove,\n\t\tsnapshot: {\n\t\t\tboardSnapshot: { board },\n\t\t\tpregeneratedAttacks: { pieceMovements }\n\t\t},\n\t\tisCapture\n\t} = parameters;\n\tconst { piece, color } = moveMetadata.movingPiece;\n\tconst isPawn = piece === pawnPieceString.piece;\n\tconst registeredPieces: Coordinate[] = [];\n\tfor (const [piece, movements] of pieceMovements) {\n\t\tconst parsedCoordinate = unstringifyCoordinate(piece);\n\t\tconst boardPiece = board[parsedCoordinate[0]][parsedCoordinate[1]];\n\t\tif (boardPiece.isEmpty() || boardPiece.color !== color || boardPiece.piece !== piece) continue;\n\t\tif (movements.find((m) => compareArrays(move.endCoordinates, m.move)) !== undefined) {\n\t\t\tregisteredPieces.push(parsedCoordinate);\n\t\t}\n\t}\n\n\tif (color === deadColorIndex) return [false, false];\n\tconst ambiguousRank =\n\t\t(isCapture && isPawn && isVerticalPlacement(color)) ||\n\t\tregisteredPieces.some((c, i) => registeredPieces.some((c2, j) => i !== j && c[0] === c2[0]));\n\tconst ambiguousFile =\n\t\t(isCapture && isPawn && !isVerticalPlacement(color)) ||\n\t\tregisteredPieces.some((c, i) => registeredPieces.some((c2, j) => i !== j && c[1] === c2[1]));\n\n\treturn [ambiguousRank, ambiguousFile];\n}\n\nfunction extractPromotion(move: MoveData): string {\n\treturn move.promotion ? `=${move.promotion[0].piece}` : \"\";\n}\n\nfunction extractChecksAndCheckmates(metadata: MoveWrapperMetadata): string {\n\treturn \"+\".repeat(metadata.checks) + \"#\".repeat(metadata.checkmates);\n}\n\nexport const shortenedMoveNotationStringify: MoveNotationStringify = (moveWrapper, snapshot, dimension) => {\n\tlet resultingString = \"\";\n\tlet isFirstCapturingMoveSet = false;\n\tfor (const move of moveWrapper.moveData) {\n\t\tif (verifyStandardMove(move)) {\n\t\t\tif ((resultingString += generateCastlingString(move))) continue;\n\t\t\tresultingString += extractPiece(moveWrapper.metadata);\n\t\t\tconst isCapture = !isFirstCapturingMoveSet && moveWrapper.metadata.isCapture;\n\t\t\tconst [ambiguousRank, ambiguousFile] = obtainAmbiguousOrthogonality({\n\t\t\t\tisCapture,\n\t\t\t\tmove,\n\t\t\t\tsnapshot,\n\t\t\t\tmoveMetadata: moveWrapper.metadata\n\t\t\t});\n\n\t\t\tif (ambiguousFile && !ambiguousRank) {\n\t\t\t\tresultingString += convertCoordinateToPGN4Array(move.startCoordinates, dimension)[1];\n\t\t\t} else if (!ambiguousFile && ambiguousRank) {\n\t\t\t\tresultingString += convertCoordinateToPGN4Array(move.startCoordinates, dimension)[0];\n\t\t\t} else if (ambiguousFile && ambiguousRank) {\n\t\t\t\tresultingString += convertCoordinateToPGN4(move.startCoordinates, dimension);\n\t\t\t}\n\n\t\t\tif (isCapture) {\n\t\t\t\tresultingString += \"x\";\n\t\t\t\tisFirstCapturingMoveSet = true;\n\t\t\t}\n\t\t\tresultingString += convertCoordinateToPGN4(move.endCoordinates, dimension);\n\t\t\tresultingString += extractPromotion(move);\n\t\t} else if (verifyDroppingMove(move)) {\n\t\t\tresultingString += `@${move.piece.piece}`;\n\t\t\tresultingString += `${convertCoordinateToPGN4(move.endCoordinates, dimension)}`;\n\t\t} else if (verifyInternalMove(move)) {\n\t\t\tresultingString += move.type;\n\t\t} else throwOnNever(move);\n\t}\n\n\tresultingString += extractChecksAndCheckmates(moveWrapper.metadata);\n\tresultingString += moveWrapper.metadata.annotation ?? \"\";\n\treturn resultingString;\n};\n\nexport const fullMoveNotationStringify: MoveNotationStringify = (moveWrapper) => {\n\tlet resultingString = \"\";\n\tlet firstStandardMoveCaptureSet = false;\n\tfor (const move of moveWrapper.moveData) {\n\t\tif (verifyStandardMove(move)) {\n\t\t\tif ((resultingString += generateCastlingString(move))) continue;\n\t\t\tresultingString += extractPiece(moveWrapper.metadata);\n\t\t\tresultingString += convertCoordinateToPGN4(move.startCoordinates);\n\t\t\tif (!firstStandardMoveCaptureSet && moveWrapper.metadata.isCapture) {\n\t\t\t\tresultingString += \"x\";\n\t\t\t\tfirstStandardMoveCaptureSet = true;\n\t\t\t} else resultingString += \"-\";\n\t\t\tresultingString += convertCoordinateToPGN4(move.endCoordinates);\n\t\t\tresultingString += extractPromotion(move);\n\t\t} else if (verifyDroppingMove(move)) {\n\t\t\tresultingString += `@${move.piece.piece}`;\n\t\t\tresultingString += `-${convertCoordinateToPGN4(move.endCoordinates)}`;\n\t\t} else if (verifyInternalMove(move)) {\n\t\t\tresultingString += move.type;\n\t\t} else throwOnNever(move);\n\t}\n\n\tresultingString += extractChecksAndCheckmates(moveWrapper.metadata);\n\treturn resultingString;\n};\n\nexport const moveNotation = {\n\tfullMoveNotation: fullMoveNotationStringify,\n\tshortenedMoveNotation: shortenedMoveNotationStringify\n} as const;\n","import type { BoardSnapshot, PreGeneratedAttacks } from \"../Board/BoardInterface\";\nimport {\n\tMoveWrapper,\n\tcompareMoves,\n\tgetMoveFromPathAndTree,\n\tMoveTreeSetNewMoveParameters,\n\tMoveTreeSnapshot,\n\tMove,\n\tMoveData,\n\tverifyStandardMove,\n\tProcessSafeMoveWrapper\n} from \"./MoveTreeInterface\";\nimport { moveNotation } from \"./MoveNotationStringifier\";\nimport { compareArrays, findLastIndex } from \"@utils/ArrayUtils\";\nimport type { Board, PlayerBooleanTuple } from \"@moveGeneration/Board/Board\";\nimport type { PostMoveResults } from \"@moveGeneration/FENData/FENDataInterface\";\nimport { pawnPieceString } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport { colors } from \"@moveGeneration/GameInformation/GameData\";\nimport { FENOptionsTags, verifyDynamicFENOptionKey } from \"@moveGeneration/FENData/FENOptions/FENOptionsTagsInterface\";\n\nexport function alterCurrentPath(current: number[], path: number[]) {\n\tlet currentMove = [...current];\n\n\tfor (let i = 0; i < currentMove.length; i++) {\n\t\tif (path[i] > currentMove[i]) break;\n\t\tif (path[i] === currentMove[i]) {\n\t\t\tif (i === path.length - 1) {\n\t\t\t\tcurrentMove = currentMove.slice(0, i + 1);\n\t\t\t\tcurrentMove[i]--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentMove = currentMove.slice(0, i + 1);\n\t\t\tcurrentMove[i] = path[i] - 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tconst indexOfMinus = currentMove.indexOf(-1);\n\tif (indexOfMinus !== -1) {\n\t\tcurrentMove = currentMove.slice(0, indexOfMinus);\n\n\t\tlet lastNumber = 0;\n\t\tdo {\n\t\t\tconst popped = currentMove.pop();\n\t\t\tif (popped === undefined) {\n\t\t\t\tlastNumber = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlastNumber = popped;\n\t\t} while (lastNumber <= 0);\n\n\t\tif (lastNumber !== -1) currentMove.push(lastNumber);\n\t}\n\n\treturn currentMove;\n}\n\nexport function verifyValidMove<T extends ProcessSafeMoveWrapper>(move: T | T[] | undefined): move is T {\n\treturn move !== undefined && !Array.isArray(move);\n}\nexport function assertValidMove<T extends ProcessSafeMoveWrapper>(move: T | T[] | undefined): asserts move is T {\n\tif (!move || Array.isArray(move)) {\n\t\tthrow new Error(\"The selected move is not a valid move\");\n\t}\n}\n\nexport const createMoveTree = (baseSnapshot: BoardSnapshot) => {\n\tconst snapshots = new WeakMap<MoveWrapper, MoveTreeSnapshot>();\n\tconst boardHashes = new Map<string, Array<readonly number[]>>();\n\tconst moves: MoveWrapper[] = [];\n\tconst startingSnapshot: MoveTreeSnapshot = {\n\t\tboardSnapshot: baseSnapshot,\n\t\tget hash(): string {\n\t\t\tthrow new Error(\"Should not access hash on base move\");\n\t\t},\n\t\tget pregeneratedAttacks(): PreGeneratedAttacks {\n\t\t\tthrow new Error(\"Should not access pregenerated attacks on base move\");\n\t\t}\n\t};\n\n\tfunction obtainMatchingAlternativeLine(baseMoveWrapper: MoveWrapper, newMoveWrapper: MoveWrapper) {\n\t\tfor (const [alternativeFirstMove] of baseMoveWrapper.alternativeLines) {\n\t\t\tif (alternativeFirstMove.moveData.length !== newMoveWrapper.moveData.length) continue;\n\t\t\tif (alternativeFirstMove.moveData.every((m, i) => compareMoves(m, newMoveWrapper.moveData[i]))) {\n\t\t\t\treturn alternativeFirstMove.path;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfunction stripEmptyAlternativeLines(current = moves) {\n\t\tfor (const moveWrapper of current) {\n\t\t\tfor (let i = 0; i < moveWrapper.alternativeLines.length; i++) {\n\t\t\t\tif (moveWrapper.alternativeLines[i].length === 0) {\n\t\t\t\t\tmoveWrapper.alternativeLines.splice(i, 1);\n\t\t\t\t} else stripEmptyAlternativeLines(moveWrapper.alternativeLines[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction stripDeletedMoveHashes(current: MoveWrapper[], currentMove: number[]) {\n\t\tfor (const moveWrapper of current) {\n\t\t\tconst snapshot = snapshots.get(moveWrapper);\n\t\t\tif (!snapshot) continue;\n\n\t\t\tconst { hash } = snapshot;\n\t\t\tconst boardHash = boardHashes.get(hash);\n\t\t\tif (boardHash) {\n\t\t\t\tif (boardHash.length === 1) {\n\t\t\t\t\tboardHashes.delete(hash);\n\t\t\t\t} else {\n\t\t\t\t\tconst currentLine = boardHash.findIndex((p) => compareArrays(p, currentMove));\n\t\t\t\t\tif (currentLine === -1) {\n\t\t\t\t\t\tconsole.error(\"Current line for move wrapper not found in board hashes\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tboardHash.splice(currentLine, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const line of moveWrapper.alternativeLines) stripDeletedMoveHashes(line, currentMove);\n\t\t}\n\t}\n\n\tfunction addBoardSnapshot(parameters: MoveTreeSetNewMoveParameters, currentMove: number[]) {\n\t\tconst { move, snapshot, fenDataString } = parameters;\n\t\tsnapshots.set(move, {\n\t\t\tboardSnapshot: snapshot.boardSnapshot,\n\t\t\tpregeneratedAttacks: snapshot.pregeneratedAttacks,\n\t\t\thash: fenDataString\n\t\t});\n\n\t\tconst boardHash = boardHashes.get(fenDataString);\n\t\tif (boardHash) {\n\t\t\tconst hasAdditionalPath = boardHash.find((p) => compareArrays(p, currentMove));\n\t\t\tboardHashes.set(fenDataString, hasAdditionalPath ? boardHash : [...boardHash, currentMove.slice()]);\n\t\t} else boardHashes.set(fenDataString, [currentMove.slice()]);\n\t}\n\n\tconst assignMoveWrapperKey = <K extends keyof MoveWrapper>(object: MoveWrapper, key: K, value: MoveWrapper[K]) => {\n\t\tobject[key] = value;\n\t};\n\n\treturn {\n\t\tmoves,\n\t\tcurrentMove: [-1],\n\t\tgetMove(path: number[]): MoveWrapper | MoveWrapper[] | undefined {\n\t\t\treturn getMoveFromPathAndTree(moves, path);\n\t\t},\n\t\tsetNewMove(parameters: MoveTreeSetNewMoveParameters): number[] {\n\t\t\tconst { move } = parameters;\n\t\t\tconst moveWrapper = this.getMove(move.path.slice(0, -1));\n\t\t\tlet path = move.path.slice();\n\n\t\t\tif (!moveWrapper) return path;\n\t\t\tif (Array.isArray(moveWrapper)) {\n\t\t\t\tif (moveWrapper.length > move.path[move.path.length - 1]) {\n\t\t\t\t\tconst currentMove = this.getMove(move.path);\n\t\t\t\t\tif (Array.isArray(currentMove)) {\n\t\t\t\t\t\tthis.setNewMove({ ...parameters, move: { ...move, path: [...move.path, currentMove.length] } });\n\t\t\t\t\t} else if (currentMove) {\n\t\t\t\t\t\tconst alternativeLine = obtainMatchingAlternativeLine(currentMove, move);\n\t\t\t\t\t\tif (alternativeLine) {\n\t\t\t\t\t\t\treturn alternativeLine;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurrentMove.alternativeLines.push([]);\n\t\t\t\t\t\t\tconst newMove = { ...move, path: [...move.path, currentMove.alternativeLines.length - 1, 0] };\n\t\t\t\t\t\t\tpath = newMove.path.slice();\n\t\t\t\t\t\t\treturn this.setNewMove({ ...parameters, move: newMove });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmoveWrapper.push(move);\n\t\t\t\t\taddBoardSnapshot(parameters, this.currentMove);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet key: keyof MoveWrapper;\n\t\t\t\tfor (key in move) {\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(move, key)) assignMoveWrapperKey(moveWrapper, key, move[key]);\n\t\t\t\t}\n\t\t\t\taddBoardSnapshot(parameters, this.currentMove);\n\t\t\t}\n\n\t\t\treturn path;\n\t\t},\n\t\tgetBoardSnapshot(move: MoveWrapper | -1) {\n\t\t\tif (move === -1) {\n\t\t\t\treturn startingSnapshot;\n\t\t\t} else {\n\t\t\t\treturn snapshots.get(move);\n\t\t\t}\n\t\t},\n\t\tdeleteMove(path: number[]) {\n\t\t\tlet items: MoveWrapper[] = [];\n\t\t\tconst moveWrapper = this.getMove(path.slice(0, -1));\n\t\t\tif (!moveWrapper) return;\n\t\t\tconst finalIndex = path[path.length - 1];\n\t\t\tif (Array.isArray(moveWrapper)) {\n\t\t\t\titems = [...moveWrapper.splice(finalIndex, moveWrapper.length - finalIndex)];\n\t\t\t} else {\n\t\t\t\tif (moveWrapper.alternativeLines.length > 0) {\n\t\t\t\t\titems = moveWrapper.alternativeLines.splice(path[path.length - 1], 1)[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstripDeletedMoveHashes(items, this.currentMove);\n\t\t\tstripEmptyAlternativeLines();\n\t\t\tconst newCurrentMove = alterCurrentPath(this.currentMove, path);\n\t\t\tthis.currentMove = newCurrentMove.length === 0 ? [-1] : newCurrentMove;\n\t\t},\n\t\tgetHash(preliminaryHashString: string): number {\n\t\t\tconst hash = boardHashes.get(preliminaryHashString);\n\t\t\tif (hash === undefined) return 0;\n\n\t\t\tlet totalCount = 0;\n\t\t\tfor (const line of hash) {\n\t\t\t\tfor (let i = 0; i < line.length; i++) {\n\t\t\t\t\tif (i + (1 % 2) !== 0 && i === line.length - 1) {\n\t\t\t\t\t\ttotalCount++;\n\t\t\t\t\t} else if (line[i] !== this.currentMove[i]) break;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn totalCount;\n\t\t},\n\t\tstringifyMove(moveWrapper: MoveWrapper, dimension: number) {\n\t\t\tconst snapshot = this.getBoardSnapshot(moveWrapper);\n\t\t\tif (!snapshot) {\n\t\t\t\tconsole.error(\"No snapshot assigned when moveWrapper is called\");\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\tlet key: keyof typeof moveNotation;\n\t\t\tfor (key in moveNotation) {\n\t\t\t\tif (!Object.prototype.hasOwnProperty.call(moveNotation, key)) continue;\n\t\t\t\tmoveWrapper.cachedNames[key] = moveNotation[key](moveWrapper, snapshot, dimension);\n\t\t\t}\n\t\t},\n\t\taugmentMoveWithMetadata(parameters: { move: Move; board: Board; makeMoveFunction: () => PostMoveResults }) {\n\t\t\tconst { move, board, makeMoveFunction } = parameters;\n\t\t\tconst standardMove = move.find<MoveData>((m): m is MoveData => verifyStandardMove(m));\n\t\t\tconst movingPiece = standardMove ? board.board[standardMove.startCoordinates[0]][standardMove.startCoordinates[1]] : pawnPieceString;\n\t\t\tconst capturedPieces = standardMove ? board.data.getCapturedPieces(standardMove).length !== 0 : false;\n\t\t\tconst postMoveResults = makeMoveFunction();\n\t\t\tconst deadColors: PlayerBooleanTuple = [...board.data.fenOptions.tag(\"dead\")];\n\t\t\tconst currentSideToMove = board.data.sideToMove,\n\t\t\t\tcurrentMove = board.moves.getMove(board.moves.currentMove);\n\t\t\tassertValidMove(currentMove);\n\t\t\tif (\n\t\t\t\tboard.moves.currentMove[board.moves.currentMove.length - 1] === 0 ||\n\t\t\t\tfindLastIndex(deadColors, (b) => !b) === currentSideToMove\n\t\t\t) {\n\t\t\t\tconst lastCurrentMoves = board.moves.getMove(board.moves.currentMove.slice(0, -1));\n\t\t\t\tif (!Array.isArray(lastCurrentMoves)) throw new Error(\"The selected move is not within an array\");\n\n\t\t\t\tfor (let i = lastCurrentMoves.length - 1; i >= 0; i--) {\n\t\t\t\t\tconst lastCurrent = lastCurrentMoves[i].metadata.currentFullMove;\n\t\t\t\t\tif (lastCurrent) {\n\t\t\t\t\t\tcurrentMove.metadata.currentFullMove = lastCurrent + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (i === 0) {\n\t\t\t\t\t\tif (currentMove.path.length === 1) {\n\t\t\t\t\t\t\tcurrentMove.metadata.currentFullMove = 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst alternativeLineContainer = board.moves.getMove(board.moves.currentMove.slice(0, -3));\n\t\t\t\t\t\t\tif (!Array.isArray(alternativeLineContainer)) throw new Error(\"The selected move is not within an array\");\n\t\t\t\t\t\t\tcurrentMove.metadata.currentFullMove =\n\t\t\t\t\t\t\t\talternativeLineContainer[\n\t\t\t\t\t\t\t\t\tfindLastIndex(alternativeLineContainer, (m) => Boolean(m.metadata.currentFullMove))\n\t\t\t\t\t\t\t\t].metadata.currentFullMove;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentMove.metadata.currentSideToMove = currentSideToMove;\n\t\t\tcurrentMove.metadata.isCapture = capturedPieces;\n\t\t\tcurrentMove.metadata.movingPiece = movingPiece;\n\t\t\tfor (const color of colors) {\n\t\t\t\tif (postMoveResults.checkmates[color]) {\n\t\t\t\t\tcurrentMove.metadata.checkmates++;\n\t\t\t\t} else if (postMoveResults.checks[color]) {\n\t\t\t\t\tcurrentMove.metadata.checks++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.stringifyMove(currentMove, Math.max(...board.data.fenOptions.tag(\"dim\")));\n\t\t},\n\t\tconstructPreliminaryHashString(boardObject: Board) {\n\t\t\tconst { board, data } = boardObject;\n\t\t\tlet builder = \"\";\n\t\t\tbuilder += data.sideToMove;\n\t\t\tlet key: keyof FENOptionsTags;\n\t\t\tfor (key in data.fenOptions.tags) {\n\t\t\t\tconst tag = data.fenOptions.tags[key];\n\t\t\t\tif (!verifyDynamicFENOptionKey(tag, key)) continue;\n\t\t\t\tconst serializedForm = tag.serialize();\n\t\t\t\tif (serializedForm) builder += serializedForm;\n\t\t\t}\n\t\t\tbuilder = board.reduce((p, n) => p + n.map((ps) => ps.value || \"-\").join(\"\"), builder);\n\t\t\treturn builder;\n\t\t}\n\t};\n};\n\nexport type MoveTreeInterface = ReturnType<typeof createMoveTree>;\n","import { BoardSnapshot, compareCoordinates, PreGeneratedAttacks } from \"../Board/BoardInterface\";\nimport type { Coordinate, NumericColor } from \"../GameInformation/GameUnits/GameUnits\";\nimport { pawnPieceString, PieceString, PieceStringObject } from \"../GameInformation/GameUnits/PieceString\";\nimport { moveNotation } from \"./MoveNotationStringifier\";\n\nexport enum SpecialMove {\n\tCastlingKingside,\n\tCastlingQueenside,\n\tEnPassant\n}\nexport enum InternalMoveSignature {\n\tResign = \"R\",\n\tTimeout = \"T\",\n\tClaimWin = \"C\",\n\tDrawByAgreement = \"D\",\n\tStalemate = \"S\",\n\tPass = \"P\",\n\tTeamsCheckmate = \"#\"\n}\n\nexport type MoveComponent = InternalMove | MoveData | DroppingMove;\nexport type Move = [MoveComponent, ...MoveComponent[]];\nexport const verifyRequiredMove = (move: MoveComponent[]): move is Move => move.length > 0;\n\nexport type HighlightArrow = [color: NumericColor, startCoordinate: Coordinate, endCoordinate: Coordinate];\nexport type HighlightSquare = [color: NumericColor, coordinate: Coordinate];\ninterface GeneralMetadata {\n\tcurrentSideToMove: NumericColor;\n\tcurrentFullMove?: number;\n\tplayerClock?: number;\n\thighlightedArrows: HighlightArrow[];\n\thighlightedSquares: HighlightSquare[];\n}\nexport interface MoveWrapperMetadata extends GeneralMetadata {\n\tmovingPiece: PieceString;\n\tisCapture: boolean;\n\tchecks: number;\n\tcheckmates: number;\n\tannotation?: string;\n}\n\nexport interface MoveWrapper {\n\tmoveData: Move;\n\talternativeLines: MoveWrapper[][];\n\tcomment: string;\n\tpath: number[];\n\tmetadata: MoveWrapperMetadata;\n\tcachedNames: Record<keyof typeof moveNotation, string>;\n}\n\nexport function verifyMoveWrapperProperties(moveWrapper: Partial<MoveWrapper>): moveWrapper is MoveWrapper {\n\treturn Boolean(\n\t\tmoveWrapper.alternativeLines && moveWrapper.comment !== undefined && moveWrapper.path && moveWrapper.metadata && moveWrapper.moveData\n\t);\n}\n\ntype DistributiveMove<T> = T extends object ? T[] : never;\nexport type DistributiveMoveArray = DistributiveMove<MoveComponent>;\ninterface ChainableMove {\n\tnextChainedMoves?: DistributiveMoveArray;\n\tisForcedContinuation?: boolean;\n\tisIrreversible?: boolean;\n}\n\nexport interface MoveData extends ChainableMove {\n\tstartCoordinates: Coordinate;\n\tendCoordinates: Coordinate;\n\tpromotion?: PieceString[];\n\tspecialType?: SpecialMove | undefined;\n}\n\nexport interface DroppingMove extends ChainableMove {\n\tpiece: PieceString;\n\tendCoordinates: Coordinate;\n}\n\nexport interface InternalMove extends ChainableMove {\n\ttype: InternalMoveSignature;\n}\n\ntype RecursiveHelper<T> = {\n\t[P in keyof T]: T[P] extends PieceString ? PieceStringObject : StripPieceStringObjects<T[P]>;\n};\nexport type StripPieceStringObjects<T> = T extends object ? RecursiveHelper<T> : T;\n\nexport interface ProcessSafeMoveWrapper {\n\talternativeLines: this[][];\n\tcomment: string;\n\tpath: number[];\n\tcachedNames: Record<keyof typeof moveNotation, string>;\n\tmetadata: GeneralMetadata;\n}\n\nexport function compareMoves(move1: MoveComponent, move2: MoveComponent): boolean {\n\tif (verifyStandardMove(move1)) {\n\t\tif (!verifyStandardMove(move2)) return false;\n\t\treturn (\n\t\t\tcompareCoordinates(move1.startCoordinates, move2.startCoordinates) &&\n\t\t\tcompareCoordinates(move1.endCoordinates, move2.endCoordinates) &&\n\t\t\t(move1.specialType === move2.specialType ||\n\t\t\t\tmove1.specialType === SpecialMove.EnPassant ||\n\t\t\t\tmove2.specialType === SpecialMove.EnPassant)\n\t\t);\n\t} else if (verifyDroppingMove(move1)) {\n\t\tif (!verifyDroppingMove(move2)) return false;\n\t\treturn compareCoordinates(move1.endCoordinates, move2.endCoordinates) && PieceString.comparePieceStrings(move1.piece, move2.piece);\n\t} else if (verifyInternalMove(move1)) {\n\t\tif (!verifyInternalMove(move2)) return false;\n\t\treturn move1.type === move2.type;\n\t}\n\n\tthrow new Error(`Unexpected move signature of first move ${JSON.stringify(move1)}`);\n}\n\nexport function createDummyMoveMetadata(): MoveWrapperMetadata {\n\treturn {\n\t\tisCapture: false,\n\t\tmovingPiece: pawnPieceString,\n\t\tchecks: 0,\n\t\tcheckmates: 0,\n\t\tcurrentSideToMove: 0,\n\t\thighlightedArrows: [],\n\t\thighlightedSquares: []\n\t};\n}\n\nexport const createBaseMoveWrapper = (\n\trequiredSettings: { path: number[]; moveData: Move },\n\tsettings: Partial<MoveWrapper> = {}\n): MoveWrapper => {\n\tconst wrapper: MoveWrapper = {\n\t\tpath: requiredSettings.path,\n\t\tmoveData: requiredSettings.moveData,\n\t\tcomment: \"\",\n\t\talternativeLines: [],\n\t\tmetadata: createDummyMoveMetadata(),\n\t\tcachedNames: {\n\t\t\tfullMoveNotation: \"\",\n\t\t\tshortenedMoveNotation: \"\"\n\t\t}\n\t};\n\n\treturn {\n\t\t...wrapper,\n\t\t...settings\n\t};\n};\n\ninterface MoveTypePredicate<T, S extends T> {\n\t(move: StripPieceStringObjects<T>): move is StripPieceStringObjects<S>;\n\t(move: T): move is S;\n}\nexport const verifyInternalMove: MoveTypePredicate<MoveComponent, InternalMove> = (move): move is never => \"type\" in move;\nexport const verifyDroppingMove: MoveTypePredicate<MoveComponent, DroppingMove> = (move): move is never => \"piece\" in move;\nexport const verifyStandardMove: MoveTypePredicate<MoveComponent, MoveData> = (move): move is never => \"startCoordinates\" in move;\nexport const verifyInternalMoveArray: MoveTypePredicate<DistributiveMoveArray, InternalMove[]> = (move): move is never => \"type\" in move[0];\nexport const verifyDroppingMoveArray: MoveTypePredicate<DistributiveMoveArray, DroppingMove[]> = (move): move is never => \"piece\" in move[0];\nexport const verifyStandardMoveArray: MoveTypePredicate<DistributiveMoveArray, MoveData[]> = (move): move is never =>\n\t\"startCoordinates\" in move[0];\n\nexport const getMoveFromPathAndTree = <T extends ProcessSafeMoveWrapper>(moves: T[], path: number[]): T[] | T | undefined => {\n\tif (path.length === 0) return moves;\n\tconst movePath = path.slice();\n\tif (movePath[0] >= moves.length) return;\n\tlet currentSelection = moves[movePath.shift() ?? 0];\n\twhile (movePath.length > 0) {\n\t\tconst currentIndex = movePath.shift();\n\t\tif (currentIndex !== undefined) {\n\t\t\tif (currentIndex >= currentSelection.alternativeLines.length) return;\n\t\t\tconst alternativeLine = currentSelection.alternativeLines[currentIndex];\n\t\t\tconst index = movePath.shift();\n\t\t\tif (index === undefined) {\n\t\t\t\treturn alternativeLine;\n\t\t\t}\n\n\t\t\tif (index >= alternativeLine.length) return;\n\t\t\tcurrentSelection = alternativeLine[index];\n\t\t}\n\t}\n\n\treturn currentSelection;\n};\n\nexport const getLatestChainedMoves = (move: DistributiveMoveArray): MoveComponent[] => {\n\tif (move.length > 0 && move[0].nextChainedMoves) {\n\t\treturn getLatestChainedMoves(move[0].nextChainedMoves);\n\t} else return move;\n};\n\nexport interface MoveTreeSetNewMoveParameters {\n\tmove: MoveWrapper;\n\tsnapshot: MoveTreeRequiredSnapshotValues;\n\tfenDataString: string;\n}\n\nexport interface MoveTreeSnapshot {\n\tboardSnapshot: BoardSnapshot;\n\thash: string;\n\tpregeneratedAttacks: PreGeneratedAttacks;\n}\nexport type MoveTreeRequiredSnapshotValues = Omit<MoveTreeSnapshot, \"hash\">;\n","import { boardDimension } from \"@moveGeneration/GameInformation/GameData\";\nimport type { NumericColor, Coordinate } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport type { FENData } from \"../FENData/FENData\";\nimport { deadColorIndex, PieceString } from \"../GameInformation/GameUnits/PieceString\";\nimport type { VariantHandlerTarget } from \"../VariantRules/VariantRuleInterface\";\nimport type { ControlConfiguration } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport {\n\tAttackType,\n\tPieceControlConfiguration,\n\tPieceControlGeneratedMove,\n\tPieceControlHooks,\n\tPieceControlInternalMove\n} from \"./PieceControlInterface\";\n\nexport class PieceControl implements VariantHandlerTarget<PieceControl> {\n\tcolor: NumericColor;\n\tsliding: Coordinate[];\n\tjumping: Coordinate[];\n\treadonly hooks: PieceControlHooks;\n\tmoves: PieceControlGeneratedMove[];\n\trayGenCache: Coordinate[];\n\tbaseRankActive: boolean;\n\timmunePieces: [boolean, boolean, boolean, boolean];\n\tfenData!: FENData;\n\n\tboard!: PieceString[][];\n\ti!: number;\n\tj!: number;\n\n\t__baseClass: PieceControl;\n\tinitDecoratorSettings() {\n\t\t/* no-op */\n\t}\n\t/*---------------------------------- INITIALIZATION -----------------------------------------*/\n\n\tconstructor() {\n\t\tthis.moves = [];\n\t\tthis.color = 0;\n\t\tthis.sliding = [];\n\t\tthis.jumping = [];\n\t\tthis.rayGenCache = [];\n\t\tthis.hooks = {\n\t\t\tuseTrajectory: undefined,\n\t\t\tusePerspective: undefined,\n\t\t\tusePawnLogic: undefined,\n\t\t\tuseHopping: false\n\t\t};\n\n\t\tthis.baseRankActive = false;\n\t\tthis.immunePieces = [false, false, false, false];\n\t\tthis.__baseClass = this;\n\t}\n\n\tconfigure(configuration: ControlConfiguration) {\n\t\tthis.color = configuration.color;\n\t\tthis.immunePieces = configuration.immunePieces;\n\t\t[this.i, this.j] = configuration.coordinates;\n\t\tconst baseRankCalc = [13 - this.i, this.j, this.i, 13 - this.j][this.color] - this.fenData.fenOptions.tag(\"pawnBaseRank\");\n\t\tthis.baseRankActive = configuration.baseRank ?? (baseRankCalc === -1 || baseRankCalc === -2);\n\t\tthis.board = configuration.board;\n\t}\n\n\tsetFENData(fenData: FENData) {\n\t\tthis.fenData = fenData;\n\t}\n\n\tprivate isRayTrace(attackType: AttackType) {\n\t\treturn attackType === AttackType.RayTrace || attackType === AttackType.RayTraceLimited;\n\t}\n\n\t/*---------------------------------- INITIALIZATION -----------------------------------------*/\n\t/*-------------------------------------------------------------------------------------------*/\n\t/*--------------------------------- MOVE GENERATION -----------------------------------------*/\n\n\tprivate modifyDisplacements(i: number, j: number): Coordinate {\n\t\tconst baseDisplacements: Coordinate[] = [\n\t\t\t[i, j],\n\t\t\t[j, -i],\n\t\t\t[-i, -j],\n\t\t\t[-j, i]\n\t\t];\n\t\treturn baseDisplacements[this.color];\n\t}\n\n\tprivate pushMove(settings: PieceControlInternalMove): void {\n\t\tif (\n\t\t\t!settings.isRayGen &&\n\t\t\tthis.hooks.usePawnLogic &&\n\t\t\tthis.hooks.usePawnLogic.promotionRanks &&\n\t\t\tthis.hooks.usePawnLogic.promotionRanks[this.color] === (this.color % 2 === 0 ? settings.i : settings.j) &&\n\t\t\tthis.hooks.usePawnLogic.promotionPieces\n\t\t) {\n\t\t\tthis.moves.push({\n\t\t\t\tmove: [settings.i, settings.j, this.hooks.usePawnLogic.promotionPieces.join(\"\")],\n\t\t\t\tirreversible: settings.irreversible ?? false\n\t\t\t});\n\t\t\treturn;\n\t\t} else {\n\t\t\tthis.moves.push({\n\t\t\t\tmove: [settings.i, settings.j],\n\t\t\t\tirreversible: settings.irreversible ?? false\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected generateSlidingAttack(settings: PieceControlConfiguration): void {\n\t\tlet [displacementI, displacementJ] = settings.displacement,\n\t\t\tlimit = settings.limit ?? Infinity;\n\t\tconst rayGenCache = settings.rayGenCache,\n\t\t\tspecial = settings.special ?? AttackType.Normal;\n\n\t\tlet rayTraceLimit = 0;\n\t\tif (this.hooks.usePerspective?.[this.color]) {\n\t\t\t[displacementI, displacementJ] = this.modifyDisplacements(displacementI, displacementJ);\n\t\t}\n\n\t\tlet startI = this.i + displacementI,\n\t\t\tstartJ = this.j + displacementJ;\n\t\tconst iLength = this.board[0].length,\n\t\t\tjLength = this.board.length;\n\t\tconst isRayGen = rayGenCache ?? this.isRayTrace(special);\n\n\t\twhile (limit > 0 && startI >= 0 && startI < iLength && startJ >= 0 && startJ < jLength) {\n\t\t\t// TODO add trajectories?\n\t\t\tif (this.getMovePossibility({ displacement: [startI, startJ], special, rayGenCache })) {\n\t\t\t\tthis.pushMove({ i: startI, j: startJ, isRayGen: Boolean(isRayGen), irreversible: settings.irreversible });\n\t\t\t}\n\n\t\t\tif (special === AttackType.RayTraceLimited && !this.board[startI][startJ].isEmpty()) {\n\t\t\t\trayTraceLimit++;\n\t\t\t\tif (rayTraceLimit === 2) break;\n\t\t\t}\n\t\t\tif (!this.isRayTrace(special) && !this.board[startI][startJ].isEmpty()) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tstartI += displacementI;\n\t\t\tstartJ += displacementJ;\n\t\t\tlimit--;\n\t\t}\n\t}\n\n\tprotected generateJumpAttack(settings: PieceControlConfiguration): void {\n\t\tlet [displacementI, displacementJ] = settings.displacement;\n\t\tconst rayGenCache = settings.rayGenCache,\n\t\t\tsquareBlockingIndex = settings.squareBlockingIndex,\n\t\t\tspecial = settings.special ?? AttackType.Normal;\n\t\tif (this.hooks.usePerspective?.[this.color]) {\n\t\t\t[displacementI, displacementJ] = this.modifyDisplacements(displacementI, displacementJ);\n\t\t}\n\n\t\tconst startI = this.i + displacementI,\n\t\t\tstartJ = this.j + displacementJ;\n\t\tconst isRayGen = rayGenCache ?? this.isRayTrace(special);\n\t\tlet isTestPassed = true;\n\n\t\tif (this.hooks.useTrajectory && squareBlockingIndex !== undefined) {\n\t\t\tconst trajectory = this.hooks.useTrajectory[squareBlockingIndex];\n\t\t\tlet trajectoryX, trajectoryY;\n\t\t\tif (this.hooks.usePerspective?.[this.color]) {\n\t\t\t\t[trajectoryX, trajectoryY] = this.modifyDisplacements(trajectory[0], trajectory[1]);\n\t\t\t} else {\n\t\t\t\t(trajectoryX = trajectory[0]), (trajectoryY = trajectory[1]);\n\t\t\t}\n\n\t\t\tif (!this.getMovePossibility({ displacement: [this.i + trajectoryX, this.j + trajectoryY], special, rayGenCache })) {\n\t\t\t\tisTestPassed = false;\n\t\t\t}\n\t\t}\n\n\t\tif (isTestPassed && this.getMovePossibility({ displacement: [startI, startJ], special, rayGenCache })) {\n\t\t\tthis.pushMove({ i: startI, j: startJ, isRayGen: Boolean(isRayGen), irreversible: settings.irreversible });\n\t\t}\n\t}\n\n\tgetMovePossibility(configuration: PieceControlConfiguration): boolean {\n\t\tconst {\n\t\t\tdisplacement: [i, j],\n\t\t\trayGenCache,\n\t\t\tspecial\n\t\t} = configuration;\n\t\tif (i < 0 || i >= boardDimension || j < 0 || j >= boardDimension) return false;\n\n\t\tconst piece = this.board[i][j];\n\t\tif (!piece.isEmpty() && piece.color !== deadColorIndex && !rayGenCache && !this.isRayTrace(special ?? AttackType.Normal)) {\n\t\t\tif (this.immunePieces[piece.color] || this.fenData.fenOptions.tag(\"zombieImmune\")[piece.color]) return false;\n\t\t}\n\n\t\tconst pushTo = () => {\n\t\t\tif (rayGenCache) {\n\t\t\t\tthis.rayGenCache.push(rayGenCache);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\tif (special === undefined || special === AttackType.Normal) {\n\t\t\tif (!piece.isWall()) {\n\t\t\t\treturn pushTo();\n\t\t\t}\n\t\t} else if (special === AttackType.RayGen) {\n\t\t\tif (!piece.isEmpty()) {\n\t\t\t\treturn pushTo();\n\t\t\t}\n\t\t} else if (special === AttackType.AttackOnly) {\n\t\t\tif (!piece.isEmpty() && !piece.isWall()) {\n\t\t\t\treturn pushTo();\n\t\t\t}\n\t\t} else if (special === AttackType.MoveOnly) {\n\t\t\tif (piece.isEmpty()) {\n\t\t\t\treturn pushTo();\n\t\t\t}\n\t\t} else if (this.isRayTrace(special)) {\n\t\t\treturn pushTo();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/*--------------------------------- MOVE GENERATION -----------------------------------------*/\n\t/*-------------------------------------------------------------------------------------------*/\n\t/*------------------------------- OUTPUT GENERATION -----------------------------------------*/\n\n\tgetPossibleCells(): void {\n\t\tif (this.hooks.useHopping) {\n\t\t\tthis.sliding.forEach((displacement) =>\n\t\t\t\tthis.generateSlidingAttack({ displacement, special: AttackType.RayGen, rayGenCache: [...displacement] })\n\t\t\t);\n\n\t\t\tconst moves = this.moves.slice();\n\t\t\tthis.moves = [];\n\t\t\tmoves.forEach((s, i) => {\n\t\t\t\tconst startI = s.move[0] + this.rayGenCache[i][0];\n\t\t\t\tconst startJ = s.move[1] + this.rayGenCache[i][1];\n\t\t\t\tif (this.getMovePossibility({ displacement: [startI, startJ] })) {\n\t\t\t\t\tthis.pushMove({ i: startI, j: startJ });\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.rayGenCache = [];\n\t\t} else {\n\t\t\tthis.sliding.forEach((a) => this.generateSlidingAttack({ displacement: a }));\n\t\t\tthis.jumping.forEach((a) => this.generateJumpAttack({ displacement: a }));\n\t\t}\n\t}\n\n\trayGenJumpingAttacks(): PieceControlGeneratedMove[] {\n\t\tthis.jumping.forEach((a) => this.generateJumpAttack({ displacement: a, special: AttackType.RayTrace }));\n\t\treturn this.moves.splice(0);\n\t}\n\n\trayGenSlidingAttacks(trace?: AttackType): PieceControlGeneratedMove[][] {\n\t\tconst slidingLines: PieceControlGeneratedMove[][] = [];\n\n\t\tthis.sliding.forEach((a) => {\n\t\t\tthis.generateSlidingAttack({ displacement: a, special: trace });\n\t\t\tif (this.moves.length !== 0) {\n\t\t\t\tslidingLines.push(this.moves.splice(0));\n\t\t\t}\n\t\t});\n\n\t\treturn slidingLines;\n\t}\n\n\tgetPseudoLegalMoves(): PieceControlGeneratedMove[] {\n\t\tthis.getPossibleCells();\n\t\treturn this.moves.splice(0);\n\t}\n\n\t/*------------------------------- OUTPUT GENERATION -----------------------------------------*/\n}\n","import type { Coordinate } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { PieceControl } from \"./PieceControl\";\nimport { AttackType, createPieceDeclaration, dameLetter, defaultPieces, grasshopperPieceLetter, pawnPieceLetter } from \"./PieceControlInterface\";\n\nconst orthogonalMoves: Coordinate[] = [\n\t[-1, 0],\n\t[1, 0],\n\t[0, 1],\n\t[0, -1]\n];\nconst diagonalMoves: Coordinate[] = [\n\t[-1, -1],\n\t[1, 1],\n\t[-1, 1],\n\t[1, -1]\n];\nconst kingDirections = [...orthogonalMoves, ...diagonalMoves];\nconst knightHops: Coordinate[] = [\n\t[-1, -2],\n\t[-2, -1],\n\t[-1, 2],\n\t[2, -1],\n\t[-2, 1],\n\t[1, -2],\n\t[1, 2],\n\t[2, 1]\n];\nconst camelHops: Coordinate[] = [\n\t[-1, -3],\n\t[-3, -1],\n\t[-1, 3],\n\t[3, -1],\n\t[-3, 1],\n\t[1, -3],\n\t[1, 3],\n\t[3, 1]\n];\nconst dabbabaHops: Coordinate[] = [\n\t[-2, 0],\n\t[2, 0],\n\t[0, 2],\n\t[0, -2]\n];\nconst alfilHops: Coordinate[] = [\n\t[-2, -2],\n\t[2, 2],\n\t[-2, 2],\n\t[2, -2]\n];\nexport const initPieceControlDeclarations = () => {\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.sliding = orthogonalMoves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 5,\n\t\t\t\tteamsPoints: 5,\n\t\t\t\tbotFFAValue: 7,\n\t\t\t\tbotTeamsValue: 7\n\t\t\t},\n\t\t\tpiece: defaultPieces.rook,\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: false,\n\t\t\t\tisSliding: true,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Rook\",\n\t\t\t\tshortName: defaultPieces.rook.toLowerCase()\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.sliding = diagonalMoves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 5,\n\t\t\t\tteamsPoints: 4,\n\t\t\t\tbotFFAValue: 6,\n\t\t\t\tbotTeamsValue: 6\n\t\t\t},\n\t\t\tpiece: defaultPieces.bishop,\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: false,\n\t\t\t\tisSliding: true,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: true\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Bishop\",\n\t\t\t\tshortName: defaultPieces.bishop.toLowerCase()\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = kingDirections;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 3,\n\t\t\t\tteamsPoints: 0,\n\t\t\t\tbotFFAValue: 3,\n\t\t\t\tbotTeamsValue: 3\n\t\t\t},\n\t\t\tpiece: defaultPieces.king,\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"King\",\n\t\t\t\tshortName: defaultPieces.king.toLowerCase()\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.sliding = kingDirections;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 9,\n\t\t\t\tteamsPoints: 10,\n\t\t\t\tbotFFAValue: 14,\n\t\t\t\tbotTeamsValue: 15\n\t\t\t},\n\t\t\tpiece: defaultPieces.queen,\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: false,\n\t\t\t\tisSliding: true,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Queen\",\n\t\t\t\tshortName: defaultPieces.queen.toLowerCase()\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.sliding = kingDirections;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 9,\n\t\t\t\tteamsPoints: 10,\n\t\t\t\tbotFFAValue: 13,\n\t\t\t\tbotTeamsValue: 13\n\t\t\t},\n\t\t\tpiece: dameLetter,\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: false,\n\t\t\t\tisSliding: true,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"1-point queen\",\n\t\t\t\tshortName: dameLetter.toLowerCase()\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = knightHops;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 3,\n\t\t\t\tteamsPoints: 3,\n\t\t\t\tbotFFAValue: 4,\n\t\t\t\tbotTeamsValue: 4\n\t\t\t},\n\t\t\tpiece: defaultPieces.knight,\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Knight\",\n\t\t\t\tshortName: defaultPieces.knight.toLowerCase()\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = [...knightHops, ...kingDirections];\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 5,\n\t\t\t\tteamsPoints: 5,\n\t\t\t\tbotFFAValue: 7,\n\t\t\t\tbotTeamsValue: 7\n\t\t\t},\n\t\t\tpiece: \"M\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"General\",\n\t\t\t\tshortName: \"m\",\n\t\t\t\tdescription: \"combines king and knight\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = diagonalMoves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 1,\n\t\t\t\tteamsPoints: 1,\n\t\t\t\tbotFFAValue: 0.6,\n\t\t\t\tbotTeamsValue: 0.6\n\t\t\t},\n\t\t\tpiece: \"F\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: true\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Ferz\",\n\t\t\t\tshortName: \"f\",\n\t\t\t\tdescription: \"moves one square diagonally\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = orthogonalMoves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 1,\n\t\t\t\tteamsPoints: 1,\n\t\t\t\tbotFFAValue: 0.4,\n\t\t\t\tbotTeamsValue: 0.4\n\t\t\t},\n\t\t\tpiece: \"W\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Wazir\",\n\t\t\t\tshortName: \"w\",\n\t\t\t\tdescription: \"moves one square horizontally or vertically\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = orthogonalMoves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 1,\n\t\t\t\tteamsPoints: 1,\n\t\t\t\tbotFFAValue: 0.4,\n\t\t\t\tbotTeamsValue: 0.4\n\t\t\t},\n\t\t\tpiece: \"W\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Wazir\",\n\t\t\t\tshortName: \"w\",\n\t\t\t\tdescription: \"moves one square horizontally or vertically\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = dabbabaHops;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 1,\n\t\t\t\tteamsPoints: 1,\n\t\t\t\tbotFFAValue: 1.6,\n\t\t\t\tbotTeamsValue: 1.6\n\t\t\t},\n\t\t\tpiece: \"S\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: true\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Dabbaba\",\n\t\t\t\tshortName: \"s\",\n\t\t\t\tdescription: \"jumps two squares horizontally or vertically\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.sliding = dabbabaHops;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 4,\n\t\t\t\tteamsPoints: 4,\n\t\t\t\tbotFFAValue: 5.4,\n\t\t\t\tbotTeamsValue: 5.4\n\t\t\t},\n\t\t\tpiece: \"T\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: false,\n\t\t\t\tisSliding: true,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: true\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Dabbaba-rider\",\n\t\t\t\tshortName: \"t\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = alfilHops;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 1,\n\t\t\t\tteamsPoints: 1,\n\t\t\t\tbotFFAValue: 0.5,\n\t\t\t\tbotTeamsValue: 0.5\n\t\t\t},\n\t\t\tpiece: \"I\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: true\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Alfil\",\n\t\t\t\tshortName: \"i\",\n\t\t\t\tdescription: \"jumps two squares diagonally\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.sliding = alfilHops;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 3,\n\t\t\t\tteamsPoints: 3,\n\t\t\t\tbotFFAValue: 4.5,\n\t\t\t\tbotTeamsValue: 4.5\n\t\t\t},\n\t\t\tpiece: \"J\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: false,\n\t\t\t\tisSliding: true,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: true\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Alfil-rider\",\n\t\t\t\tshortName: \"j\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = [...alfilHops, ...dabbabaHops];\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 3,\n\t\t\t\tteamsPoints: 3,\n\t\t\t\tbotFFAValue: 3,\n\t\t\t\tbotTeamsValue: 3\n\t\t\t},\n\t\t\tpiece: \"Y\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: true\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Alibaba\",\n\t\t\t\tshortName: \"y\",\n\t\t\t\tdescription: \"combines alfil and dabbaba\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.sliding = [...alfilHops, ...dabbabaHops];\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 6,\n\t\t\t\tteamsPoints: 6,\n\t\t\t\tbotFFAValue: 6.2,\n\t\t\t\tbotTeamsValue: 6.2\n\t\t\t},\n\t\t\tpiece: \"Z\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: false,\n\t\t\t\tisSliding: true,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: true\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Alibaba-rider\",\n\t\t\t\tshortName: \"z\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = knightHops;\n\t\t\t\tthis.sliding = kingDirections;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 12,\n\t\t\t\tteamsPoints: 12,\n\t\t\t\tbotFFAValue: 17,\n\t\t\t\tbotTeamsValue: 17\n\t\t\t},\n\t\t\tpiece: \"A\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: true,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Amazon\",\n\t\t\t\tshortName: \"a\",\n\t\t\t\tdescription: \"combines queen and knight\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = camelHops;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 3,\n\t\t\t\tteamsPoints: 3,\n\t\t\t\tbotFFAValue: 4.2,\n\t\t\t\tbotTeamsValue: 4.2\n\t\t\t},\n\t\t\tpiece: \"C\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: true\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Camel\",\n\t\t\t\tshortName: \"c\",\n\t\t\t\tdescription: \"an elongated 3-1 knight\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = knightHops;\n\t\t\t\tthis.sliding = orthogonalMoves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 7,\n\t\t\t\tteamsPoints: 7,\n\t\t\t\tbotFFAValue: 10,\n\t\t\t\tbotTeamsValue: 10\n\t\t\t},\n\t\t\tpiece: \"E\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: true,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Chancellor\",\n\t\t\t\tshortName: \"a\",\n\t\t\t\tdescription: \"combines rook and knight\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = knightHops;\n\t\t\t\tthis.sliding = diagonalMoves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 7,\n\t\t\t\tteamsPoints: 7,\n\t\t\t\tbotFFAValue: 9,\n\t\t\t\tbotTeamsValue: 9\n\t\t\t},\n\t\t\tpiece: \"H\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: true,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Archbishop\",\n\t\t\t\tshortName: \"h\",\n\t\t\t\tdescription: \"combines bishop and knight\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.sliding = knightHops;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 7,\n\t\t\t\tteamsPoints: 7,\n\t\t\t\tbotFFAValue: 10,\n\t\t\t\tbotTeamsValue: 10\n\t\t\t},\n\t\t\tpiece: \"O\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: false,\n\t\t\t\tisSliding: true,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Knight-rider\",\n\t\t\t\tshortName: \"o\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.sliding = camelHops;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 7,\n\t\t\t\tteamsPoints: 7,\n\t\t\t\tbotFFAValue: 8,\n\t\t\t\tbotTeamsValue: 8\n\t\t\t},\n\t\t\tpiece: \"L\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: false,\n\t\t\t\tisSliding: true,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: true\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Camel-rider\",\n\t\t\t\tshortName: \"l\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.jumping = [...camelHops, ...knightHops];\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 5,\n\t\t\t\tteamsPoints: 5,\n\t\t\t\tbotFFAValue: 8,\n\t\t\t\tbotTeamsValue: 8\n\t\t\t},\n\t\t\tpiece: \"V\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Wildebeest\",\n\t\t\t\tshortName: \"v\",\n\t\t\t\tdescription: \"combines camel and knight\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.hooks.usePerspective = [true, true, true, true];\n\t\t\t\tthis.hooks.usePawnLogic = {};\n\t\t\t}\n\n\t\t\tgetPossibleCells() {\n\t\t\t\tthis.generateJumpAttack({ displacement: [-1, -1], special: AttackType.AttackOnly });\n\t\t\t\tthis.generateJumpAttack({ displacement: [-1, 1], special: AttackType.AttackOnly });\n\t\t\t\tthis.generateSlidingAttack({\n\t\t\t\t\tdisplacement: [-1, 0],\n\t\t\t\t\tspecial: AttackType.MoveOnly,\n\t\t\t\t\tlimit: this.baseRankActive ? 2 : 1,\n\t\t\t\t\tirreversible: true\n\t\t\t\t});\n\t\t\t\treturn this.moves;\n\t\t\t}\n\n\t\t\trayGenJumpingAttacks() {\n\t\t\t\tthis.generateJumpAttack({ displacement: [-1, -1], special: AttackType.RayTrace });\n\t\t\t\tthis.generateJumpAttack({ displacement: [-1, 1], special: AttackType.RayTrace });\n\t\t\t\tconst moves = this.moves.slice();\n\t\t\t\tthis.moves = [];\n\t\t\t\treturn moves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 1,\n\t\t\t\tteamsPoints: 1,\n\t\t\t\tbotFFAValue: 1,\n\t\t\t\tbotTeamsValue: 0.4\n\t\t\t},\n\t\t\tpiece: pawnPieceLetter,\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: true,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Pawn\",\n\t\t\t\tshortName: pawnPieceLetter.toLowerCase()\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.hooks.usePerspective = [true, true, true, true];\n\t\t\t\tthis.hooks.usePawnLogic = {};\n\t\t\t}\n\n\t\t\tgetPossibleCells() {\n\t\t\t\tthis.generateSlidingAttack({\n\t\t\t\t\tdisplacement: [-1, -1],\n\t\t\t\t\tspecial: AttackType.MoveOnly,\n\t\t\t\t\tlimit: this.baseRankActive ? 2 : 1,\n\t\t\t\t\tirreversible: true\n\t\t\t\t});\n\t\t\t\tthis.generateSlidingAttack({\n\t\t\t\t\tdisplacement: [-1, 1],\n\t\t\t\t\tspecial: AttackType.MoveOnly,\n\t\t\t\t\tlimit: this.baseRankActive ? 2 : 1,\n\t\t\t\t\tirreversible: true\n\t\t\t\t});\n\t\t\t\tthis.generateJumpAttack({ displacement: [-1, -1], special: AttackType.AttackOnly });\n\t\t\t\treturn this.moves;\n\t\t\t}\n\n\t\t\trayGenJumpingAttacks() {\n\t\t\t\tthis.generateJumpAttack({ displacement: [-1, -1], special: AttackType.RayTrace });\n\t\t\t\tconst moves = this.moves.slice();\n\t\t\t\tthis.moves = [];\n\t\t\t\treturn moves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 1,\n\t\t\t\tteamsPoints: 1,\n\t\t\t\tbotFFAValue: 1,\n\t\t\t\tbotTeamsValue: 0.4\n\t\t\t},\n\t\t\tpiece: \"α\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: true,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Berolina\",\n\t\t\t\tshortName: \"alpha\",\n\t\t\t\tdescription: \"a pawn that moves diagonally and captures forwards\"\n\t\t\t}\n\t\t}\n\t});\n\n\tconst stoneGeneralControl = createPieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.hooks.usePerspective = [true, true, true, true];\n\t\t\t\tthis.hooks.usePawnLogic = {};\n\t\t\t}\n\n\t\t\tgetPossibleCells() {\n\t\t\t\tthis.generateSlidingAttack({\n\t\t\t\t\tdisplacement: [-1, -1],\n\t\t\t\t\tspecial: AttackType.MoveOnly,\n\t\t\t\t\tlimit: this.baseRankActive ? 2 : 0,\n\t\t\t\t\tirreversible: true\n\t\t\t\t});\n\t\t\t\tthis.generateSlidingAttack({\n\t\t\t\t\tdisplacement: [-1, 1],\n\t\t\t\t\tspecial: AttackType.MoveOnly,\n\t\t\t\t\tlimit: this.baseRankActive ? 2 : 0,\n\t\t\t\t\tirreversible: true\n\t\t\t\t});\n\t\t\t\tthis.generateJumpAttack({\n\t\t\t\t\tdisplacement: [-1, -1],\n\t\t\t\t\tirreversible: true\n\t\t\t\t});\n\t\t\t\tthis.generateJumpAttack({\n\t\t\t\t\tdisplacement: [-1, 1],\n\t\t\t\t\tirreversible: true\n\t\t\t\t});\n\t\t\t\treturn this.moves;\n\t\t\t}\n\n\t\t\trayGenJumpingAttacks() {\n\t\t\t\tthis.generateJumpAttack({ displacement: [-1, -1], special: AttackType.RayTrace });\n\t\t\t\tthis.generateJumpAttack({ displacement: [-1, 1], special: AttackType.RayTrace });\n\t\t\t\tconst moves = this.moves.slice();\n\t\t\t\tthis.moves = [];\n\t\t\t\treturn moves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 1,\n\t\t\t\tteamsPoints: 1,\n\t\t\t\tbotFFAValue: 1,\n\t\t\t\tbotTeamsValue: 0.4\n\t\t\t},\n\t\t\tpiece: \"γ\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: true,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Stone General\",\n\t\t\t\tshortName: \"gamma\",\n\t\t\t\tdescription: \"a pawn that moves and captures diagonally\"\n\t\t\t}\n\t\t}\n\t});\n\n\tconst soldierControl = createPieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.hooks.usePerspective = [true, true, true, true];\n\t\t\t\tthis.hooks.usePawnLogic = {};\n\t\t\t}\n\n\t\t\tgetPossibleCells() {\n\t\t\t\tthis.generateSlidingAttack({\n\t\t\t\t\tdisplacement: [-1, 0],\n\t\t\t\t\tspecial: AttackType.MoveOnly,\n\t\t\t\t\tlimit: this.baseRankActive ? 2 : 0,\n\t\t\t\t\tirreversible: true\n\t\t\t\t});\n\t\t\t\tthis.generateJumpAttack({\n\t\t\t\t\tdisplacement: [-1, 0],\n\t\t\t\t\tirreversible: true\n\t\t\t\t});\n\t\t\t\treturn this.moves;\n\t\t\t}\n\n\t\t\trayGenJumpingAttacks() {\n\t\t\t\tthis.generateJumpAttack({ displacement: [-1, 0], special: AttackType.RayTrace });\n\t\t\t\tconst moves = this.moves.slice();\n\t\t\t\tthis.moves = [];\n\t\t\t\treturn moves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 1,\n\t\t\t\tteamsPoints: 1,\n\t\t\t\tbotFFAValue: 1,\n\t\t\t\tbotTeamsValue: 0.4\n\t\t\t},\n\t\t\tpiece: \"β\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: true,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Soldier\",\n\t\t\t\tshortName: \"beta\",\n\t\t\t\tdescription: \"a pawn that moves and captures forwards only\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.hooks.usePerspective = [true, true, true, true];\n\t\t\t\tthis.hooks.usePawnLogic = {};\n\t\t\t}\n\n\t\t\tgetPossibleCells() {\n\t\t\t\tstoneGeneralControl.getPossibleCells.call(this);\n\t\t\t\tsoldierControl.getPossibleCells.call(this);\n\t\t\t\treturn this.moves;\n\t\t\t}\n\n\t\t\trayGenJumpingAttacks() {\n\t\t\t\tstoneGeneralControl.rayGenJumpingAttacks.call(this);\n\t\t\t\tsoldierControl.rayGenJumpingAttacks.call(this);\n\t\t\t\tconst moves = this.moves.slice();\n\t\t\t\tthis.moves = [];\n\t\t\t\treturn moves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 1,\n\t\t\t\tteamsPoints: 1,\n\t\t\t\tbotFFAValue: 1,\n\t\t\t\tbotTeamsValue: 0.4\n\t\t\t},\n\t\t\tpiece: \"δ\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: true,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Sergeant\",\n\t\t\t\tshortName: \"delta\",\n\t\t\t\tdescription: \"a pawn that moves and captures forwards and diagonally\"\n\t\t\t}\n\t\t}\n\t});\n\n\tconst xiangqiHorseControl = createPieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.hooks.useTrajectory = [\n\t\t\t\t\t[-1, 0],\n\t\t\t\t\t[1, 0],\n\t\t\t\t\t[0, 1],\n\t\t\t\t\t[0, -1]\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tgetPossibleCells() {\n\t\t\t\tthis.generateJumpAttack({ displacement: [-1, -2], special: AttackType.Normal, squareBlockingIndex: 3 });\n\t\t\t\tthis.generateJumpAttack({ displacement: [1, -2], special: AttackType.Normal, squareBlockingIndex: 3 });\n\t\t\t\tthis.generateJumpAttack({ displacement: [-1, 2], special: AttackType.Normal, squareBlockingIndex: 2 });\n\t\t\t\tthis.generateJumpAttack({ displacement: [1, 2], special: AttackType.Normal, squareBlockingIndex: 2 });\n\t\t\t\tthis.generateJumpAttack({ displacement: [2, -1], special: AttackType.Normal, squareBlockingIndex: 1 });\n\t\t\t\tthis.generateJumpAttack({ displacement: [2, 1], special: AttackType.Normal, squareBlockingIndex: 1 });\n\t\t\t\tthis.generateJumpAttack({ displacement: [-2, -1], special: AttackType.Normal, squareBlockingIndex: 0 });\n\t\t\t\tthis.generateJumpAttack({ displacement: [-2, 1], special: AttackType.Normal, squareBlockingIndex: 0 });\n\n\t\t\t\treturn this.moves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 2,\n\t\t\t\tteamsPoints: 2,\n\t\t\t\tbotFFAValue: 2.1,\n\t\t\t\tbotTeamsValue: 2.1\n\t\t\t},\n\t\t\tpiece: \"U\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: true,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Xiangqi horse\",\n\t\t\t\tshortName: \"u\",\n\t\t\t\tdescription: \"moves one square orthogonally and then one diagonally\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.hooks.useTrajectory = [\n\t\t\t\t\t[-1, 0],\n\t\t\t\t\t[1, 0],\n\t\t\t\t\t[0, 1],\n\t\t\t\t\t[0, -1]\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tgetPossibleCells() {\n\t\t\t\txiangqiHorseControl.getPossibleCells.call(this);\n\t\t\t\tthis.sliding.forEach((displacement) => {\n\t\t\t\t\tthis.generateSlidingAttack({ displacement });\n\t\t\t\t});\n\n\t\t\t\treturn this.moves;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 6,\n\t\t\t\tteamsPoints: 6,\n\t\t\t\tbotFFAValue: 7.5,\n\t\t\t\tbotTeamsValue: 7.5\n\t\t\t},\n\t\t\tpiece: \"Δ\",\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: true,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: true,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Dragon bishop\",\n\t\t\t\tshortName: \"deltaUpper\",\n\t\t\t\tdescription: \"combines bishop and xiangqi horse\"\n\t\t\t}\n\t\t}\n\t});\n\n\tcreatePieceDeclaration({\n\t\tbaseClassRef: class extends PieceControl {\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\t\t\t\tthis.hooks.useHopping = true;\n\t\t\t\tthis.sliding = kingDirections;\n\t\t\t}\n\t\t},\n\t\tconfiguration: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 3,\n\t\t\t\tteamsPoints: 3,\n\t\t\t\tbotFFAValue: 5.8,\n\t\t\t\tbotTeamsValue: 5.8\n\t\t\t},\n\t\t\tpiece: grasshopperPieceLetter,\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: true,\n\t\t\t\tisJumping: true,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false,\n\t\t\t\tisColorBound: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Grasshopper\",\n\t\t\t\tshortName: grasshopperPieceLetter.toLowerCase(),\n\t\t\t\tdescription: \"jumps in any direction hopping over the first piece, landing immediately behind it\"\n\t\t\t}\n\t\t}\n\t});\n};\n","import type { PieceString } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport { Coordinate, nonPlayablePieces, NumericColor } from \"../GameInformation/GameUnits/GameUnits\";\nimport type { PieceControl } from \"./PieceControl\";\n\nexport const enum AttackType {\n\tNormal,\n\tMoveOnly,\n\tAttackOnly,\n\tRayGen,\n\tRayTrace,\n\tRayTraceLimited\n}\nexport interface PieceControlHooks {\n\tuseTrajectory: Coordinate[] | undefined;\n\tusePerspective: boolean[] | undefined;\n\tusePawnLogic: { promotionRanks?: [number, number, number, number]; promotionPieces?: PieceLetter[] } | undefined;\n\tuseHopping: boolean;\n}\nexport interface PieceControlConfiguration {\n\tdisplacement: Coordinate;\n\tspecial?: AttackType;\n\tlimit?: number;\n\tsquareBlockingIndex?: number;\n\trayGenCache?: Coordinate;\n\tirreversible?: true;\n}\n\nexport interface PieceControlConfigSettings {\n\tpoints: {\n\t\tsinglesPoints: number;\n\t\tteamsPoints: number;\n\t\tbotFFAValue: number;\n\t\tbotTeamsValue: number;\n\t};\n\tpiece: string;\n\tmoveGenerationSettings: {\n\t\tisComplex: boolean;\n\t\tisJumping: boolean;\n\t\tisSliding: boolean;\n\t\tisPawn: boolean;\n\t\tisColorBound: boolean;\n\t};\n\tnaming: {\n\t\tname: string;\n\t\tshortName: string;\n\t\tdescription?: string;\n\t};\n}\n\nexport const nonPlayableValues: string[] = Object.values(nonPlayablePieces);\ndeclare const pieceLetterTag: unique symbol;\nexport type PieceLetter = string & { _: typeof pieceLetterTag };\nexport const verifyPieceLetter = (piece: string): piece is PieceLetter =>\n\tpiece in pieceControlConfigSettings || nonPlayableValues.includes(piece);\n\nexport const pieceControlConfigSettings = nonPlayableValues.reduce<Record<PieceLetter, PieceControlSettings>>(\n\t(p, n) => ({\n\t\t...p,\n\t\t[n]: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 0,\n\t\t\t\tteamsPoints: 0,\n\t\t\t\tbotFFAValue: 0,\n\t\t\t\tbotTeamsValue: 0\n\t\t\t},\n\t\t\tpiece: n,\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: false,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Wall\",\n\t\t\t\tshortName: n\n\t\t\t}\n\t\t}\n\t}),\n\t{}\n);\nexport interface PieceControlSettings extends PieceControlConfigSettings {\n\tconstruct: new () => PieceControl;\n}\ninterface PieceControlDeclarationConfiguration<T extends PieceControl> {\n\tconfiguration: PieceControlConfigSettings;\n\tbaseClassRef: new () => T;\n}\nexport const createPieceDeclaration = <T extends PieceControl>(configuration: PieceControlDeclarationConfiguration<T>) => {\n\tpieceControlConfigSettings[configuration.configuration.piece as PieceLetter] = {\n\t\t...configuration.configuration,\n\t\tconstruct: configuration.baseClassRef\n\t};\n\n\treturn new configuration.baseClassRef();\n};\n\nexport interface PieceControlGeneratedMove {\n\tmove: Coordinate;\n\tirreversible: boolean;\n}\n\nexport interface PieceControlInternalMove {\n\ti: number;\n\tj: number;\n\tisRayGen?: boolean;\n\tirreversible?: boolean;\n}\n\nexport interface ControlConfiguration {\n\tcoordinates: [number, number];\n\tboard: PieceString[][];\n\timmunePieces: [boolean, boolean, boolean, boolean];\n\tcolor: NumericColor;\n\tbaseRank?: boolean;\n}\n\nfunction createPredefinedPieceLetter(letter: string) {\n\treturn letter as PieceLetter;\n}\n\nexport const pawnPieceLetter = createPredefinedPieceLetter(\"P\");\nexport const wallPieceLetter = createPredefinedPieceLetter(nonPlayablePieces.wall);\nexport const grasshopperPieceLetter = createPredefinedPieceLetter(\"G\");\nexport const defaultPieces = {\n\tqueen: createPredefinedPieceLetter(\"Q\"),\n\trook: createPredefinedPieceLetter(\"R\"),\n\tbishop: createPredefinedPieceLetter(\"B\"),\n\tknight: createPredefinedPieceLetter(\"N\"),\n\tking: createPredefinedPieceLetter(\"K\")\n} as const;\nexport const emptyLetter = createPredefinedPieceLetter(\"\");\nexport const duckLetter = createPredefinedPieceLetter(nonPlayablePieces.duck);\nexport const dameLetter = createPredefinedPieceLetter(\"D\");","import { copyClass } from \"@client/ts/utils/ObjectUtils\";\nimport { verifyFunctionType, importAll, FunctionType } from \"../../../baseTypes\";\nimport type {\n\tAllowedSuperClasses,\n\tVariantDataRules,\n\tVariantRuleInformation,\n\tVariantRuleHandler,\n\tAllowedHandlerClasses,\n\tVariantRuleAllowedChecks\n} from \"./VariantRuleInterface\";\n\nexport interface VariantRulePublicProperties<K extends keyof VariantDataRules> {\n\treadonly information: VariantRuleInformation<K>;\n\treadonly parameterValue: VariantDataRules[K];\n}\n\nconst verifyHandlerProperty = <C extends AllowedSuperClasses>(\n\thandler: VariantRuleHandler<InstanceType<C>>,\n\tkey: PropertyKey\n): key is keyof typeof handler => key in handler;\nconst verifyPrototypeProperty = <C extends AllowedSuperClasses>(\n\tsuperClass: C,\n\tkey: PropertyKey\n): key is keyof AllowedSuperClasses[\"prototype\"] => key in superClass.prototype;\n\nexport abstract class VariantRule<C extends AllowedSuperClasses, K extends keyof VariantDataRules> {\n\tdeclare [\"constructor\"]: new (...args: unknown[]) => VariantRule<C, K>;\n\n\treadonly dependencies = new Map<new (...args: unknown[]) => VariantRule<AllowedSuperClasses, keyof VariantDataRules>, unknown[]>();\n\tstatic readonly variantRuleList: Array<\n\t\tnew (...args: unknown[]) => VariantRule<AllowedSuperClasses, keyof VariantDataRules> & VariantRuleHandler<AllowedHandlerClasses>\n\t> = [];\n\tprotected static initVariantRule(\n\t\trv: new (...args: unknown[]) => VariantRule<AllowedSuperClasses, keyof VariantDataRules> & VariantRuleHandler<AllowedHandlerClasses>\n\t) {\n\t\tVariantRule.variantRuleList.push(rv);\n\t}\n\tprotected decorator!: InstanceType<C>;\n\tprotected wrappingDecorators: Array<VariantRuleHandler<InstanceType<C>>> = [];\n\n\tinitializeBaseHandler(handler: InstanceType<C>) {\n\t\tthis.decorator = handler;\n\t}\n\n\tinitializeWrappingHandler(handler: VariantRule<C, keyof VariantDataRules> & VariantRuleHandler<InstanceType<C>>) {\n\t\tthis.wrappingDecorators.push(handler);\n\t}\n\n\tinjectIntoBaseClass(callback: (this: InstanceType<C>) => void) {\n\t\treturn callback.bind(this.decorator);\n\t}\n\n\tcallHandler<K extends keyof this & keyof InstanceType<C>>(\n\t\tmethod: K,\n\t\targs: IArguments\n\t): this[K] extends FunctionType ? ReturnType<this[K]> : never {\n\t\tfor (const decorator of this.wrappingDecorators) {\n\t\t\tif (!verifyHandlerProperty(decorator, method)) continue;\n\t\t\tconst decoratorMethod = decorator[method];\n\t\t\tif (!verifyFunctionType(decoratorMethod)) continue;\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\t\treturn decoratorMethod.call(decorator, ...args);\n\t\t}\n\n\t\tconst decoratorType: C = this.getDecoratorType();\n\t\tif (!verifyPrototypeProperty(decoratorType, method)) throw new Error(\"Method called to callHandler is not a part of prototype\");\n\t\tconst prototypeMethod: unknown = decoratorType.prototype[method];\n\t\tif (!verifyFunctionType(prototypeMethod)) throw new Error(\"Method called to callHandler is not a part of prototype\");\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn prototypeMethod.call(this.decorator, ...args);\n\t}\n\n\tabstract matchesPGNDeclaration(match: string): boolean;\n\tabstract getPublicProperties(): VariantRulePublicProperties<K>;\n\tabstract getDecoratorType(): C;\n\tabstract serializeToParsingForm(): string;\n\tabstract isDisabled(parameters: VariantRuleAllowedChecks): boolean;\n\tgetParametrizedOptions?(): VariantDataRules[K] extends boolean ? never : Map<string, VariantDataRules[K]>;\n\n\tgetInsufficientMaterialData() {\n\t\treturn {\n\t\t\tisPartiallyDisabled: false,\n\t\t\tisDisabled: false\n\t\t};\n\t}\n}\n\nconst objectPrototype = new Set(Reflect.ownKeys(Reflect.getPrototypeOf({}) ?? []));\nexport function decorateClassWithVariants<C extends AllowedSuperClasses>(\n\tbaseClass: InstanceType<C>,\n\tclassReference: new (...args: ConstructorParameters<C>) => InstanceType<C>,\n\tvariants: Array<VariantRule<C, keyof VariantDataRules> & VariantRuleHandler<InstanceType<C>>>\n): InstanceType<C> {\n\tif (variants.length === 0) return baseClass;\n\n\tconst decoratorProperties = copyClass(baseClass, classReference, true);\n\tconst methods = new Set<keyof InstanceType<C>>();\n\tdecoratorProperties.initDecoratorSettings = () => {\n\t\t// Do nothing, this method only exists for the purpose of being overridden\n\t};\n\tmethods.add(\"initDecoratorSettings\");\n\tconst lastInheritedMethods = new Set<string | symbol>();\n\n\tlet basePrototype: object | null = null;\n\tconst verifyKeyInDecoratorProperties = (k: PropertyKey): k is keyof InstanceType<C> =>\n\t\ttypeof k !== \"number\" && k in decoratorProperties && !objectPrototype.has(k) && !lastInheritedMethods.has(k);\n\twhile ((basePrototype = Reflect.getPrototypeOf(basePrototype ?? baseClass))) {\n\t\tReflect.ownKeys(basePrototype).forEach((k) => {\n\t\t\tif (verifyKeyInDecoratorProperties(k)) {\n\t\t\t\tdecoratorProperties[k] = baseClass[k];\n\t\t\t\tmethods.add(k);\n\t\t\t\tlastInheritedMethods.add(k);\n\t\t\t}\n\t\t});\n\t}\n\n\tconst verifyOwnProperty = (k: PropertyKey): k is keyof InstanceType<C> => k in baseClass;\n\tfor (const property of Object.getOwnPropertyNames(baseClass)) {\n\t\tif (!verifyOwnProperty(property)) throw new Error(\"Expected prototype to not be overridden\");\n\n\t\tconst localProperty = property;\n\t\tObject.defineProperty(decoratorProperties, property, {\n\t\t\tget: function (): (typeof baseClass)[keyof typeof baseClass] {\n\t\t\t\treturn baseClass[localProperty];\n\t\t\t},\n\t\t\tset: function (v: InstanceType<C>[string & keyof InstanceType<C>]) {\n\t\t\t\tbaseClass[localProperty] = v;\n\t\t\t},\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false\n\t\t});\n\t}\n\tdecoratorProperties.__baseClass = baseClass;\n\n\tfor (const method of methods) {\n\t\tconst variantRuleChain = variants.filter((rv) => method in rv);\n\t\tif (variantRuleChain.length === 0) continue;\n\t\tvariantRuleChain[0].initializeBaseHandler(decoratorProperties);\n\t\tconst variantDecorator = variantRuleChain.reduce((p, c) => {\n\t\t\tc.initializeBaseHandler(decoratorProperties);\n\t\t\tc.initializeWrappingHandler(p);\n\t\t\treturn c;\n\t\t});\n\n\t\tif (method in decoratorProperties) {\n\t\t\tconst variant = Reflect.get(variantDecorator, method);\n\t\t\tif (typeof variant === \"function\") {\n\t\t\t\tconst variantFunc = variant;\n\t\t\t\tif (verifyFunctionType(decoratorProperties[method])) {\n\t\t\t\t\tObject.defineProperty(decoratorProperties, method, {\n\t\t\t\t\t\tvalue: (...args: unknown[]) => {\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call\n\t\t\t\t\t\t\treturn variantFunc.bind(variantDecorator)(...args);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tenumerable: false,\n\t\t\t\t\t\twritable: false,\n\t\t\t\t\t\tconfigurable: false\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdecoratorProperties.initDecoratorSettings();\n\treturn decoratorProperties;\n}\n\nimportAll(require.context(\"./VariantRuleDefinitions\", true, /\\.ts$/));\n","import type { NumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { Board } from \"../../../Board/Board\";\nimport { InternalMove, InternalMoveSignature } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { VariantRuleAllowedChecks, variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"allowPassing\";\nexport class AllowPassing extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(AllowPassing);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Allow Passing\",\n\t\t\t\tdescription: \"Players can pass instead of making a move\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.minor,\n\t\t\t\tdisplayIcon: chessGlyphIndex.pause\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^AllowPassing$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"AllowPassing\";\n\t}\n\n\tisDisabled({ variantDataRules }: VariantRuleAllowedChecks): boolean {\n\t\treturn variantDataRules.giveaway;\n\t}\n\n\tgetAllowedInternalMoves(sideToMove: NumericColor = this.decorator.data.sideToMove): InternalMove[] {\n\t\tconst passingMoves = this.decorator.isKingInCheck(sideToMove) ? [] : [{ type: InternalMoveSignature.Pass }];\n\t\tfor (const decorator of this.wrappingDecorators) {\n\t\t\tif (decorator.getAllowedInternalMoves) {\n\t\t\t\treturn [...passingMoves, ...decorator.getAllowedInternalMoves(sideToMove)];\n\t\t\t}\n\t\t}\n\t\treturn [...passingMoves, ...Board.prototype.getAllowedInternalMoves.call(this.decorator, sideToMove)];\n\t}\n}\n","import { VariantType } from \"@moveGeneration/GameInformation/GameData\";\nimport { Board } from \"../../../Board/Board\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { VariantRuleAllowedChecks, variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"alternativeTeams\";\nexport class AlternativeTeams extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(AlternativeTeams);\n\t}\n\n\tprivate teammate: number;\n\tconstructor(teammate?: unknown) {\n\t\tsuper();\n\t\tif (typeof teammate === \"number\") {\n\t\t\tthis.teammate = teammate;\n\t\t} else {\n\t\t\tthis.teammate = 2;\n\t\t}\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\tconst rbTeams = this.teammate === 1;\n\t\tconst teamOne = rbTeams ? \"Red & Blue\" : \"Red & Green\";\n\t\tconst teamTwo = rbTeams ? \"Yellow & Green\" : \"Blue & Yellow\";\n\t\treturn {\n\t\t\tparameterValue: this.teammate,\n\t\t\tinformation: {\n\t\t\t\tname: `Teams`,\n\t\t\t\tdescription: `Alternative Teams: ${teamOne} form a team against ${teamTwo}`,\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.autogenous,\n\t\t\t\tdisplayIcon: \"Đ\"\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\tconst matchArray = match.match(/^Teammate=(1|3)$/);\n\t\tif (matchArray) {\n\t\t\tthis.teammate = Number(matchArray[1]);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn `Teammate=${this.teammate}`;\n\t}\n\n\tisDisabled({ gameType }: VariantRuleAllowedChecks): boolean {\n\t\treturn gameType !== VariantType.Teams;\n\t}\n\n\tgetParametrizedOptions() {\n\t\treturn new Map([\n\t\t\t[\"Red & Yellow v Blue & Green\", 2],\n\t\t\t[\"Red & Blue v Yellow & Green\", 1],\n\t\t\t[\"Red & Green v Blue & Yellow\", 3]\n\t\t]);\n\t}\n\n\tinitDecoratorSettings() {\n\t\tconst teamSettings = this.decorator.gameType.teamSettings;\n\t\tif (this.teammate === 1) {\n\t\t\tteamSettings.firstTeamColors = [true, true, false, false];\n\t\t\tteamSettings.secondTeamColors = [false, false, true, true];\n\t\t} else if (this.teammate === 3) {\n\t\t\tteamSettings.firstTeamColors = [true, false, false, true];\n\t\t\tteamSettings.secondTeamColors = [false, true, true, false];\n\t\t}\n\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { Board } from \"../../../Board/Board\";\nimport { stringifyCoordinate } from \"../../../Board/BoardInterface\";\nimport type { PostMoveResults } from \"../../../FENData/FENDataInterface\";\nimport { InternalMoveSignature } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"barePieceRule\";\nexport class BarePieceRule extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(BarePieceRule);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Bare piece rule\",\n\t\t\t\tdescription: \"Players with only one remaining piece are forfeit\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.minor,\n\t\t\t\tdisplayIcon: chessGlyphIndex.filter\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^BarePieceLoses$/i.test(match);\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tgetInsufficientMaterialData() {\n\t\treturn {\n\t\t\tisPartiallyDisabled: true,\n\t\t\tisDisabled: false\n\t\t} as const;\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"BarePieceLoses\";\n\t}\n\n\tmakeMove(): PostMoveResults {\n\t\tconst {\n\t\t\tdata: { sideToMove },\n\t\t\tboard,\n\t\t\tpreGeneratedAttacks\n\t\t} = this.decorator;\n\t\tconst results = this.callHandler(\"makeMove\", arguments);\n\n\t\tconst playerPieces = this.decorator.getPlayerPieces()[sideToMove];\n\t\tif (playerPieces.length === 1) {\n\t\t\tconst pieceMovements = preGeneratedAttacks[sideToMove].pieceMovements.get(stringifyCoordinate(playerPieces[0]));\n\t\t\tif (pieceMovements) {\n\t\t\t\tfor (const { move: coordinate } of pieceMovements) {\n\t\t\t\t\tif (board[coordinate[0]][coordinate[1]].isPiece()) {\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn this.decorator.makeMove([{ type: InternalMoveSignature.Resign }]);\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t}\n}\n","import type { BoardSquares } from \"@client/ts/logic/BaseInterfaces\";\nimport { Board } from \"../../../Board/Board\";\nimport { DisplaySettings } from \"../../../Board/BoardInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { VariantRuleAllowedChecks, variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"blindfold\";\nexport class Blindfold extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(Blindfold);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Blindfold\",\n\t\t\t\tdescription: \"Pieces are invisible\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.visual,\n\t\t\t\tdisplayIcon: chessGlyphIndex.blindfold\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^Blindfold$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"Blindfold\";\n\t}\n\n\tisDisabled({ variantDataRules }: VariantRuleAllowedChecks): boolean {\n\t\treturn variantDataRules.fogOfWar;\n\t}\n\n\tgetSquareVisibility(): BoardSquares<DisplaySettings[]> {\n\t\tconst squareVisibility: BoardSquares<DisplaySettings[]> = this.callHandler(\"getSquareVisibility\", arguments);\n\t\treturn squareVisibility.map((r, i) =>\n\t\t\tr.map((v, j) => {\n\t\t\t\tif (this.decorator.board[i][j].isWall()) {\n\t\t\t\t\treturn v;\n\t\t\t\t} else {\n\t\t\t\t\treturn [...v, DisplaySettings.Blindfolded];\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { Board } from \"../../../Board/Board\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { VariantRuleAllowedChecks, variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"captureTheKing\";\nexport class CaptureTheKing extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(CaptureTheKing);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Capture the King\",\n\t\t\t\tdescription: \"To checkmate, kings must be captured\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.minor,\n\t\t\t\tdisplayIcon: chessGlyphIndex.king\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^CaptureTheKing$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"CaptureTheKing\";\n\t}\n\n\tisDisabled({ variantDataRules }: VariantRuleAllowedChecks): boolean {\n\t\treturn variantDataRules.giveaway || variantDataRules.taboo;\n\t}\n\n\tgetInsufficientMaterialData() {\n\t\treturn {\n\t\t\tisPartiallyDisabled: true,\n\t\t\tisDisabled: false\n\t\t} as const;\n\t}\n\n\tisKingInCheck(): boolean {\n\t\treturn false;\n\t}\n\n\tisTheMoveLegal(): boolean {\n\t\treturn true;\n\t}\n}\n","import { getVerticalPlacementModulus, isVerticalPlacement } from \"@client/ts/logic/BaseInterfaces\";\nimport { NumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { Board } from \"../../../Board/Board\";\nimport { boardDimension, colors } from \"../../../GameInformation/GameData\";\nimport type { PieceString } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"chess960\";\nexport class Chess960 extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(Chess960);\n\t}\n\n\tprivate static readonly chess960ranges = [\n\t\t...Array.from({ length: 9 }, (_, i) => [960 * (i + 1) + 1, 960 + 960 * (i + 1)]),\n\t\t...Array.from({ length: 5 }, (_, i) => [10000 + 960 * (i + 1) + 1, 10960 + 960 * (i + 1)])\n\t];\n\tprivate static readonly minorPieceCache = (function () {\n\t\tconst minorPieceCache = [];\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tfor (let j = i + 1; j < 5; j++) {\n\t\t\t\tminorPieceCache.push([i, j]);\n\t\t\t}\n\t\t}\n\t\treturn minorPieceCache;\n\t})();\n\t// prettier-ignore\n\tprivate static readonly pieceMasks = [\n        [404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959],\n        [5, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 33, 34, 35, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 95, 101, 102, 103, 105, 106, 107, 109, 110, 111, 113, 114, 115, 129, 130, 131, 145, 146, 147, 161, 162, 163, 177, 178, 179, 197, 198, 199, 201, 202, 203, 205, 206, 207, 209, 210, 211, 225, 226, 227, 241, 242, 243, 257, 258, 259, 273, 274, 275, 293, 294, 295, 297, 298, 299, 301, 302, 303, 305, 306, 307, 321, 322, 323, 337, 338, 339, 353, 354, 355, 369, 370, 371, 421, 422, 423, 425, 426, 427, 429, 430, 431, 437, 438, 439, 441, 442, 443, 445, 446, 447, 453, 454, 455, 457, 458, 459, 461, 462, 463, 469, 470, 471, 473, 474, 475, 477, 478, 479, 517, 518, 519, 521, 522, 523, 525, 526, 527, 533, 534, 535, 537, 538, 539, 541, 542, 543, 549, 550, 551, 553, 554, 555, 557, 558, 559, 565, 566, 567, 569, 570, 571, 573, 574, 575, 613, 614, 615, 617, 618, 619, 621, 622, 623, 629, 630, 631, 633, 634, 635, 637, 638, 639, 645, 646, 647, 649, 650, 651, 653, 654, 655, 661, 662, 663, 665, 666, 667, 669, 670, 671],\n        [4, 5, 6, 7, 20, 21, 22, 23, 36, 37, 38, 39, 52, 53, 54, 55, 68, 69, 70, 71, 84, 85, 86, 87, 100, 101, 102, 103, 116, 117, 118, 119, 132, 133, 134, 135, 148, 149, 150, 151, 164, 165, 166, 167, 180, 181, 182, 183, 196, 197, 198, 199, 212, 213, 214, 215, 228, 229, 230, 231, 244, 245, 246, 247, 260, 261, 262, 263, 276, 277, 278, 279, 292, 293, 294, 295, 308, 309, 310, 311, 324, 325, 326, 327, 340, 341, 342, 343, 356, 357, 358, 359, 372, 373, 374, 375, 388, 389, 390, 391, 404, 405, 406, 407, 420, 421, 422, 423, 436, 437, 438, 439, 452, 453, 454, 455, 468, 469, 470, 471, 484, 485, 486, 487, 500, 501, 502, 503, 516, 517, 518, 519, 532, 533, 534, 535, 548, 549, 550, 551, 564, 565, 566, 567, 580, 581, 582, 583, 596, 597, 598, 599, 612, 613, 614, 615, 628, 629, 630, 631, 644, 645, 646, 647, 660, 661, 662, 663, 676, 677, 678, 679, 692, 693, 694, 695, 708, 709, 710, 711, 724, 725, 726, 727, 740, 741, 742, 743, 756, 757, 758, 759, 772, 773, 774, 775, 788, 789, 790, 791, 804, 805, 806, 807, 820, 821, 822, 823, 836, 837, 838, 839, 852, 853, 854, 855, 868, 869, 870, 871, 884, 885, 886, 887, 900, 901, 902, 903, 916, 917, 918, 919, 932, 933, 934, 935, 948, 949, 950, 951],\n        [16, 20, 34, 35, 38, 39, 40, 44, 58, 59, 62, 63, 112, 116, 130, 131, 134, 135, 136, 140, 154, 155, 158, 159, 208, 212, 226, 227, 230, 231, 232, 236, 250, 251, 254, 255, 304, 308, 322, 323, 326, 327, 328, 332, 346, 347, 350, 351, 400, 404, 418, 419, 422, 423, 424, 428, 442, 443, 446, 447, 496, 500, 514, 515, 518, 519, 520, 524, 538, 539, 542, 543, 592, 596, 610, 611, 614, 615, 616, 620, 634, 635, 638, 639, 688, 692, 706, 707, 710, 711, 712, 716, 730, 731, 734, 735, 784, 788, 802, 803, 806, 807, 808, 812, 826, 827, 830, 831, 880, 884, 898, 899, 902, 903, 904, 908, 922, 923, 926, 927],\n        [14, 15, 30, 31, 46, 47, 62, 63, 66, 67, 70, 71, 76, 77, 82, 83, 86, 87, 92, 93, 110, 111, 126, 127, 142, 143, 158, 159, 162, 163, 166, 167, 172, 173, 178, 179, 182, 183, 188, 189, 194, 195, 198, 199, 204, 205, 210, 211, 214, 215, 220, 221, 226, 227, 230, 231, 236, 237, 240, 241, 244, 245, 256, 257, 260, 261, 272, 273, 276, 277, 290, 291, 294, 295, 300, 301, 306, 307, 310, 311, 316, 317, 322, 323, 326, 327, 332, 333, 336, 337, 340, 341, 352, 353, 356, 357, 368, 369, 372, 373, 398, 399, 414, 415, 430, 431, 446, 447, 450, 451, 454, 455, 460, 461, 466, 467, 470, 471, 476, 477, 482, 483, 486, 487, 492, 493, 498, 499, 502, 503, 508, 509, 514, 515, 518, 519, 524, 525, 528, 529, 532, 533, 544, 545, 548, 549, 560, 561, 564, 565, 578, 579, 582, 583, 588, 589, 594, 595, 598, 599, 604, 605, 610, 611, 614, 615, 620, 621, 624, 625, 628, 629, 640, 641, 644, 645, 656, 657, 660, 661, 672, 673, 676, 677, 688, 689, 692, 693, 768, 769, 772, 773, 784, 785, 788, 789, 864, 865, 868, 869, 880, 881, 884, 885],\n        [2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 58, 62, 66, 70, 74, 78, 82, 86, 90, 94, 98, 102, 106, 110, 114, 118, 122, 126, 130, 134, 138, 142, 146, 150, 154, 158, 162, 166, 170, 174, 178, 182, 186, 190, 194, 198, 202, 206, 210, 214, 218, 222, 226, 230, 234, 238, 242, 246, 250, 254, 258, 262, 266, 270, 274, 278, 282, 286, 290, 294, 298, 302, 306, 310, 314, 318, 322, 326, 330, 334, 338, 342, 346, 350, 354, 358, 362, 366, 370, 374, 378, 382, 386, 390, 394, 398, 402, 406, 410, 414, 418, 422, 426, 430, 434, 438, 442, 446, 450, 454, 458, 462, 466, 470, 474, 478, 482, 486, 490, 494, 498, 502, 506, 510, 514, 518, 522, 526, 530, 534, 538, 542, 546, 550, 554, 558, 562, 566, 570, 574, 578, 582, 586, 590, 594, 598, 602, 606, 610, 614, 618, 622, 626, 630, 634, 638, 642, 646, 650, 654, 658, 662, 666, 670, 674, 678, 682, 686, 690, 694, 698, 702, 706, 710, 714, 718, 722, 726, 730, 734, 738, 742, 746, 750, 754, 758, 762, 766, 770, 774, 778, 782, 786, 790, 794, 798, 802, 806, 810, 814, 818, 822, 826, 830, 834, 838, 842, 846, 850, 854, 858, 862, 866, 870, 874, 878, 882, 886, 890, 894, 898, 902, 906, 910, 914, 918, 922, 926, 930, 934, 938, 942, 946, 950, 954, 958],\n        [192, 193, 194, 196, 197, 198, 200, 201, 202, 208, 209, 210, 212, 213, 214, 216, 217, 218, 224, 225, 226, 228, 229, 230, 232, 233, 234, 240, 241, 242, 244, 245, 246, 248, 249, 250, 291, 295, 299, 307, 311, 315, 323, 327, 331, 339, 343, 347, 355, 359, 363, 368, 369, 370, 372, 373, 374, 376, 377, 378, 480, 481, 482, 484, 485, 486, 488, 489, 490, 496, 497, 498, 500, 501, 502, 504, 505, 506, 512, 513, 514, 516, 517, 518, 520, 521, 522, 528, 529, 530, 532, 533, 534, 536, 537, 538, 579, 583, 587, 595, 599, 603, 611, 615, 619, 627, 631, 635, 643, 647, 651, 656, 657, 658, 660, 661, 662, 664, 665, 666, 672, 673, 674, 676, 677, 678, 680, 681, 682, 688, 689, 690, 692, 693, 694, 696, 697, 698, 704, 705, 706, 708, 709, 710, 712, 713, 714, 720, 721, 722, 724, 725, 726, 728, 729, 730, 771, 775, 779, 787, 791, 795, 803, 807, 811, 819, 823, 827, 835, 839, 843, 848, 849, 850, 852, 853, 854, 856, 857, 858, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 931, 935, 939, 944, 945, 946, 948, 949, 950, 952, 953, 954],\n        [1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 96, 97, 98, 100, 101, 102, 104, 105, 106, 108, 109, 110, 112, 113, 114, 116, 117, 118, 120, 121, 122, 124, 125, 126, 128, 129, 130, 132, 133, 134, 136, 137, 138, 140, 141, 142, 144, 145, 146, 148, 149, 150, 152, 153, 154, 156, 157, 158, 160, 161, 162, 164, 165, 166, 168, 169, 170, 172, 173, 174, 192, 193, 194, 196, 197, 198, 200, 201, 202, 204, 205, 206, 208, 209, 210, 212, 213, 214, 216, 217, 218, 220, 221, 222, 224, 225, 226, 228, 229, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242, 244, 245, 246, 248, 249, 250, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 270, 384, 385, 386, 388, 389, 390, 392, 393, 394, 396, 397, 398, 400, 401, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 418, 420, 421, 422, 424, 425, 426, 428, 429, 430, 432, 433, 434, 436, 437, 438, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 453, 454, 456, 457, 458, 460, 461, 462, 480, 481, 482, 484, 485, 486, 488, 489, 490, 492, 493, 494, 496, 497, 498, 500, 501, 502, 504, 505, 506, 508, 509, 510, 512, 513, 514, 516, 517, 518, 520, 521, 522, 524, 525, 526, 528, 529, 530, 532, 533, 534, 536, 537, 538, 540, 541, 542, 544, 545, 546, 548, 549, 550, 552, 553, 554, 556, 557, 558, 672, 673, 674, 676, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 692, 693, 694, 696, 697, 698, 700, 701, 702, 704, 705, 706, 708, 709, 710, 712, 713, 714, 716, 717, 718, 720, 721, 722, 724, 725, 726, 728, 729, 730, 732, 733, 734, 736, 737, 738, 740, 741, 742, 744, 745, 746, 748, 749, 750]\n    ];\n\tprivate static readonly c960range = (function () {\n\t\tconst arr = [...Array(961).keys()];\n\t\tarr.shift();\n\t\treturn arr;\n\t})();\n\t// prettier-ignore\n\tprivate static readonly twins = [959, 955, 951, 947, 958, 954, 950, 946, 957, 953, 949, 945, 956, 952, 948, 944, 943, 939, 935, 931, 942, 938, 934, 930, 941, 937, 933, 929, 940, 936, 932, 928, 927, 923, 919, 915, 926, 922, 918, 914, 925, 921, 917, 913, 924, 920, 916, 912, 911, 907, 903, 899, 910, 906, 902, 898, 909, 905, 901, 897, 908, 904, 900, 896, 895, 891, 887, 883, 894, 890, 886, 882, 893, 889, 885, 881, 892, 888, 884, 880, 879, 875, 871, 867, 878, 874, 870, 866, 877, 873, 869, 865, 876, 872, 868, 864, 863, 859, 855, 851, 862, 858, 854, 850, 861, 857, 853, 849, 860, 856, 852, 848, 847, 843, 839, 835, 846, 842, 838, 834, 845, 841, 837, 833, 844, 840, 836, 832, 831, 827, 823, 819, 830, 826, 822, 818, 829, 825, 821, 817, 828, 824, 820, 816, 815, 811, 807, 803, 814, 810, 806, 802, 813, 809, 805, 801, 812, 808, 804, 800, 799, 795, 791, 787, 798, 794, 790, 786, 797, 793, 789, 785, 796, 792, 788, 784, 783, 779, 775, 771, 782, 778, 774, 770, 781, 777, 773, 769, 780, 776, 772, 768, 671, 667, 663, 659, 670, 666, 662, 658, 669, 665, 661, 657, 668, 664, 660, 656, 655, 651, 647, 643, 654, 650, 646, 642, 653, 649, 645, 641, 652, 648, 644, 640, 639, 635, 631, 627, 638, 634, 630, 626, 637, 633, 629, 625, 636, 632, 628, 624, 623, 619, 615, 611, 622, 618, 614, 610, 621, 617, 613, 609, 620, 616, 612, 608, 607, 603, 599, 595, 606, 602, 598, 594, 605, 601, 597, 593, 604, 600, 596, 592, 591, 587, 583, 579, 590, 586, 582, 578, 589, 585, 581, 577, 588, 584, 580, 576, 383, 379, 375, 371, 382, 378, 374, 370, 381, 377, 373, 369, 380, 376, 372, 368, 367, 363, 359, 355, 366, 362, 358, 354, 365, 361, 357, 353, 364, 360, 356, 352, 351, 347, 343, 339, 350, 346, 342, 338, 349, 345, 341, 337, 348, 344, 340, 336, 335, 331, 327, 323, 334, 330, 326, 322, 333, 329, 325, 321, 332, 328, 324, 320, 319, 315, 311, 307, 318, 314, 310, 306, 317, 313, 309, 305, 316, 312, 308, 304, 303, 299, 295, 291, 302, 298, 294, 290, 301, 297, 293, 289, 300, 296, 292, 288, 767, 763, 759, 755, 766, 762, 758, 754, 765, 761, 757, 753, 764, 760, 756, 752, 751, 747, 743, 739, 750, 746, 742, 738, 749, 745, 741, 737, 748, 744, 740, 736, 735, 731, 727, 723, 734, 730, 726, 722, 733, 729, 725, 721, 732, 728, 724, 720, 719, 715, 711, 707, 718, 714, 710, 706, 717, 713, 709, 705, 716, 712, 708, 704, 703, 699, 695, 691, 702, 698, 694, 690, 701, 697, 693, 689, 700, 696, 692, 688, 687, 683, 679, 675, 686, 682, 678, 674, 685, 681, 677, 673, 684, 680, 676, 672, 575, 571, 567, 563, 574, 570, 566, 562, 573, 569, 565, 561, 572, 568, 564, 560, 559, 555, 551, 547, 558, 554, 550, 546, 557, 553, 549, 545, 556, 552, 548, 544, 543, 539, 535, 531, 542, 538, 534, 530, 541, 537, 533, 529, 540, 536, 532, 528, 527, 523, 519, 515, 526, 522, 518, 514, 525, 521, 517, 513, 524, 520, 516, 512, 511, 507, 503, 499, 510, 506, 502, 498, 509, 505, 501, 497, 508, 504, 500, 496, 495, 491, 487, 483, 494, 490, 486, 482, 493, 489, 485, 481, 492, 488, 484, 480, 287, 283, 279, 275, 286, 282, 278, 274, 285, 281, 277, 273, 284, 280, 276, 272, 271, 267, 263, 259, 270, 266, 262, 258, 269, 265, 261, 257, 268, 264, 260, 256, 255, 251, 247, 243, 254, 250, 246, 242, 253, 249, 245, 241, 252, 248, 244, 240, 239, 235, 231, 227, 238, 234, 230, 226, 237, 233, 229, 225, 236, 232, 228, 224, 223, 219, 215, 211, 222, 218, 214, 210, 221, 217, 213, 209, 220, 216, 212, 208, 207, 203, 199, 195, 206, 202, 198, 194, 205, 201, 197, 193, 204, 200, 196, 192, 479, 475, 471, 467, 478, 474, 470, 466, 477, 473, 469, 465, 476, 472, 468, 464, 463, 459, 455, 451, 462, 458, 454, 450, 461, 457, 453, 449, 460, 456, 452, 448, 447, 443, 439, 435, 446, 442, 438, 434, 445, 441, 437, 433, 444, 440, 436, 432, 431, 427, 423, 419, 430, 426, 422, 418, 429, 425, 421, 417, 428, 424, 420, 416, 415, 411, 407, 403, 414, 410, 406, 402, 413, 409, 405, 401, 412, 408, 404, 400, 399, 395, 391, 387, 398, 394, 390, 386, 397, 393, 389, 385, 396, 392, 388, 384, 191, 187, 183, 179, 190, 186, 182, 178, 189, 185, 181, 177, 188, 184, 180, 176, 175, 171, 167, 163, 174, 170, 166, 162, 173, 169, 165, 161, 172, 168, 164, 160, 159, 155, 151, 147, 158, 154, 150, 146, 157, 153, 149, 145, 156, 152, 148, 144, 143, 139, 135, 131, 142, 138, 134, 130, 141, 137, 133, 129, 140, 136, 132, 128, 127, 123, 119, 115, 126, 122, 118, 114, 125, 121, 117, 113, 124, 120, 116, 112, 111, 107, 103, 99, 110, 106, 102, 98, 109, 105, 101, 97, 108, 104, 100, 96, 95, 91, 87, 83, 94, 90, 86, 82, 93, 89, 85, 81, 92, 88, 84, 80, 79, 75, 71, 67, 78, 74, 70, 66, 77, 73, 69, 65, 76, 72, 68, 64, 63, 59, 55, 51, 62, 58, 54, 50, 61, 57, 53, 49, 60, 56, 52, 48, 47, 43, 39, 35, 46, 42, 38, 34, 45, 41, 37, 33, 44, 40, 36, 32, 31, 27, 23, 19, 30, 26, 22, 18, 29, 25, 21, 17, 28, 24, 20, 16, 15, 11, 7, 3, 14, 10, 6, 2, 13, 9, 5, 1, 12, 8, 4, 0];\n\tprivate static readonly legacy = {\n\t\tlegacy2PThreshold: 1000,\n\t\tlegacy2PRank: 3,\n\t\tlegacy4Prank: 0,\n\t\tlegacy2PTakeaway: 6160\n\t} as const;\n\tprivate static readonly displacement = [3, 11];\n\tprivate static createBaseChess960mappings() {\n\t\treturn {\n\t\t\tcolorBoundPieces: [2, 5],\n\t\t\tsupermajorPieces: [3],\n\t\t\tminorPieces: [1, 6],\n\t\t\troyalPiece: [4],\n\t\t\tedgePieces: [0, 7]\n\t\t};\n\t}\n\n\tprivate static regExp = /Chess960=(\\d{1,5})/i;\n\tprivate positionID: number;\n\tconstructor(positionID?: unknown) {\n\t\tsuper();\n\t\tif (typeof positionID === \"number\") {\n\t\t\tthis.positionID = positionID;\n\t\t} else {\n\t\t\tthis.positionID = -1;\n\t\t}\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: this.positionID,\n\t\t\tinformation: {\n\t\t\t\tname: \"Chess960\",\n\t\t\t\tdescription: \"Initial position with randomly shuffled pieces on home ranks\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.startingPosition,\n\t\t\t\tdisplayIcon: chessGlyphIndex.chess960\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\tconst matchArray = match.match(Chess960.regExp);\n\t\tif (matchArray) {\n\t\t\tconst newID = Number(matchArray[1]);\n\t\t\tif (newID < 0 || newID > 15760) return false;\n\t\t\tthis.positionID = newID;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn `Chess960=${this.positionID}`;\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tinitDecoratorSettings() {\n\t\tif (this.positionID === -1) throw new Error(\"Position ID for Chess960 is not defined\");\n\t\tlet nr = this.positionID;\n\t\tconst boardSquares = this.decorator.board;\n\t\tlet rank = Chess960.chess960ranges.findIndex((r) => nr >= r[0] && nr <= r[1]);\n\t\tif (rank === -1) {\n\t\t\tif (nr > Chess960.legacy.legacy2PThreshold) {\n\t\t\t\trank = Chess960.legacy.legacy2PRank;\n\t\t\t\tnr -= Chess960.legacy.legacy2PTakeaway;\n\t\t\t} else {\n\t\t\t\trank = Chess960.legacy.legacy4Prank;\n\t\t\t}\n\t\t}\n\n\t\tconst pieceArrays: PieceString[][] = [[], [], [], []];\n\t\tconst ranks = [13 - rank, rank, rank, 13 - rank];\n\t\tpieceArrays[0] = boardSquares[ranks[0]].slice(Chess960.displacement[0], Chess960.displacement[1]);\n\t\tpieceArrays[1] = boardSquares.map((row) => row[ranks[1]]).slice(Chess960.displacement[0], Chess960.displacement[1]);\n\t\tpieceArrays[2] = boardSquares[ranks[2]].slice(Chess960.displacement[0], Chess960.displacement[1]);\n\t\tpieceArrays[3] = boardSquares.map((row) => row[ranks[3]]).slice(Chess960.displacement[0], Chess960.displacement[1]);\n\n\t\tconst walls = pieceArrays.map((a) => a.map((p) => (p.isWall() ? true : false)));\n\t\tconst intersections: number[][] = [];\n\t\tfor (const wall of walls) {\n\t\t\tintersections.push(\n\t\t\t\twall.reduce((p, c, i) => {\n\t\t\t\t\tif (c) {\n\t\t\t\t\t\treturn p.filter((v) => Chess960.pieceMasks[i].includes(v));\n\t\t\t\t\t} else return p;\n\t\t\t\t}, Chess960.c960range)\n\t\t\t);\n\t\t}\n\n\t\ttype IndexingType = ReturnType<typeof generatePositionIndexes>;\n\t\tconst calcNr = nr - Chess960.chess960ranges[rank][0];\n\t\tconst positions: IndexingType[] = [];\n\n\t\tconst generatePositionIndexes = (calcNr: number): typeof position => {\n\t\t\tconst colorBoundIndexes = [2 * Math.floor((calcNr % 16) / 4), 1 + 2 * ((calcNr % 16) % 4)].sort();\n\t\t\tconst supermajorIndex = Math.floor(calcNr / 16) % 6;\n\t\t\tconst minorPieceIndexes = Chess960.minorPieceCache[Math.floor(calcNr / 96) % 10];\n\n\t\t\tconst position = {\n\t\t\t\tcolorBoundPieces: Array(8).fill(false),\n\t\t\t\tsupermajorPieces: Array(8).fill(false),\n\t\t\t\tminorPieces: Array(8).fill(false),\n\t\t\t\troyalPiece: Array(8).fill(false),\n\t\t\t\tedgePieces: Array(8).fill(false)\n\t\t\t};\n\n\t\t\tlet edgeSet = false,\n\t\t\t\troyalSet = false,\n\t\t\t\tcolorDelta = 0,\n\t\t\t\tmajorDelta = 0;\n\t\t\tfor (let i = 0; i < boardDimension - Chess960.displacement[0] * 2; i++) {\n\t\t\t\tif (i === colorBoundIndexes[0] || i === colorBoundIndexes[1]) {\n\t\t\t\t\tposition.colorBoundPieces[i] = true;\n\t\t\t\t\tcolorDelta++;\n\t\t\t\t} else if (i === supermajorIndex + colorDelta) {\n\t\t\t\t\tposition.supermajorPieces[i] = true;\n\t\t\t\t\tmajorDelta++;\n\t\t\t\t} else if (i === minorPieceIndexes[0] + colorDelta + majorDelta || i === minorPieceIndexes[1] + colorDelta + majorDelta) {\n\t\t\t\t\tposition.minorPieces[i] = true;\n\t\t\t\t} else {\n\t\t\t\t\tposition[edgeSet ? (royalSet ? \"edgePieces\" : \"royalPiece\") : \"edgePieces\"][i] = true;\n\t\t\t\t\troyalSet = edgeSet;\n\t\t\t\t\tedgeSet = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn position;\n\t\t};\n\n\t\tfor (const intersection of intersections) {\n\t\t\tif (intersection.length === 0) return null;\n\t\t\tlet calcTempNr = calcNr;\n\t\t\tlet cycles = 0;\n\t\t\twhile (cycles < 2) {\n\t\t\t\tif (intersection.includes(calcTempNr)) {\n\t\t\t\t\tpositions.push(generatePositionIndexes(calcTempNr));\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (intersection.includes(Chess960.twins[calcTempNr - 1])) {\n\t\t\t\t\tpositions.push(generatePositionIndexes(Chess960.twins[calcTempNr - 1]));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcalcTempNr++;\n\t\t\t\tif (calcTempNr === 960) (calcTempNr = 0), cycles++;\n\t\t\t}\n\n\t\t\tif (cycles === 2) intersections.push([]);\n\t\t}\n\n\t\tconst fenData = this.decorator.data;\n\t\tconst royalPieces = fenData.fenOptions.tag(\"royal\");\n\t\tconst royalOnCorrectRank = royalPieces.map((r, i) =>\n\t\t\tr !== null ? (r[getVerticalPlacementModulus(i)] === ranks[i] ? r[getVerticalPlacementModulus(i)] : -1) : -1\n\t\t);\n\n\t\tconst replaceRow = (player: NumericColor): void => {\n\t\t\tconst pieces = Chess960.createBaseChess960mappings();\n\t\t\tconst royal = royalPieces[player];\n\t\t\tif (!royal) return;\n\t\t\tconst r = royal[getVerticalPlacementModulus(player)];\n\t\t\tconst supermajorOverRoyal = royalOnCorrectRank[player] ? r <= 6 : false;\n\n\t\t\tfor (let i = Chess960.displacement[0]; i < Chess960.displacement[1]; i++) {\n\t\t\t\tlet k: keyof IndexingType;\n\t\t\t\tfor (k in pieces) {\n\t\t\t\t\tif (!Object.prototype.hasOwnProperty.call(pieces, k) || !positions[player][k][i - 3]) continue;\n\n\t\t\t\t\tif (royalOnCorrectRank[player] !== -1 && k === \"royalPiece\" && r !== i) {\n\t\t\t\t\t\troyal[getVerticalPlacementModulus(player)] = i;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst mI = supermajorOverRoyal ? (intersections[player].length === 960 ? boardDimension - 1 - i : i) : i;\n\t\t\t\t\tconst piece = pieces[k].shift();\n\t\t\t\t\tif (piece !== undefined) {\n\t\t\t\t\t\tboardSquares[isVerticalPlacement(player) ? ranks[player] : mI][isVerticalPlacement(player) ? mI : ranks[player]] =\n\t\t\t\t\t\t\tpieceArrays[player][piece];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfor (const color of colors) replaceRow(color);\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n}\n","import type { DroppingMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport { Board } from \"../../../Board/Board\";\nimport { boardDimension } from \"../../../GameInformation/GameData\";\nimport type { PieceString } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { VariantRuleHandler, variantRuleColors } from \"../../VariantRuleInterface\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { FiftyMoveRule } from \"../FENDataDecorators/FiftyMoveRule\";\nimport { isVerticalPlacement } from \"@client/ts/logic/BaseInterfaces\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"crazyhouse\";\nexport class Crazyhouse extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(Crazyhouse);\n\t}\n\treadonly dependencies = new Map([[FiftyMoveRule, [Infinity]]]);\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Crazyhouse\",\n\t\t\t\tdescription: \"You can drop pieces from banks\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.extending,\n\t\t\t\tdisplayIcon: chessGlyphIndex.crazyhouse\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^Crazyhouse$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"Crazyhouse\";\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tgetInsufficientMaterialData() {\n\t\treturn {\n\t\t\tisPartiallyDisabled: false,\n\t\t\tisDisabled: true\n\t\t} as const;\n\t}\n\n\tinitDecoratorSettings() {\n\t\tthis.decorator.data.fenOptions.setTag(\"areBanksEnabled\", [true, true, true, true]);\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n\n\tgetDroppingMoves(piece: PieceString, color = this.decorator.data.sideToMove): DroppingMove[] {\n\t\tif (piece.color !== color) return [];\n\t\tconst royal = this.decorator.data.fenOptions.tag(\"royal\")[color];\n\t\tif (royal && this.decorator.preGeneratedAttacks[color].hoppingPieces[royal[0]][royal[1]]) return [];\n\n\t\tconst isPawn = pieceControlConfigSettings[piece.piece].moveGenerationSettings.isPawn;\n\t\tconst resultingMoveDrops: DroppingMove[] = [];\n\n\t\tconst isRY = isVerticalPlacement(color);\n\t\tconst pawnPromotionRank = this.decorator.variantData.promotionRank === false ? -1 : this.decorator.variantData.promotionRank;\n\t\tconst pawnBaseRank = this.decorator.data.fenOptions.tag(\"pawnBaseRank\");\n\n\t\tfor (let i = 0; i < boardDimension; i++) {\n\t\t\tif (isPawn && isRY && (pawnPromotionRank === i || pawnBaseRank === i)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (let j = 0; j < boardDimension; j++) {\n\t\t\t\tif (isPawn && !isRY && (pawnPromotionRank === j || pawnBaseRank === j)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst square = this.decorator.board[i][j];\n\t\t\t\tif (!square.isEmpty()) continue;\n\n\t\t\t\tresultingMoveDrops.push({ piece, endCoordinates: [i, j] });\n\t\t\t}\n\t\t}\n\n\t\tif (this.decorator.isKingInCheck(color)) {\n\t\t\treturn resultingMoveDrops.filter((moveDrop) => {\n\t\t\t\tconst { checks, checkmates } = this.decorator.makeMove([moveDrop], true);\n\t\t\t\treturn !checks[color] || checkmates[color] || this.decorator.isKingInCheck(color);\n\t\t\t});\n\t\t} else {\n\t\t\treturn resultingMoveDrops;\n\t\t}\n\t}\n}\n","import { Board } from \"../../../Board/Board\";\nimport { DroppingMove, getLatestChainedMoves, MoveData } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { VariantRuleAllowedChecks, variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { CaptureTheKing } from \"./CaptureTheKing\";\nimport { duckPieceString } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { boardDimension } from \"../../../GameInformation/GameData\";\nimport { Coordinate, nonPlayablePieces } from \"../../../GameInformation/GameUnits/GameUnits\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"duckChess\";\nexport class DuckChess extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(DuckChess);\n\t}\n\treadonly dependencies = new Map([[CaptureTheKing, []]]);\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Duck Chess\",\n\t\t\t\tdescription: \"The duck must be moved to an empty square after every move\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.extending,\n\t\t\t\tdisplayIcon: chessGlyphIndex.duck\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^DuckChess$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"DuckChess\";\n\t}\n\n\tisDisabled({ variantDataRules }: VariantRuleAllowedChecks): boolean {\n\t\treturn variantDataRules.taboo;\n\t}\n\n\tgetLegalMoves(i: number, j: number): MoveData[] {\n\t\tconst moves = this.callHandler(\"getLegalMoves\", arguments);\n\t\tconst latestMoves = getLatestChainedMoves(moves);\n\n\t\tconst ducks: Coordinate[] = [],\n\t\t\temptySquares: Coordinate[] = [];\n\t\tfor (let i = 0; i < boardDimension; i++) {\n\t\t\tfor (let j = 0; j < boardDimension; j++) {\n\t\t\t\tconst pieceString = this.decorator.board[i][j];\n\t\t\t\tif (pieceString.isWall() && pieceString.piece === nonPlayablePieces.duck) {\n\t\t\t\t\tducks.push([i, j]);\n\t\t\t\t} else if (pieceString.isEmpty()) {\n\t\t\t\t\temptySquares.push([i, j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst droppingChainedMoves: DroppingMove[] = [];\n\t\tconst duckChainedMoves: MoveData[] = [];\n\t\tif (ducks.length === 0) {\n\t\t\tfor (const emptySquare of emptySquares) {\n\t\t\t\tdroppingChainedMoves.push({ piece: duckPieceString, endCoordinates: emptySquare });\n\t\t\t}\n\t\t\tdroppingChainedMoves.push({ piece: duckPieceString, endCoordinates: [i, j] });\n\t\t} else {\n\t\t\tfor (const duck of ducks) {\n\t\t\t\tfor (const emptySquare of emptySquares) {\n\t\t\t\t\tduckChainedMoves.push({ startCoordinates: duck, endCoordinates: emptySquare });\n\t\t\t\t}\n\t\t\t\tduckChainedMoves.push({ startCoordinates: duck, endCoordinates: [i, j] });\n\t\t\t}\n\t\t}\n\n\t\tfor (const move of latestMoves) {\n\t\t\tmove.nextChainedMoves = droppingChainedMoves.length > 0 ? droppingChainedMoves : duckChainedMoves;\n\t\t}\n\n\t\treturn moves;\n\t}\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { BoardSquares, initializeBoardSquares } from \"../../../../BaseInterfaces\";\nimport { Board } from \"../../../Board/Board\";\nimport { DisplaySettings, unstringifyCoordinate } from \"../../../Board/BoardInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { VariantRuleAllowedChecks, variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { CaptureTheKing } from \"./CaptureTheKing\";\n\nconst tag = \"fogOfWar\";\nexport class FogOfWar extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(FogOfWar);\n\t}\n\treadonly dependencies = new Map([[CaptureTheKing, []]]);\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Fog of War\",\n\t\t\t\tdescription: \"Players can only see their pieces and the squares they can legally move to\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.widespread,\n\t\t\t\tdisplayIcon: chessGlyphIndex.fogOfWar\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^FogOfWar$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"FogOfWar\";\n\t}\n\n\tisDisabled({ variantDataRules }: VariantRuleAllowedChecks): boolean {\n\t\treturn variantDataRules.taboo;\n\t}\n\n\tgetSquareVisibility(): BoardSquares<DisplaySettings[]> {\n\t\tconst currentPlayerMoves: BoardSquares<boolean> = initializeBoardSquares(() => false);\n\t\tconst preGeneratedAttacks = this.decorator.preGeneratedAttacks[this.decorator.data.sideToMove];\n\t\tfor (const [piece, moves] of preGeneratedAttacks.pieceMovements) {\n\t\t\tconst startingCoordinate = unstringifyCoordinate(piece);\n\t\t\tcurrentPlayerMoves[startingCoordinate[0]][startingCoordinate[1]] = true;\n\t\t\tfor (const { move } of moves) {\n\t\t\t\tcurrentPlayerMoves[move[0]][move[1]] = true;\n\t\t\t}\n\t\t}\n\t\tfor (const drop of [...preGeneratedAttacks.pieceDrops.pawn, ...preGeneratedAttacks.pieceDrops.piece]) {\n\t\t\tcurrentPlayerMoves[drop.endCoordinates[0]][drop.endCoordinates[1]] = true;\n\t\t}\n\n\t\tconst squareVisibility: BoardSquares<DisplaySettings[]> = this.callHandler(\"getSquareVisibility\", arguments);\n\t\treturn squareVisibility.map((r, i) =>\n\t\t\tr.map((v, j) => {\n\t\t\t\tif (this.decorator.board[i][j].isWall() || currentPlayerMoves[i][j]) {\n\t\t\t\t\treturn v;\n\t\t\t\t} else {\n\t\t\t\t\treturn [...v, DisplaySettings.Fogged];\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n","import type { NumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { Board } from \"../../../Board/Board\";\nimport { stringifyCoordinate } from \"../../../Board/BoardInterface\";\nimport type { MoveData } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"forcedCapture\";\nexport class ForcedCapture extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(ForcedCapture);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Forced Capture\",\n\t\t\t\tdescription: \"Capturing is always compulsory\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.widespread,\n\t\t\t\tdisplayIcon: chessGlyphIndex.target\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string) {\n\t\treturn /^ForcedCapture$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"ForcedCapture\";\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tgetInsufficientMaterialData() {\n\t\treturn {\n\t\t\tisPartiallyDisabled: true,\n\t\t\tisDisabled: false\n\t\t} as const;\n\t}\n\n\tpregenerateAttacks(): void {\n\t\tconst {\n\t\t\tdata: { sideToMove },\n\t\t\tboard,\n\t\t\tpreGeneratedAttacks\n\t\t} = this.decorator;\n\t\tthis.callHandler(\"pregenerateAttacks\", arguments);\n\n\t\tfor (const piece of this.decorator.getPlayerPieces()[sideToMove]) {\n\t\t\tconst moves = preGeneratedAttacks[sideToMove].pieceMovements.get(stringifyCoordinate(piece));\n\t\t\tif (moves) {\n\t\t\t\tfor (const { move: coordinate } of moves) {\n\t\t\t\t\tif (board[coordinate[0]][coordinate[1]].isPiece()) {\n\t\t\t\t\t\tpreGeneratedAttacks[sideToMove].variantRuleCache.hasCaptures = true;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpreGeneratedAttacks[sideToMove].variantRuleCache.hasCaptures = false;\n\t}\n\n\tisTheMoveLegal(_: NumericColor, moveData: MoveData): boolean {\n\t\tconst isCapturing = this.decorator.data.getCapturedPieces(moveData).length > 0;\n\t\tif (!isCapturing && this.decorator.preGeneratedAttacks[this.decorator.data.sideToMove].variantRuleCache.hasCaptures) return false;\n\t\treturn this.callHandler(\"isTheMoveLegal\", arguments);\n\t}\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { shuffleArray } from \"../../../../../utils/ArrayUtils\";\nimport { Board } from \"../../../Board/Board\";\nimport { totalPlayers, VariantType } from \"../../../GameInformation/GameData\";\nimport { verifyNumericColor } from \"../../../GameInformation/GameUnits/GameUnits\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { VariantRuleAllowedChecks, variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"anonymous\";\nexport class Anonymous extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(Anonymous);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Anonymous\",\n\t\t\t\tdescription: \"Players' names and ratings are hidden\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.metadata,\n\t\t\t\tdisplayIcon: chessGlyphIndex.userInformation\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^Anonymous$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"Anonymous\";\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tinitDecoratorSettings() {\n\t\tfor (let i = 0; i < totalPlayers; i++) {\n\t\t\tthis.decorator.gameData.players[i].name = \"Anonymous\";\n\t\t\tthis.decorator.gameData.players[i].elo = undefined;\n\t\t}\n\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n}\n\nconst semiAnonTag = \"semiAnonymous\";\nexport class SemiAnonymous extends VariantRule<typeof Board, typeof semiAnonTag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(SemiAnonymous);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Semi-Anonymous\",\n\t\t\t\tdescription: \"Players's colors are hidden\",\n\t\t\t\ttag: semiAnonTag,\n\t\t\t\tcolor: variantRuleColors.metadata,\n\t\t\t\tdisplayIcon: chessGlyphIndex.userExtraInformation\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^Semi-Anonymous$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"Semi-Anonymous\";\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tinitDecoratorSettings() {\n\t\tshuffleArray(this.decorator.gameData.players);\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n}\n\nconst spTag = \"selfPartner\";\nexport class SelfPartner extends VariantRule<typeof Board, typeof spTag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(SelfPartner);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Self-Partner\",\n\t\t\t\tdescription: \"Both sides of the team were played by one player\",\n\t\t\t\ttag: spTag,\n\t\t\t\tcolor: variantRuleColors.metadata,\n\t\t\t\tdisplayIcon: chessGlyphIndex.selfPartner\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^SelfPartner$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"SelfPartner\";\n\t}\n\n\tisDisabled({ gameType, fenTags }: VariantRuleAllowedChecks): boolean {\n\t\treturn gameType !== VariantType.Teams || fenTags.resigned.value.filter(Boolean).length !== 0;\n\t}\n\n\tinitDecoratorSettings() {\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t\tconst gameType = this.decorator.gameType;\n\t\tconst firstTeamPlayer = gameType.teamSettings.firstTeamColors.indexOf(true),\n\t\t\tsecondTeamPlayer = gameType.teamSettings.secondTeamColors.indexOf(true);\n\t\tif (verifyNumericColor(firstTeamPlayer)) {\n\t\t\tthis.decorator.gameData.players[gameType.getTeammateColor(firstTeamPlayer)].name =\n\t\t\t\tthis.decorator.gameData.players[firstTeamPlayer].name;\n\t\t}\n\t\tif (verifyNumericColor(secondTeamPlayer)) {\n\t\t\tthis.decorator.gameData.players[gameType.getTeammateColor(secondTeamPlayer)].name =\n\t\t\t\tthis.decorator.gameData.players[secondTeamPlayer].name;\n\t\t}\n\t}\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport type { BoardSquares } from \"../../../../BaseInterfaces\";\nimport { Board } from \"../../../Board/Board\";\nimport { DisplaySettings } from \"../../../Board/BoardInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"ghostboard\";\nexport class Ghostboard extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(Ghostboard);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Ghostboard\",\n\t\t\t\tdescription: \"Board, clocks and players are invisible\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.visual,\n\t\t\t\tdisplayIcon: chessGlyphIndex.crossedBinoculars\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^Ghostboard$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"Ghostboard\";\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tgetSquareVisibility(): BoardSquares<DisplaySettings[]> {\n\t\tconst squareVisibility: BoardSquares<DisplaySettings[]> = this.callHandler(\"getSquareVisibility\", arguments);\n\t\treturn squareVisibility.map((r) => r.map((v) => [...v, DisplaySettings.Ghosted]));\n\t}\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { Board } from \"../../../Board/Board\";\nimport type { PieceString } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"paradigmChess30\";\nexport class ParadigmChess30 extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(ParadigmChess30);\n\t}\n\n\tprivate static readonly paradigmRanges = [...Array.from({ length: 14 }, (_, i) => [30 * (i + 1) + 1, 30 + 30 * (i + 1)])];\n\t// 0 = color bound, 1 = minor, 2 = major\n\tprivate static readonly permutations = [\n\t\t[0, 0, 1, 1, 2],\n\t\t[0, 0, 1, 2, 1],\n\t\t[0, 0, 2, 1, 1],\n\t\t[0, 1, 0, 1, 2],\n\t\t[0, 1, 0, 2, 1],\n\t\t[0, 1, 1, 0, 2],\n\t\t[0, 1, 1, 2, 0],\n\t\t[0, 1, 2, 0, 1],\n\t\t[0, 1, 2, 1, 0],\n\t\t[0, 2, 0, 1, 1],\n\t\t[0, 2, 1, 0, 1],\n\t\t[0, 2, 1, 1, 0],\n\t\t[1, 0, 0, 1, 2],\n\t\t[1, 0, 0, 2, 1],\n\t\t[1, 0, 1, 0, 2],\n\t\t[1, 0, 1, 2, 0],\n\t\t[1, 0, 2, 0, 1],\n\t\t[1, 0, 2, 1, 0],\n\t\t[1, 1, 0, 0, 2],\n\t\t[1, 1, 0, 2, 0],\n\t\t[1, 1, 2, 0, 0],\n\t\t[1, 2, 0, 0, 1],\n\t\t[1, 2, 0, 1, 0],\n\t\t[1, 2, 1, 0, 0],\n\t\t[2, 0, 0, 1, 1],\n\t\t[2, 0, 1, 0, 1],\n\t\t[2, 0, 1, 1, 0],\n\t\t[2, 1, 0, 0, 1],\n\t\t[2, 1, 0, 1, 0],\n\t\t[2, 1, 1, 0, 0]\n\t];\n\tprivate static readonly legacy = {\n\t\ttwoPlayerRank: 3,\n\t\ttwoPlayerAdjustment: 30 * 4\n\t} as const;\n\n\treadonly preMethodExecution: boolean = false;\n\tprivate positionId: number;\n\tconstructor(positionId?: unknown) {\n\t\tsuper();\n\t\tif (typeof positionId === \"number\") {\n\t\t\tthis.positionId = positionId;\n\t\t} else {\n\t\t\tthis.positionId = -1;\n\t\t}\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: this.positionId,\n\t\t\tinformation: {\n\t\t\t\tname: \"Paradigm Chess30\",\n\t\t\t\tdescription:\n\t\t\t\t\t\"Paradigm Chess30: Dragon bishops combine the movement of bishop and xiangqi horse. 30 semi-random starting positions\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.startingPosition,\n\t\t\t\tdisplayIcon: chessGlyphIndex.bishop\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\tconst matchArray = match.match(/^ParadigmChess30=((\\d{1,3}))$/i);\n\t\tif (matchArray) {\n\t\t\tconst newID = Number(matchArray[1]);\n\t\t\tif (newID < 0 || newID > 450) return false;\n\t\t\tthis.positionId = newID;\n\t\t\treturn true;\n\t\t} else return false;\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn `ParadigmChess30=${this.positionId}`;\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tgetInformation() {\n\t\treturn {\n\t\t\tname: \"Paradigm Chess30\",\n\t\t\tdescription: \"Paradigm Chess30: Dragon bishops combine the movement of bishop and xiangqi horse. 30 semi-random starting positions\",\n\t\t\ttag\n\t\t} as const;\n\t}\n\n\tinitDecoratorSettings() {\n\t\tif (this.positionId === -1) throw new Error(\"Position ID for Paradigm Chess30 is not defined\");\n\t\tlet nr = this.positionId;\n\t\tconst boardSquares = this.decorator.board;\n\t\tconst data = this.decorator.data;\n\n\t\tlet rank = ParadigmChess30.paradigmRanges.findIndex((r) => nr >= r[0] && nr <= r[1]);\n\t\tif (rank === -1) {\n\t\t\trank = ParadigmChess30.legacy.twoPlayerRank;\n\t\t\tnr += ParadigmChess30.legacy.twoPlayerAdjustment;\n\t\t}\n\t\tconst calcNr = nr - ParadigmChess30.paradigmRanges[rank][0];\n\t\tconst ranks = [13 - rank, rank, rank, 13 - rank];\n\t\tconst pieceArrays: PieceString[][] = [[], [], [], []];\n\t\tpieceArrays[0] = boardSquares[ranks[0]].slice(4, 10);\n\t\tpieceArrays[1] = boardSquares.map((row) => row[ranks[1]]).slice(4, 10);\n\t\tpieceArrays[2] = boardSquares[ranks[2]].slice(4, 10);\n\t\tpieceArrays[3] = boardSquares.map((row) => row[ranks[3]]).slice(4, 10);\n\n\t\tconst royalPieces = data.fenOptions.tag(\"royal\"),\n\t\t\tdead = data.fenOptions.tag(\"dead\");\n\t\tconst replaceRow = (player: number): void => {\n\t\t\tconst r = royalPieces[player]?.[player % 2 === 0 ? 1 : 0];\n\t\t\tconst pieceCoordinates = [[5, 8], [4, 9], [r === undefined || r >= 7 ? 6 : 7]];\n\n\t\t\tconst moveCoordinate = (i: number, iter: number) => {\n\t\t\t\tif (dead[player]) return;\n\t\t\t\tconst coordinateA = player % 2 === 0 ? ranks[player] : iter;\n\t\t\t\tconst coordinateB = player % 2 === 0 ? iter : ranks[player];\n\n\t\t\t\tif (pieceArrays[player][pieceCoordinates[i][0] - 4].isWall() || boardSquares[coordinateA][coordinateB].isWall()) return;\n\t\t\t\troyalPieces.some((r) => {\n\t\t\t\t\tif (r && r[0] === coordinateA && r[1] === coordinateB) {\n\t\t\t\t\t\t(r[0] = coordinateB), (r[1] = coordinateA);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\n\t\t\t\tboardSquares[coordinateA][coordinateB] = pieceArrays[player][(pieceCoordinates[i].shift() ?? 4) - 4];\n\t\t\t};\n\n\t\t\tlet c = 0;\n\t\t\tconst rp = r === undefined || r >= 7 ? 7 : 6;\n\t\t\tconst permutations = rp === 6 ? ParadigmChess30.permutations[calcNr].slice().reverse() : ParadigmChess30.permutations[calcNr];\n\t\t\tfor (let i = 4; i < 10; i++) {\n\t\t\t\tif (i === rp) continue;\n\t\t\t\tmoveCoordinate(permutations[c++], i);\n\t\t\t}\n\t\t};\n\n\t\tfor (let i = 0; i < 4; i++) replaceRow(i);\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n}\n","import type { BoardSquares } from \"@client/ts/logic/BaseInterfaces\";\nimport { Board } from \"../../../Board/Board\";\nimport { DisplaySettings } from \"../../../Board/BoardInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { VariantRuleHandler, variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"piecesFaceCenter\";\nexport class PiecesFaceCenter extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(PiecesFaceCenter);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Pieces Face Center\",\n\t\t\t\tdescription: \"Pieces are rotated to face center\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.visual,\n\t\t\t\tdisplayIcon: chessGlyphIndex.pawn3dLarge\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^PiecesFaceCenter$/i.test(match);\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn \"PiecesFaceCenter\";\n\t}\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tgetSquareVisibility(): BoardSquares<DisplaySettings[]> {\n\t\tconst squareVisibility: BoardSquares<DisplaySettings[]> = this.callHandler(\"getSquareVisibility\", arguments);\n\t\treturn squareVisibility.map((r, i) =>\n\t\t\tr.map((v, j) => {\n\t\t\t\tif (!this.decorator.board[i][j].isPiece()) {\n\t\t\t\t\treturn v;\n\t\t\t\t} else {\n\t\t\t\t\treturn [...v, DisplaySettings.PieceFacesCenter];\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n","import type { Coordinate } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { Board } from \"../../../Board/Board\";\nimport { stringifyCoordinate } from \"../../../Board/BoardInterface\";\nimport type { PostMoveResults } from \"../../../FENData/FENDataInterface\";\nimport { colors } from \"../../../GameInformation/GameData\";\nimport { DroppingMove, Move, MoveData, verifyRequiredMove, verifyStandardMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { VariantRuleAllowedChecks, VariantRuleHandler, variantRuleColors } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"seirawanSetup\";\nexport class SeirawanSetup extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(SeirawanSetup);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Seirawan Setup\",\n\t\t\t\tdescription:\n\t\t\t\t\t\"When moving a piece for the first time, a piece from the bank can be placed on the vacated square, as part of the move\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.extending,\n\t\t\t\tdisplayIcon: chessGlyphIndex.pieceMeal\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string) {\n\t\treturn /^SeirawanSetup$/i.test(match);\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn \"SeirawanSetup\";\n\t}\n\tisDisabled({ variantDataRules }: VariantRuleAllowedChecks): boolean {\n\t\treturn variantDataRules.crazyhouse || variantDataRules.setupChess !== false;\n\t}\n\n\tinitDecoratorSettings() {\n\t\tconst fenOptions = this.decorator.data.fenOptions;\n\t\tconst areBanksEnabled = fenOptions.tag(\"areBanksEnabled\"),\n\t\t\tdead = fenOptions.tag(\"dead\"),\n\t\t\tseirawanDrops = fenOptions.tag(\"seirawanDrops\"),\n\t\t\tbank = fenOptions.tag(\"bank\");\n\t\tfor (const color of colors) {\n\t\t\tif (!dead[color] && seirawanDrops[color].size > 0 && bank[color].size > 0) {\n\t\t\t\tareBanksEnabled[color] = true;\n\t\t\t}\n\t\t}\n\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n\n\tmakeMove(move: Move): PostMoveResults {\n\t\tconst { fenOptions, sideToMove } = this.decorator.data;\n\t\tconst areBanksEnabled = fenOptions.tag(\"areBanksEnabled\"),\n\t\t\tseirawanDrops = fenOptions.tag(\"seirawanDrops\"),\n\t\t\tbank = fenOptions.tag(\"bank\");\n\t\tlet disabledIndex = false;\n\t\tif (verifyStandardMove(move[0])) {\n\t\t\tseirawanDrops[sideToMove].delete(stringifyCoordinate(move[0].startCoordinates));\n\n\t\t\tif (seirawanDrops[sideToMove].size === 0 || bank[sideToMove].size === 0) {\n\t\t\t\tdisabledIndex = true;\n\t\t\t}\n\t\t}\n\n\t\tconst returnValue = this.callHandler(\"makeMove\", arguments);\n\t\tif (disabledIndex) {\n\t\t\tseirawanDrops[sideToMove].clear();\n\t\t\tbank[sideToMove].clear();\n\t\t\tareBanksEnabled[sideToMove] = false;\n\t\t}\n\n\t\treturn returnValue;\n\t}\n\n\tgetLegalMoves(i: number, j: number): MoveData[] {\n\t\tconst { fenOptions, sideToMove } = this.decorator.data;\n\t\tconst seirawanDrops = fenOptions.tag(\"seirawanDrops\"),\n\t\t\tbank = fenOptions.tag(\"bank\");\n\n\t\tconst startCoordinates: Coordinate = [i, j];\n\t\tconst stringifiedCoordinate = stringifyCoordinate(startCoordinates);\n\t\tconst coordinate = [...seirawanDrops[sideToMove]].find((c) => c === stringifiedCoordinate);\n\n\t\tconst validateWithDrops = bank[sideToMove].size !== 0 && coordinate !== undefined;\n\t\tconst moves = this.callHandler(\"getLegalMoves\", arguments);\n\n\t\tconst continuations: DroppingMove[] = [];\n\t\tfor (const piece of bank[sideToMove].keys()) {\n\t\t\tcontinuations.push({ piece, endCoordinates: startCoordinates });\n\t\t}\n\n\t\tif (validateWithDrops && verifyRequiredMove(continuations)) {\n\t\t\tfor (const move of moves) {\n\t\t\t\tmove.nextChainedMoves = continuations;\n\t\t\t}\n\t\t}\n\n\t\treturn moves;\n\t}\n}\n","import type { Tuple } from \"@client/ts/baseTypes\";\nimport type { totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport { Board } from \"../../../Board/Board\";\nimport { compareCoordinates, stringifyCoordinate } from \"../../../Board/BoardInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { VariantRuleAllowedChecks, variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"selfCheck\";\nexport class SelfCheck extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(SelfCheck);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Self-check\",\n\t\t\t\tdescription: \"Self-checks cost lives. Checkmate yourself to earn points\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.minor,\n\t\t\t\tdisplayIcon: chessGlyphIndex.donut\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^SelfCheck$/i.test(match);\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn \"SelfCheck\";\n\t}\n\tisDisabled({ variantDataRules }: VariantRuleAllowedChecks): boolean {\n\t\treturn !variantDataRules.nCheck || !variantDataRules.captureTheKing;\n\t}\n\n\tgetCurrentChecks(baseColor = this.decorator.data.sideToMove): Tuple<string[], typeof totalPlayers> {\n\t\tconst {\n\t\t\tdata: { fenOptions, sideToMove },\n\t\t\tpreGeneratedAttacks\n\t\t} = this.decorator;\n\t\tconst baseChecks = this.callHandler(\"getCurrentChecks\", arguments);\n\t\tconst royal = fenOptions.tag(\"royal\")[baseColor];\n\t\tconst newCoordinates: string[] = [];\n\n\t\tif (royal) {\n\t\t\tfor (const [attackingPiece, attackCoordinates] of preGeneratedAttacks[sideToMove].hoppingPieceLines) {\n\t\t\t\tif (compareCoordinates(attackCoordinates, royal)) {\n\t\t\t\t\tnewCoordinates.push(stringifyCoordinate(attackingPiece));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const [attackingPiece, attackLine] of preGeneratedAttacks[sideToMove].slidingPiecesLines) {\n\t\t\t\tfor (const attackCoordinates of attackLine) {\n\t\t\t\t\tif (compareCoordinates(attackCoordinates, royal)) {\n\t\t\t\t\t\tnewCoordinates.push(stringifyCoordinate(attackingPiece));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbaseChecks[baseColor] = newCoordinates;\n\t\treturn baseChecks;\n\t}\n}\n","import type { Coordinate, NumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { createTupleFromCallback, Tuple } from \"../../../../../baseTypes\";\nimport { Board, PlayerBooleanTuple } from \"../../../Board/Board\";\nimport type { PostMoveResults } from \"../../../FENData/FENDataInterface\";\nimport { boardDimension, colors, totalPlayers } from \"../../../GameInformation/GameData\";\nimport { PieceString } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { DroppingMove, InternalMoveSignature, Move, MoveData, verifyDroppingMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"setupChess\";\nexport class SetupChess extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(SetupChess);\n\t}\n\n\tprivate disabled = false;\n\tprivate setupPoints: number | false;\n\tprivate wereBanksEnabled: PlayerBooleanTuple = [false, false, false, false];\n\tprivate permutationCoordinates: Tuple<Coordinate[], typeof totalPlayers> = [[], [], [], []];\n\tprivate pawnPermutationCoordinates: Tuple<Coordinate[], typeof totalPlayers> = [[], [], [], []];\n\tconstructor(setupPoints?: unknown) {\n\t\tsuper();\n\t\tif (typeof setupPoints === \"number\") {\n\t\t\tthis.setupPoints = setupPoints;\n\t\t} else {\n\t\t\tthis.setupPoints = false;\n\t\t}\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: this.setupPoints,\n\t\t\tinformation: {\n\t\t\t\tname: `Setup Material`,\n\t\t\t\tdescription: `Set up ${this.setupPoints || 0} points before the game starts`,\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.phased,\n\t\t\t\tdisplayIcon: chessGlyphIndex.movePawn\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\tconst matchArray = match.match(/^Setup=(\\d+)$/);\n\t\tif (matchArray) {\n\t\t\tthis.setupPoints = Number(matchArray[1]);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn `Setup=${this.setupPoints || 0}`;\n\t}\n\n\tisDisabled() {\n\t\treturn false;\n\t}\n\n\tgetInsufficientMaterialData() {\n\t\treturn {\n\t\t\tisPartiallyDisabled: false,\n\t\t\tisDisabled: true\n\t\t} as const;\n\t}\n\n\tgetParametrizedOptions() {\n\t\tconst options = new Map<string, number | false>([[\"Off\", false]]);\n\t\tfor (let i = 1; i < 50; i++) options.set(String(i), i);\n\t\tfor (let i = 50; i <= 120; i += 5) options.set(String(i), i);\n\t\treturn options;\n\t}\n\n\tinitDecoratorSettings() {\n\t\tconst fenOptions = this.decorator.data.fenOptions;\n\t\tconst areBanksEnabled = fenOptions.tag(\"areBanksEnabled\"),\n\t\t\tdead = fenOptions.tag(\"dead\"),\n\t\t\tsetupComplete = fenOptions.tag(\"setupComplete\"),\n\t\t\tsetupPoints = fenOptions.tag(\"setupPoints\"),\n\t\t\tpawnBaseRank = fenOptions.tag(\"pawnBaseRank\"),\n\t\t\troyal = fenOptions.tag(\"royal\"),\n\t\t\tcastleKingside = fenOptions.tag(\"castleKingside\"),\n\t\t\tcastleQueenside = fenOptions.tag(\"castleQueenside\");\n\t\tconst areSetupPointsUnset = setupPoints === null;\n\n\t\tconst modifyDisplacements = (i: number, j: number, color: NumericColor): Coordinate => {\n\t\t\tconst baseDisplacements: Coordinate[] = [\n\t\t\t\t[13 - i, j],\n\t\t\t\t[j, i],\n\t\t\t\t[i, j],\n\t\t\t\t[13 - j, i]\n\t\t\t];\n\t\t\treturn baseDisplacements[color];\n\t\t};\n\n\t\tfor (const color of colors) {\n\t\t\tlet bankEnabled = false;\n\t\t\tif (areBanksEnabled[color]) {\n\t\t\t\tthis.wereBanksEnabled[color] = true;\n\t\t\t\tbankEnabled = true;\n\t\t\t} else if (!setupComplete[color]) {\n\t\t\t\tareBanksEnabled[color] = true;\n\t\t\t\tbankEnabled = true;\n\t\t\t}\n\n\t\t\tif (bankEnabled) {\n\t\t\t\tconst files = createTupleFromCallback((_, i) => i, boardDimension);\n\t\t\t\tconst pawnRanks = [pawnBaseRank, pawnBaseRank + 1].filter((rank) => rank >= 0 && rank <= 13);\n\t\t\t\tconst ranks = [pawnBaseRank - 1, ...pawnRanks];\n\t\t\t\tthis.permutationCoordinates[color] = files.flatMap((file) =>\n\t\t\t\t\tranks.map((rank): Coordinate => modifyDisplacements(rank, file, color))\n\t\t\t\t);\n\t\t\t\tthis.pawnPermutationCoordinates[color] = files.flatMap((file) =>\n\t\t\t\t\tpawnRanks.map((rank): Coordinate => modifyDisplacements(rank, file, color))\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!areSetupPointsUnset && !dead[color]) {\n\t\t\t\tsetupPoints[color] = this.setupPoints === false ? 0 : this.setupPoints;\n\t\t\t}\n\n\t\t\tif (!royal[color]) {\n\t\t\t\tcastleKingside[color] = false;\n\t\t\t\tcastleQueenside[color] = false;\n\t\t\t}\n\t\t}\n\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n\n\tgetLegalMoves(): MoveData[] {\n\t\tif (!this.disabled) return [];\n\t\treturn this.callHandler(\"getLegalMoves\", arguments);\n\t}\n\n\tprivate getCoordinateList(piece: PieceString) {\n\t\treturn pieceControlConfigSettings[piece.piece].moveGenerationSettings.isPawn\n\t\t\t? this.pawnPermutationCoordinates\n\t\t\t: this.permutationCoordinates;\n\t}\n\n\tgetDroppingMoves(piece: PieceString, color = this.decorator.data.sideToMove): DroppingMove[] {\n\t\tif (piece.color !== color) return [];\n\t\tif (!this.disabled && !this.decorator.data.fenOptions.tag(\"setupComplete\")[color]) {\n\t\t\tconst coordinateList = this.getCoordinateList(piece);\n\t\t\tconst resultingMoveDrops: DroppingMove[] = [];\n\n\t\t\tfor (const coordinate of coordinateList[color]) {\n\t\t\t\tif (this.decorator.board[coordinate[0]][coordinate[1]].isEmpty()) {\n\t\t\t\t\tresultingMoveDrops.push({ piece, endCoordinates: coordinate });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn resultingMoveDrops;\n\t\t} else return this.callHandler(\"getDroppingMoves\", arguments);\n\t}\n\n\tmakeMove(move: Move, ignoreNextMoves = false): PostMoveResults {\n\t\tconst fenOptions = this.decorator.data.fenOptions;\n\t\tconst areBanksEnabled = fenOptions.tag(\"areBanksEnabled\"),\n\t\t\tdead = fenOptions.tag(\"dead\"),\n\t\t\tsetupComplete = fenOptions.tag(\"setupComplete\"),\n\t\t\tsetupPoints = fenOptions.tag(\"setupPoints\"),\n\t\t\tbank = fenOptions.tag(\"bank\"),\n\t\t\troyal = fenOptions.tag(\"royal\");\n\t\tconst color = this.decorator.data.sideToMove,\n\t\t\tmoveData = move[0];\n\t\tconst results = this.callHandler(\"makeMove\", arguments);\n\n\t\tif (!this.disabled && !setupComplete[color] && verifyDroppingMove(moveData) && setupPoints) {\n\t\t\tconst pointValue = pieceControlConfigSettings[moveData.piece.piece].points.singlesPoints;\n\t\t\tif (moveData.piece.piece === \"K\") {\n\t\t\t\tbank[color].delete(moveData.piece);\n\t\t\t\troyal[color] = moveData.endCoordinates;\n\t\t\t} else {\n\t\t\t\tsetupPoints[color] -= pointValue;\n\t\t\t}\n\n\t\t\tconst pointsLeft = setupPoints[color];\n\t\t\tfor (const [piece] of bank[color]) {\n\t\t\t\tif (piece.piece !== \"K\" && pointValue > pointsLeft) {\n\t\t\t\t\tbank[color].delete(piece);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (bank[color].size === 0) {\n\t\t\t\tsetupComplete[color] = true;\n\t\t\t} else {\n\t\t\t\tconst coordinateList = this.getCoordinateList(moveData.piece);\n\n\t\t\t\tlet anyDrop = false;\n\t\t\t\tfor (const coordinate of coordinateList[color]) {\n\t\t\t\t\tif (this.decorator.board[coordinate[0]][coordinate[1]].isEmpty()) {\n\t\t\t\t\t\tanyDrop = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!anyDrop) {\n\t\t\t\t\tsetupComplete[color] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (setupComplete.every((v, i) => v || dead[i])) {\n\t\t\tthis.disabled = true;\n\t\t\tfor (const color of colors) {\n\t\t\t\tif (!this.wereBanksEnabled[color]) {\n\t\t\t\t\tareBanksEnabled[color] = false;\n\t\t\t\t\tbank[color].clear();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this.disabled && !ignoreNextMoves && setupComplete[this.decorator.data.sideToMove]) {\n\t\t\tBoard.prototype.makeMove.call(this.decorator, [{ type: InternalMoveSignature.Pass }]);\n\t\t}\n\n\t\treturn results;\n\t}\n}\n","import type { MoveData } from \"../../../MoveTree/MoveTreeInterface\";\nimport { Board } from \"../../../Board/Board\";\nimport { colors } from \"../../../GameInformation/GameData\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport type { NumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nexport interface Test {\n\ttaboo: boolean | false;\n}\n\nconst tag = \"taboo\";\nexport class Taboo extends VariantRule<typeof Board, typeof tag> implements VariantRuleHandler<Board> {\n\tstatic {\n\t\tVariantRule.initVariantRule(Taboo);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn Board;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Taboo\",\n\t\t\t\tdescription: \"Giving check is forbidden\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.widespread,\n\t\t\t\tdisplayIcon: chessGlyphIndex.equal\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^Taboo$/i.test(match);\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn \"Taboo\";\n\t}\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tisSetupComplex(): boolean {\n\t\treturn true;\n\t}\n\n\tisTheMoveLegal(_: NumericColor, moveData: MoveData): boolean {\n\t\tconst initialDead = this.decorator.data.fenOptions.tag(\"dead\").slice();\n\t\tconst snapshot = this.decorator.createSnapshot();\n\n\t\ttry {\n\t\t\tthis.decorator.makeMove([moveData], true);\n\t\t\tconst newDead = this.decorator.data.fenOptions.tag(\"dead\").slice();\n\n\t\t\tfor (const color of colors) {\n\t\t\t\tif ((!initialDead[color] && newDead[color]) || this.decorator.isKingInCheck(color)) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} finally {\n\t\t\tthis.decorator.loadSnapshot(snapshot);\n\t\t}\n\t}\n}\n","import { createTuple, Tuple } from \"@client/ts/baseTypes\";\nimport { BoardSquares, initializeBoardSquares } from \"@client/ts/logic/BaseInterfaces\";\nimport type { Board } from \"@moveGeneration/Board/Board\";\nimport { stringifyCoordinate } from \"@moveGeneration/Board/BoardInterface\";\nimport type { FENData } from \"@moveGeneration/FENData/FENData\";\nimport { totalPlayers, colors, VariantType, boardDimension } from \"@moveGeneration/GameInformation/GameData\";\nimport type { NumericColor, Coordinate } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { pawnPieceString, PieceString } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport {\n\tInternalMoveSignature,\n\tMoveComponent,\n\tSpecialMove,\n\tverifyInternalMove,\n\tverifyStandardMove\n} from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport type { PieceControlConfigurator } from \"@moveGeneration/PieceControl/PieceControlBuilder\";\nimport { pieceControlConfigSettings, PieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport type { VariantDataRules } from \"@moveGeneration/VariantRules/VariantRuleInterface\";\nimport { createBotAlgorithm, ZombieMoveGenerationAlgorithm, ZombieType } from \"../BotInterface\";\nimport { randomlyPickNextChainedMoves } from \"./RandomEvaluation\";\n\nconst onlyUnique = <T>(value: T, index: number, self: T[]) => self.indexOf(value) === index;\nconst stringifyKey = (i: number, j: number, color?: NumericColor) => `${i},${j}/${color ?? \"\"}`;\nfunction getPieceInFront(i: number, j: number, color: NumericColor): [number, number] {\n\tswitch (color) {\n\t\tcase 0:\n\t\t\treturn [i - 1, j];\n\t\tcase 1:\n\t\t\treturn [i, j + 1];\n\t\tcase 2:\n\t\t\treturn [i + 1, j];\n\t\tcase 3:\n\t\t\treturn [i, j - 1];\n\t}\n}\n\ninterface ReadonlyFlattenedBoardSettings {\n\tvariantData: VariantDataRules;\n\tpromotionRank: Tuple<number, typeof totalPlayers>;\n\tisFFA: boolean;\n\tisTeams: boolean;\n\tzombieType: Tuple<ZombieType, typeof totalPlayers>;\n\tdefaultSideToMove: NumericColor;\n}\n\ninterface SquareCoverage {\n\tattackers: Coordinate[];\n\tdefenders: Coordinate[];\n}\n\ninterface FlattenedBoardSettings extends Readonly<ReadonlyFlattenedBoardSettings> {\n\tboard: Board;\n\tboardSquares: PieceString[][];\n\tdata: FENData;\n\tremainingReal: number;\n\tremaining: Array<number | false>;\n\tcoverage: BoardSquares<Coordinate[]>;\n\tpieces: Coordinate[][];\n\troyal: Tuple<Coordinate | null, typeof totalPlayers>;\n\tcontrols: Record<PieceLetter, () => PieceControlConfigurator>;\n\tcoverageCache: Map<string, SquareCoverage>;\n\tpieceValueCache: Map<string, number>;\n\thangingCache: Map<string, number>;\n}\n\nfunction createComfuterAlgorithm(): ZombieMoveGenerationAlgorithm {\n\tlet boardAccessors: FlattenedBoardSettings;\n\tfunction augmentBoardAccessorsFromBoard(board: Board): Omit<FlattenedBoardSettings, keyof ReadonlyFlattenedBoardSettings> {\n\t\treturn {\n\t\t\tboard,\n\t\t\tboardSquares: board.board,\n\t\t\tdata: board.data,\n\t\t\tremainingReal: board.data.getRealPlayers(),\n\t\t\tremaining: board.data.fenOptions\n\t\t\t\t.tag(\"dead\")\n\t\t\t\t.map((v, i) => (v ? false : i))\n\t\t\t\t.filter((v) => v === false),\n\t\t\tcoverage: initializeBoardSquares(() => []),\n\t\t\tpieces: board.getPlayerPieces(),\n\t\t\tcontrols: board.controls,\n\t\t\troyal: board.data.fenOptions.tag(\"royal\"),\n\t\t\thangingCache: new Map(),\n\t\t\tcoverageCache: new Map(),\n\t\t\tpieceValueCache: new Map()\n\t\t};\n\t}\n\n\tfunction initializeBoardAccessorsFromBoard(board: Board) {\n\t\tconst promotionRank: Tuple<number, typeof totalPlayers> =\n\t\t\tboard.variantData.promotionRank !== false\n\t\t\t\t? [\n\t\t\t\t\t\tboardDimension - board.variantData.promotionRank,\n\t\t\t\t\t\tboard.variantData.promotionRank - 1,\n\t\t\t\t\t\tboard.variantData.promotionRank - 1,\n\t\t\t\t\t\tboardDimension - board.variantData.promotionRank\n\t\t\t\t  ]\n\t\t\t\t: createTuple(99, totalPlayers);\n\t\tboardAccessors = {\n\t\t\t...augmentBoardAccessorsFromBoard(board),\n\t\t\tvariantData: board.variantData,\n\t\t\tpromotionRank,\n\t\t\tisFFA: board.gameType.isFFA(),\n\t\t\tisTeams: !board.gameType.isFFA(),\n\t\t\tzombieType: board.data.fenOptions.tag(\"zombieType\"),\n\t\t\tdefaultSideToMove: board.data.sideToMove\n\t\t};\n\t}\n\n\tfunction getDistanceFromPromotion(color: NumericColor, i: number, j: number): number {\n\t\tif (i === -1) return 99;\n\t\treturn Math.abs(boardAccessors.promotionRank[color] - (color & 1 ? i : j)) || 99;\n\t}\n\n\tfunction getDistanceFromKing(i: number, j: number, color: NumericColor): number {\n\t\tif (i === -1) return 999;\n\t\tconst royalPiece = boardAccessors.royal[color];\n\t\tif (!royalPiece) return 999;\n\t\tconst x = Math.abs(i - royalPiece[0]),\n\t\t\ty = Math.abs(j - royalPiece[1]);\n\t\tif (x === 0 && y === 0) return 999;\n\t\treturn Math.max(x, y);\n\t}\n\n\tfunction inspectCoverage(): void {\n\t\tconst { board, boardSquares, pieces, coverage } = boardAccessors;\n\n\t\tfor (const color of colors) {\n\t\t\tfor (const coordinate of pieces[color]) {\n\t\t\t\tconst pc = boardSquares[coordinate[0]][coordinate[1]];\n\t\t\t\tif (!pc.isPiece()) continue;\n\t\t\t\tconst destinations = board.preGeneratedAttacks[color].pieceMovements.get(stringifyCoordinate(coordinate));\n\t\t\t\tif (!destinations) continue;\n\n\t\t\t\tfor (const dest of destinations) {\n\t\t\t\t\tcoverage[dest.move[0]][dest.move[1]].push(coordinate);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction getCoverage(i: number, j: number, color: NumericColor): SquareCoverage {\n\t\tconst { coverageCache, coverage, boardSquares, data, board, zombieType, defaultSideToMove } = boardAccessors;\n\t\tconst resigned = data.fenOptions.tag(\"resigned\");\n\n\t\tconst key = stringifyKey(i, j, color);\n\t\tif (coverageCache.has(key)) return coverageCache.get(key)!;\n\t\tconst attackers: Coordinate[] = [],\n\t\t\tdefenders: Coordinate[] = [];\n\t\tconst cvg = coverage[i][j];\n\t\tif (cvg.length) {\n\t\t\tfor (const pieceC of cvg) {\n\t\t\t\tconst piece = boardSquares[pieceC[0]][pieceC[1]];\n\t\t\t\tif (!piece.isPiece()) continue;\n\t\t\t\tconst pieceColor = piece.color;\n\t\t\t\tif (resigned[pieceColor] && zombieType[pieceColor] === ZombieType.Rando) continue;\n\t\t\t\tif (board.gameType.isSameTeam(pieceColor, defaultSideToMove)) {\n\t\t\t\t\tdefenders.push(pieceC);\n\t\t\t\t} else {\n\t\t\t\t\tattackers.push(pieceC);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst cache = color === defaultSideToMove ? { attackers, defenders } : { defenders: attackers, attackers: defenders };\n\t\tcoverageCache.set(key, cache);\n\t\treturn cache;\n\t}\n\n\tfunction getPieceValue(i: number, j: number): number {\n\t\tconst { boardSquares, pieceValueCache, isFFA, isTeams, remainingReal, royal, board } = boardAccessors;\n\n\t\tconst coordinates: [number, number] = [i, j];\n\t\tconst pieceString = boardSquares[i][j];\n\t\tif (!pieceString.isPiece()) return 0;\n\t\tconst piece = pieceString.piece;\n\t\tconst key = `${coordinates[0]},${coordinates[1]}/${pieceString.color}`;\n\t\tif (pieceValueCache.has(key)) return pieceValueCache.get(key)!;\n\n\t\tlet value = 0;\n\t\tconst controlSetting = pieceControlConfigSettings[piece];\n\t\tif (!controlSetting.moveGenerationSettings.isPawn) {\n\t\t\tvalue = isTeams ? controlSetting.points.botTeamsValue : controlSetting.points.botFFAValue;\n\t\t} else {\n\t\t\tvalue = isFFA ? 1 : 0.4;\n\t\t\tconst promotionDistance = getDistanceFromPromotion(pieceString.color, ...coordinates);\n\t\t\tvalue += (2 / (getDistanceFromKing(...coordinates, pieceString.color) * 3)) * (remainingReal / 4);\n\t\t\tvalue += 3 / (promotionDistance * 3);\n\n\t\t\tif (promotionDistance < 2) {\n\t\t\t\tconst inFront = getPieceInFront(...coordinates, pieceString.color);\n\t\t\t\tconst { attackers, defenders } = getCoverage(...inFront, pieceString.color);\n\t\t\t\tif (!defenders.length) {\n\t\t\t\t\tvalue += 3 / promotionDistance;\n\t\t\t\t}\n\t\t\t\tif (attackers.length < defenders.length) {\n\t\t\t\t\tvalue += 2 / promotionDistance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet isRoyal = false;\n\t\tfor (const royalPiece of royal) {\n\t\t\tif (!royalPiece) continue;\n\t\t\tif (royalPiece[0] === coordinates[0] && royalPiece[1] === coordinates[1]) {\n\t\t\t\tisRoyal = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!isRoyal && piece !== pawnPieceString.piece) {\n\t\t\tfor (const color of colors) {\n\t\t\t\tif (!board.gameType.isSameTeam(color, pieceString.color)) {\n\t\t\t\t\tlet d = getDistanceFromKing(...coordinates, color);\n\t\t\t\t\tif (d < 3) d = 2;\n\t\t\t\t\tvalue += (5 - remainingReal) / d;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpieceValueCache.set(key, value);\n\t\treturn value;\n\t}\n\n\tfunction getCoordinationEval(player: NumericColor): number {\n\t\tconst { pieces, remainingReal } = boardAccessors;\n\n\t\tlet e = 0;\n\t\tfor (const piece of pieces[player]) {\n\t\t\tconst { defenders } = getCoverage(piece[0], piece[1], player);\n\t\t\tfor (const d of defenders) e += 30 / (getPieceValue(d[0], d[1]) * 2);\n\t\t}\n\t\tif (remainingReal === 2) {\n\t\t\te *= 0.4;\n\t\t} else if (remainingReal === 3) {\n\t\t\te *= 0.7;\n\t\t}\n\n\t\treturn e / 55;\n\t}\n\n\tfunction firstPlayerMovesBefore(p1: NumericColor, p2: NumericColor): boolean {\n\t\tconst { data, defaultSideToMove } = boardAccessors;\n\n\t\tlet next = data.nextTurn();\n\t\tdo {\n\t\t\tif (p1 === next) return true;\n\t\t\tif (p2 === next) return false;\n\t\t\tnext = data.nextTurn(next);\n\t\t} while (next !== defaultSideToMove);\n\n\t\treturn true;\n\t}\n\n\tfunction canRespondDirectlyToThreat(player: NumericColor, attackers: Coordinate[]): boolean {\n\t\tconst { boardSquares } = boardAccessors;\n\n\t\tlet attackingPlayers: NumericColor[] = [];\n\t\tfor (const pc of attackers) {\n\t\t\tconst square = boardSquares[pc[0]][pc[1]];\n\t\t\tif (!square.isPiece()) continue;\n\t\t\tattackingPlayers.push(square.color);\n\t\t}\n\t\tattackingPlayers = attackingPlayers.filter(onlyUnique);\n\n\t\tfor (const a of attackingPlayers) {\n\t\t\tif (firstPlayerMovesBefore(player, a)) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction hanging(i: number, j: number, pieceValue = getPieceValue(i, j)): number {\n\t\tconst { hangingCache, boardSquares, remaining, data } = boardAccessors;\n\n\t\tconst key = stringifyKey(i, j);\n\t\tif (hangingCache.has(key)) return hangingCache.get(key)!;\n\t\tconst square = boardSquares[i][j];\n\t\tif (!square.isPiece()) return 0;\n\t\tconst { attackers, defenders } = getCoverage(i, j, square.color);\n\n\t\tlet attackerValue = 999;\n\t\tfor (const pc of attackers) {\n\t\t\tattackerValue = Math.min(attackerValue, getPieceValue(pc[0], pc[1]));\n\t\t}\n\t\tlet attackedFromLeft = false;\n\t\tconst nextTurn = data.nextTurn(square.color);\n\t\tif (remaining.length > 2) {\n\t\t\tfor (const pc of attackers) {\n\t\t\t\tif (boardSquares[pc[0]][pc[1]].color === nextTurn) {\n\t\t\t\t\tattackedFromLeft = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst threatened = pieceValue - attackerValue;\n\t\tlet pawnDefends: Coordinate | undefined;\n\t\tfor (const pc of defenders) {\n\t\t\tif (boardSquares[pc[0]][pc[1]].piece === pawnPieceString.piece) {\n\t\t\t\tpawnDefends = pc;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tlet h = 0;\n\t\tconst underDefended = attackers.length - defenders.length > 0;\n\t\tif (underDefended) h = pieceValue;\n\t\tif (underDefended && pawnDefends) h = 0;\n\t\tif (pawnDefends && attackers.length - defenders.length > 1) {\n\t\t\th = getPieceValue(pawnDefends[0], pawnDefends[1]);\n\t\t}\n\t\tif (!h && threatened > 0) h = threatened;\n\t\tif (!h && attackedFromLeft && threatened >= -2) {\n\t\t\th = -threatened;\n\t\t}\n\t\tif (h && canRespondDirectlyToThreat(square.color, attackers)) {\n\t\t\th /= 6;\n\t\t}\n\n\t\thangingCache.set(key, h);\n\t\treturn h;\n\t}\n\n\tfunction getMobilityEval(player: NumericColor): number {\n\t\tconst { pieces, boardSquares, isTeams, royal, defaultSideToMove, board } = boardAccessors;\n\n\t\tlet e = 0;\n\t\tfor (const coordinate of pieces[player]) {\n\t\t\tif (hanging(coordinate[0], coordinate[1]) > 2) continue;\n\t\t\tconst piece = boardSquares[coordinate[0]][coordinate[1]];\n\t\t\tif (!piece.isPiece()) continue;\n\n\t\t\tlet destinations = board.preGeneratedAttacks[player].pieceMovements.get(stringifyCoordinate(coordinate))?.length ?? 0;\n\t\t\tif (/[QDAEHΔ]/.test(piece.piece)) destinations /= isTeams ? 2 : 3;\n\t\t\tif (/[RBV]]/.test(piece.piece)) destinations /= isTeams ? 1.5 : 2;\n\t\t\te += destinations / (isTeams ? 10 : board.gameType.type === VariantType.Solo ? 21 : 16);\n\n\t\t\tlet isRoyal = false;\n\t\t\tfor (const royalPiece of royal) {\n\t\t\t\tif (!royalPiece) continue;\n\t\t\t\tif (royalPiece[0] === coordinate[0] && royalPiece[1] === coordinate[1]) {\n\t\t\t\t\tisRoyal = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!isRoyal && !isTeams && piece.piece === pawnPieceString.piece) {\n\t\t\t\tconst blockedBy = getPieceInFront(coordinate[0], coordinate[1], player);\n\t\t\t\tconst bSqr = boardSquares[blockedBy[0]][blockedBy[1]];\n\t\t\t\tif (bSqr.isEmpty()) continue;\n\n\t\t\t\tif (!bSqr.isPiece()) {\n\t\t\t\t\te -= 2;\n\t\t\t\t} else if (board.gameType.isSameTeam(bSqr.color, defaultSideToMove)) {\n\t\t\t\t\te -= 0.5;\n\t\t\t\t} else if (bSqr.piece === pawnPieceString.piece) {\n\t\t\t\t\te -= 1.8;\n\t\t\t\t} else if (player === bSqr.color) {\n\t\t\t\t\te -= 0.5;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn e;\n\t}\n\n\tfunction getDistFromHill(player: NumericColor): number {\n\t\tconst royalPiece = boardAccessors.royal[player];\n\t\tif (!royalPiece) return 999;\n\t\tconst x = Math.abs(6.5 - royalPiece[0]);\n\t\tconst y = Math.abs(6.5 - royalPiece[1]);\n\t\tconst d = (x + y) / 2 + Math.max(x, y) / 2;\n\t\tif (!d) return 999;\n\t\treturn d;\n\t}\n\n\tfunction getMatesEval(): number {\n\t\tconst { board, variantData, data, pieces, remainingReal } = boardAccessors;\n\t\tboard.data.sideToMove = board.data.previousTurn();\n\t\tconst { checkmates, stalemates, checks } = board.getCheckmatesAndStalemates();\n\t\tboard.data.sideToMove = board.data.nextTurn();\n\t\tlet e = 0;\n\t\tfor (const color of colors) {\n\t\t\tif (checkmates[color]) {\n\t\t\t\te += 500;\n\t\t\t} else if (stalemates[color]) e -= 300;\n\t\t}\n\n\t\tconst checksLength = checks.filter(Boolean).length;\n\t\tif (checksLength === 3) {\n\t\t\te += 10;\n\t\t} else if (checksLength === 2) {\n\t\t\te += 1;\n\t\t} else if (checksLength === 1) {\n\t\t\tconst prev = data.previousTurn();\n\t\t\tif (remainingReal > 2 && checks[prev]) {\n\t\t\t\te += 1.2;\n\t\t\t} else if (remainingReal === 2) {\n\t\t\t\te += 0.1;\n\t\t\t} else {\n\t\t\t\te += 0.4;\n\t\t\t}\n\t\t}\n\n\t\tif (checksLength && variantData.nCheck) {\n\t\t\tfor (const color of colors) {\n\t\t\t\tconst lives = data.fenOptions.tag(\"lives\")[color];\n\t\t\t\tif (lives && checks[color]) e += 4 / (lives + 1);\n\t\t\t}\n\t\t\te += 0.3;\n\t\t}\n\t\tif (variantData.barePieceRule) {\n\t\t\tfor (const color of colors) {\n\t\t\t\tif (pieces[color].length <= 1) e += 300;\n\t\t\t}\n\t\t}\n\n\t\treturn e;\n\t}\n\n\tfunction getMaterialEval(): { myMaterial: number; oppMaterial: number } {\n\t\tconst { board, pieces, isTeams, remainingReal, defaultSideToMove, variantData } = boardAccessors;\n\t\tlet myMaterial = 0,\n\t\t\toppMaterial = 0;\n\n\t\tfor (const color of colors) {\n\t\t\tif (board.gameType.isSameTeam(color, defaultSideToMove)) {\n\t\t\t\tfor (const pc of pieces[color]) {\n\t\t\t\t\tlet pieceValue = getPieceValue(pc[0], pc[1]);\n\t\t\t\t\tpieceValue -= hanging(pc[0], pc[1]);\n\t\t\t\t\tmyMaterial += pieceValue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (const pc of pieces[color]) {\n\t\t\t\t\tlet pcVal = getPieceValue(pc[0], pc[1]);\n\t\t\t\t\tif (!isTeams && remainingReal === 4 && Math.abs(color - defaultSideToMove) === 2 && !variantData.giveaway) {\n\t\t\t\t\t\tpcVal /= board.gameType.type === VariantType.Solo ? 2 : 3;\n\t\t\t\t\t}\n\t\t\t\t\tpcVal -= hanging(pc[0], pc[1], pcVal);\n\t\t\t\t\toppMaterial -= pcVal;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!isTeams && remainingReal === 4) {\n\t\t\toppMaterial /= 1.4;\n\t\t\tmyMaterial *= 1.2;\n\t\t}\n\t\tif (!isTeams && remainingReal === 3) {\n\t\t\toppMaterial /= 1.25;\n\t\t\tmyMaterial *= 1.1;\n\t\t}\n\t\tmyMaterial *= 2;\n\t\toppMaterial *= 2;\n\n\t\treturn { myMaterial, oppMaterial };\n\t}\n\n\tfunction getPinsEval(): { pinnedEval: number; discovsEval: number } {\n\t\tconst { board, royal, pieces, defaultSideToMove, remainingReal } = boardAccessors;\n\n\t\tlet pinnedEval = 0,\n\t\t\tdiscovsEval = 0;\n\t\tfor (const i of colors) {\n\t\t\tconst discovered: Coordinate[] = [];\n\t\t\tconst pins: Coordinate[] = [];\n\n\t\t\tfor (const piece of pieces[i]) {\n\t\t\t\tconst royalPiece = royal[i];\n\t\t\t\tif (!royalPiece) break;\n\t\t\t\tif (royalPiece[0] === piece[0] && royalPiece[1] === piece[1]) continue;\n\t\t\t\tconst [royalX, royalY] = royalPiece;\n\t\t\t\tconst pieceX = piece[0],\n\t\t\t\t\tpieceY = piece[1];\n\n\t\t\t\tfor (const [attackPiece, attackLine] of board.preGeneratedAttacks[i].slidingPiecesRayTracing) {\n\t\t\t\t\tlet isPieceUnderAttack = false,\n\t\t\t\t\t\tisRoyalUnderAttack = false;\n\t\t\t\t\tfor (const [attackedX, attackedY] of attackLine) {\n\t\t\t\t\t\tif (!isPieceUnderAttack && attackedX === pieceX && attackedY === pieceY) isPieceUnderAttack = true;\n\t\t\t\t\t\tif (!isRoyalUnderAttack && attackedX === royalX && attackedY === royalY) isRoyalUnderAttack = true;\n\n\t\t\t\t\t\tif (isPieceUnderAttack && isRoyalUnderAttack) {\n\t\t\t\t\t\t\tpins.push(piece);\n\t\t\t\t\t\t} else if (isRoyalUnderAttack && !isPieceUnderAttack) {\n\t\t\t\t\t\t\tdiscovered.push([attackPiece[0], attackPiece[1]]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const coordinate of pins) {\n\t\t\t\tif (hanging(coordinate[0], coordinate[1]) > 2) continue;\n\t\t\t\tconst pieceValue = Math.sqrt(getPieceValue(coordinate[0], coordinate[1]));\n\t\t\t\tif (!board.gameType.isSameTeam(i, defaultSideToMove)) {\n\t\t\t\t\tpinnedEval += pieceValue / 2;\n\t\t\t\t} else {\n\t\t\t\t\tpinnedEval -= pieceValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const coordinate of discovered) {\n\t\t\t\tif (hanging(coordinate[0], coordinate[1]) > 2) continue;\n\t\t\t\tconst pieceValue = Math.sqrt(getPieceValue(coordinate[0], coordinate[1]));\n\t\t\t\tif (board.gameType.isSameTeam(i, defaultSideToMove)) {\n\t\t\t\t\tdiscovsEval += pieceValue / 2;\n\t\t\t\t} else {\n\t\t\t\t\tdiscovsEval -= pieceValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpinnedEval *= remainingReal / 6;\n\t\tdiscovsEval *= remainingReal / 6;\n\t\tif (discovsEval < 0) discovsEval /= 10;\n\n\t\treturn { pinnedEval, discovsEval };\n\t}\n\n\tfunction getKingSafetyEval(player: NumericColor): { kingEval: number; checkableEval: number; exposedEval: number } {\n\t\tconst { board, royal, boardSquares, remainingReal, data, variantData, defaultSideToMove } = boardAccessors;\n\t\tlet kingEval = 0,\n\t\t\tcheckableEval = 0,\n\t\t\texposedEval = 0;\n\t\tif (variantData.giveaway) return { kingEval, checkableEval, exposedEval };\n\t\tconst baseReferences: Coordinate[][][] = initializeBoardSquares(() => []);\n\n\t\tfor (const [coordinate, attack] of board.preGeneratedAttacks[player].hoppingPieceLines) {\n\t\t\tbaseReferences[attack[0]][attack[1]].push([coordinate[0], coordinate[1]]);\n\t\t}\n\t\tfor (const [coordinate, line] of board.preGeneratedAttacks[player].slidingPiecesLines) {\n\t\t\tfor (const attack of line) {\n\t\t\t\tbaseReferences[attack[0]][attack[1]].push([coordinate[0], coordinate[1]]);\n\t\t\t}\n\t\t}\n\n\t\tconst royalPiece = royal[player];\n\t\tconst squareAccessDefinitions = new Set<string>();\n\t\tif (royalPiece) {\n\t\t\tconst isChecked = Boolean(\n\t\t\t\tboard.preGeneratedAttacks[player].slidingPieces[royalPiece[0]][royalPiece[1]] ||\n\t\t\t\t\tboard.preGeneratedAttacks[player].hoppingPieces[royalPiece[0]][royalPiece[1]]\n\t\t\t);\n\t\t\tfor (let i = 0; i < boardDimension; i++) {\n\t\t\t\tfor (let j = 0; j < boardDimension; j++) {\n\t\t\t\t\tif (isChecked) {\n\t\t\t\t\t\tlet checkableSq = 0;\n\t\t\t\t\t\tif (remainingReal === 2) {\n\t\t\t\t\t\t\tcheckableSq -= 0.8;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst players = baseReferences[i][j].map((coord) => {\n\t\t\t\t\t\t\t\tconst piece = boardSquares[coord[0]][coord[1]];\n\t\t\t\t\t\t\t\tif (!piece.isPiece()) return player;\n\t\t\t\t\t\t\t\treturn piece.color;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tconst prev = data.nextTurn(player);\n\t\t\t\t\t\t\tconst next = data.previousTurn(player);\n\t\t\t\t\t\t\tfor (const player of players) {\n\t\t\t\t\t\t\t\tif (remainingReal === 3) {\n\t\t\t\t\t\t\t\t\tcheckableSq -= player === next ? 3 : 2;\n\t\t\t\t\t\t\t\t} else if (remainingReal === 4) {\n\t\t\t\t\t\t\t\t\tcheckableSq -= player === next ? 5 : player === prev ? 2 : 3;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { defenders } = getCoverage(i, j, player);\n\t\t\t\t\t\tif (defenders.length) checkableSq += 2.5;\n\t\t\t\t\t\tif (checkableSq > 0) checkableSq = 0;\n\n\t\t\t\t\t\tconst accessKey = stringifyKey(i, j);\n\t\t\t\t\t\tif (!squareAccessDefinitions.has(accessKey)) {\n\t\t\t\t\t\t\texposedEval -= 0.123;\n\t\t\t\t\t\t\tsquareAccessDefinitions.add(accessKey);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcheckableEval += checkableSq;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst ki = royalPiece[0],\n\t\t\t\tkj = royalPiece[1];\n\t\t\tfor (let d = 1; d < 3; d++) {\n\t\t\t\tconst x = [ki, ki + d, ki - d];\n\t\t\t\tconst y = [kj, kj + d, kj - d];\n\t\t\t\tfor (const i of x) {\n\t\t\t\t\tfor (const j of y) {\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\t\t\t\t\t\tif (!boardSquares[i]?.[j]) continue;\n\t\t\t\t\t\tif (i === ki && j === kj) continue;\n\t\t\t\t\t\tconst pieceString = boardSquares[i][j];\n\t\t\t\t\t\tif (!pieceString.isPiece()) continue;\n\t\t\t\t\t\tif (board.gameType.isSameTeam(pieceString.color, player)) {\n\t\t\t\t\t\t\tkingEval += pieceString.piece === pawnPieceString.piece ? 2 : 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tkingEval -= getPieceValue(i, j);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let k = -1; k < 2; k++) {\n\t\t\t\tfor (let h = -1; h < 2; h++) {\n\t\t\t\t\tconst i = ki + k;\n\t\t\t\t\tconst j = kj + h;\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\t\t\t\t\tif (!boardSquares[i]?.[j]) continue;\n\t\t\t\t\tconst { attackers, defenders } = getCoverage(i, j, player);\n\t\t\t\t\tkingEval -= 2 * attackers.length;\n\t\t\t\t\tkingEval += 1 * defenders.length;\n\t\t\t\t}\n\t\t\t}\n\t\t\tkingEval /= 10;\n\t\t}\n\n\t\tif (variantData.nCheck && !board.gameType.isSameTeam(board.data.sideToMove, defaultSideToMove)) {\n\t\t\tconst lives = data.fenOptions.tag(\"lives\")[board.data.sideToMove];\n\t\t\tswitch (lives) {\n\t\t\t\tcase null:\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tcheckableEval *= 1.5;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tcheckableEval *= 3;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcheckableEval *= 1.3;\n\t\t\t}\n\t\t}\n\n\t\treturn { kingEval, checkableEval, exposedEval };\n\t}\n\n\tfunction isZombieEatZombie(move: MoveComponent): boolean {\n\t\tif (!verifyStandardMove(move)) return false;\n\t\tconst { data, defaultSideToMove, boardSquares, variantData } = boardAccessors;\n\t\tif (variantData.giveaway) return false;\n\t\tconst resigned = data.fenOptions.tag(\"resigned\");\n\n\t\tif (!resigned[defaultSideToMove]) return false;\n\t\tconst targetPiece = boardSquares[move.endCoordinates[0]][move.endCoordinates[1]];\n\t\tif (!targetPiece.isPiece()) return false;\n\t\tif (resigned[targetPiece.color]) return true;\n\t\treturn false;\n\t}\n\n\tfunction getEval(move: MoveComponent): number {\n\t\tlet totalEval = 0;\n\t\tconst { board, data, defaultSideToMove, variantData, royal, isTeams } = boardAccessors;\n\t\tconst snapshot = board.createSnapshot();\n\n\t\tconst isKingsideCastle = data.fenOptions.isKingsideCastlingAvailable(data.sideToMove, board),\n\t\t\tisQueensideCastle = data.fenOptions.isQueensideCastlingAvailable(data.sideToMove, board);\n\t\tboard.makeMove([move], true);\n\t\tboard.pregenerateAttacks();\n\t\tboardAccessors = { ...boardAccessors, ...augmentBoardAccessorsFromBoard(board) };\n\t\tinspectCoverage();\n\n\t\tconst { myMaterial, oppMaterial } = getMaterialEval();\n\t\tconst hillEval = variantData.kingOfTheHill ? 416 / (3 * getDistFromHill(defaultSideToMove)) : 0;\n\n\t\tif (variantData.giveaway) {\n\t\t\ttotalEval = -3 * myMaterial - oppMaterial - getCoordinationEval(defaultSideToMove) * 10 + hillEval;\n\t\t} else {\n\t\t\ttotalEval += getMatesEval();\n\n\t\t\tconst royalPiece = royal[defaultSideToMove];\n\t\t\tif (royalPiece) {\n\t\t\t\tconst { attackers } = getCoverage(royalPiece[0], royalPiece[1], defaultSideToMove);\n\t\t\t\tif (attackers.length) totalEval -= 700;\n\t\t\t}\n\n\t\t\ttotalEval += getMobilityEval(defaultSideToMove);\n\t\t\ttotalEval += getCoordinationEval(defaultSideToMove);\n\n\t\t\tif (isTeams) {\n\t\t\t\tconst partner = colors.find((v) => v !== defaultSideToMove && board.gameType.isSameTeam(defaultSideToMove, v));\n\t\t\t\tif (partner) Object.values(getKingSafetyEval(partner)).forEach((v) => (totalEval += v));\n\t\t\t}\n\n\t\t\tObject.values(getPinsEval()).forEach((v) => (totalEval += v));\n\t\t\tObject.values(getKingSafetyEval(defaultSideToMove)).forEach((v) => (totalEval += v));\n\t\t\ttotalEval += myMaterial + oppMaterial + hillEval;\n\t\t}\n\n\t\tconst isCastling =\n\t\t\t\"specialType\" in move && (move.specialType === SpecialMove.CastlingKingside || move.specialType === SpecialMove.CastlingQueenside);\n\t\tif (!isCastling && (isKingsideCastle || isQueensideCastle)) totalEval -= 0.5;\n\t\tif (isZombieEatZombie(move)) {\n\t\t\ttotalEval -= 10000;\n\t\t}\n\t\tswitch (board.moves.getHash(board.moves.constructPreliminaryHashString(board))) {\n\t\t\tcase 1:\n\t\t\t\ttotalEval -= 10000;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\ttotalEval -= 20000;\n\t\t\t\tbreak;\n\t\t}\n\t\tif (variantData.fiftyMoveRule && variantData.fiftyMoveRule - board.data.plyCount < 8) totalEval -= 150000;\n\n\t\tboard.loadSnapshot(snapshot);\n\t\treturn totalEval;\n\t}\n\n\treturn {\n\t\tstringifiedType: ZombieType.Futer,\n\t\tevaluate(moves, board): Map<MoveComponent, number> {\n\t\t\tinitializeBoardAccessorsFromBoard(board.createClone());\n\n\t\t\tconst moveValues = new Map<MoveComponent, number>();\n\t\t\tfor (const move of moves) {\n\t\t\t\tif (verifyInternalMove(move)) {\n\t\t\t\t\tswitch (move.type) {\n\t\t\t\t\t\tcase InternalMoveSignature.Resign:\n\t\t\t\t\t\tcase InternalMoveSignature.Timeout:\n\t\t\t\t\t\t\tmoveValues.set(move, -Infinity);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase InternalMoveSignature.ClaimWin:\n\t\t\t\t\t\t\tmoveValues.set(move, Infinity);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else moveValues.set(move, getEval(move));\n\t\t\t}\n\n\t\t\treturn moveValues;\n\t\t},\n\t\tpickPreferredMove(evaluations: Map<MoveComponent, number>) {\n\t\t\tconst sorted = [...evaluations.entries()].sort((a, b) => b[1] - a[1]);\n\t\t\tconst best: MoveComponent[] = [];\n\n\t\t\tfor (const [move, evaluated] of sorted) {\n\t\t\t\tif (sorted[0][1] - evaluated > 0.5) break;\n\t\t\t\tbest.push(move);\n\t\t\t}\n\n\t\t\tif (best.length > 5) best.length = 5;\n\t\t\tlet pick = Math.floor(Math.random() * best.length);\n\t\t\tif (pick > 0 && Math.random() > 0.8) pick = 0;\n\t\t\tif (pick > 1 && Math.random() > 0.8) pick = 1;\n\t\t\tif (pick > 2 && Math.random() > 0.8) pick = 2;\n\t\t\treturn randomlyPickNextChainedMoves(best[pick]);\n\t\t}\n\t};\n}\nexport const comfuterAlgorithm = createBotAlgorithm(createComfuterAlgorithm());\n","import { MoveComponent, verifyStandardMove, SpecialMove, verifyInternalMove } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { createBotAlgorithm, ZombieMoveGenerationAlgorithm, ZombieType } from \"../BotInterface\";\nimport { comfuterAlgorithm } from \"./ComfuterEvaluation\";\n\nexport const createComfuterBasedAlgorithm = (\n\talgorithm: Omit<ZombieMoveGenerationAlgorithm, \"pickPreferredMove\">\n): ZombieMoveGenerationAlgorithm => ({\n\t...algorithm,\n\tpickPreferredMove(...args) {\n\t\treturn comfuterAlgorithm.pickPreferredMove.apply(this, args);\n\t}\n});\n\nexport const comfuterCheckerAlgorithm = createBotAlgorithm(\n\tcreateComfuterBasedAlgorithm({\n\t\tstringifiedType: ZombieType.F_Checker,\n\t\tevaluate(moves, board): Map<MoveComponent, number> {\n\t\t\tconst baseEvaluations = comfuterAlgorithm.evaluate.call(this, moves, board);\n\n\t\t\tfor (const [move, evaluation] of baseEvaluations) {\n\t\t\t\tif (verifyInternalMove(move)) continue;\n\t\t\t\tconst snapshot = board.createSnapshot();\n\t\t\t\tconst { checks, checkmates } = board.makeMove([move]);\n\t\t\t\tconst checksLength = checks.filter(Boolean).length;\n\t\t\t\tbaseEvaluations.set(move, evaluation + (checkmates.includes(true) ? checksLength * 500 : checksLength * 1500));\n\t\t\t\tboard.moves.deleteMove(board.moves.currentMove);\n\t\t\t\tboard.loadSnapshot(snapshot);\n\t\t\t}\n\n\t\t\treturn baseEvaluations;\n\t\t}\n\t})\n);\n\nexport const comfuterMuncherAlgorithm = createBotAlgorithm(\n\tcreateComfuterBasedAlgorithm({\n\t\tstringifiedType: ZombieType.F_Muncher,\n\t\tevaluate(moves, board): Map<MoveComponent, number> {\n\t\t\tconst baseEvaluations = comfuterAlgorithm.evaluate.call(this, moves, board);\n\n\t\t\tfor (const [move, evaluation] of baseEvaluations) {\n\t\t\t\tif (!verifyStandardMove(move)) continue;\n\t\t\t\tif (move.specialType === SpecialMove.EnPassant || board.board[move.endCoordinates[0]][move.endCoordinates[1]].isEmpty())\n\t\t\t\t\tcontinue;\n\n\t\t\t\tbaseEvaluations.set(move, evaluation + 5000);\n\t\t\t}\n\n\t\t\treturn baseEvaluations;\n\t\t}\n\t})\n);\n\nexport const comfuterPusherAlgorithm = createBotAlgorithm(\n\tcreateComfuterBasedAlgorithm({\n\t\tstringifiedType: ZombieType.F_Pusher,\n\t\tevaluate(moves, board): Map<MoveComponent, number> {\n\t\t\tconst baseEvaluations = comfuterAlgorithm.evaluate.call(this, moves, board);\n\n\t\t\tfor (const [move, evaluation] of baseEvaluations) {\n\t\t\t\tif (!verifyStandardMove(move)) continue;\n\t\t\t\tconst pieceString = board.board[move.startCoordinates[0]][move.startCoordinates[1]];\n\t\t\t\tif (pieceString.isPiece() && !pieceControlConfigSettings[pieceString.piece].moveGenerationSettings.isPawn) {\n\t\t\t\t\tbaseEvaluations.set(move, evaluation + 5000);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn baseEvaluations;\n\t\t}\n\t})\n);\n\nexport const patzerAlgorithm = createBotAlgorithm(\n\tcreateComfuterBasedAlgorithm({\n\t\tstringifiedType: ZombieType.Patzer,\n\t\tevaluate(moves, defaultBoard): Map<MoveComponent, number> {\n\t\t\tconst baseEvaluations = comfuterAlgorithm.evaluate.call(this, moves, defaultBoard);\n\t\t\tfor (const [move, evaluation] of baseEvaluations) {\n\t\t\t\tbaseEvaluations.set(move, -evaluation);\n\t\t\t}\n\n\t\t\treturn baseEvaluations;\n\t\t}\n\t})\n);\n","import { createBotAlgorithm, ZombieType } from \"../BotInterface\";\nimport { comfuterAlgorithm } from \"./ComfuterEvaluation\";\nimport { createComfuterBasedAlgorithm } from \"./ComfuterEvaluationExtensions\";\nimport { randoBotAlgorithm } from \"./RandomEvaluation\";\n\nexport const RanterAlgorithm = createBotAlgorithm(\n\tcreateComfuterBasedAlgorithm({\n\t\tstringifiedType: ZombieType.Ranter,\n\t\tevaluate(...args) {\n\t\t\tif (Math.random() < 0.5) {\n\t\t\t\treturn randoBotAlgorithm.evaluate.apply(this, args);\n\t\t\t} else return comfuterAlgorithm.evaluate.apply(this, args);\n\t\t}\n\t})\n);\n","import { Move, MoveComponent, verifyRequiredMove, verifyStandardMove } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport { createBotAlgorithm, ZombieType } from \"../BotInterface\";\n\nexport function randomlyPickNextChainedMoves(move: MoveComponent, resultingMove: MoveComponent[] = []): Move {\n\tconst newMove = [...resultingMove, move];\n\tif (move.nextChainedMoves && !move.isForcedContinuation && Math.random() > 0.5) {\n\t\treturn randomlyPickNextChainedMoves(move.nextChainedMoves[Math.floor(Math.random() * move.nextChainedMoves.length)], newMove);\n\t} else {\n\t\tif (!verifyRequiredMove(newMove)) throw new Error(\"Required move length is 0\");\n\t\treturn newMove;\n\t}\n}\n\nexport const randoBotAlgorithm = createBotAlgorithm({\n\tstringifiedType: ZombieType.Rando,\n\tevaluate(moves, board): Map<MoveComponent, number> {\n\t\tconst copyOfMoves = moves.slice();\n\t\tfor (let i = moves.length - 1; i > 0; i--) {\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t[copyOfMoves[i], copyOfMoves[j]] = [moves[j], moves[i]];\n\t\t}\n\n\t\tconst data = board.data,\n\t\t\tboardSquares = board.board;\n\n\t\tconst zombieEatZombieMoves: typeof moves = [];\n\t\tconst otherMoves: typeof moves = [];\n\t\tfor (const move of copyOfMoves) {\n\t\t\tif (verifyStandardMove(move)) {\n\t\t\t\tconst targetPiece = boardSquares[move.endCoordinates[1]][move.endCoordinates[0]];\n\t\t\t\tif (targetPiece.isPiece() && data.fenOptions.tag(\"resigned\")[targetPiece.color]) {\n\t\t\t\t\tzombieEatZombieMoves.push(move);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\totherMoves.push(move);\n\t\t}\n\n\t\tlet startingEvaluation = 0;\n\t\treturn new Map([\n\t\t\t...otherMoves.reduce<Array<[MoveComponent, number]>>((p, n) => (p.push([n, --startingEvaluation]), p), []),\n\t\t\t...zombieEatZombieMoves.reduce<Array<[MoveComponent, number]>>((p, n) => (p.push([n, --startingEvaluation / 2]), p), [])\n\t\t]);\n\t},\n\tpickPreferredMove(evaluations: Map<MoveComponent, number>): Move {\n\t\treturn randomlyPickNextChainedMoves([...evaluations.entries()].reduce((p, n) => (n[1] > p[1] ? n : p))[0]);\n\t}\n});\n","import { MoveComponent, verifyStandardMove, SpecialMove } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { createBotAlgorithm, ZombieMoveGenerationAlgorithm, ZombieType } from \"../BotInterface\";\nimport { randoBotAlgorithm } from \"./RandomEvaluation\";\n\nexport const createRandomBasedAlgorithm = (\n\talgorithm: Omit<ZombieMoveGenerationAlgorithm, \"pickPreferredMove\">\n): ZombieMoveGenerationAlgorithm => ({\n\t...algorithm,\n\tpickPreferredMove(...args) {\n\t\treturn randoBotAlgorithm.pickPreferredMove.apply(this, args);\n\t}\n});\n\nexport const checkerAlgorithm = createBotAlgorithm(\n\tcreateRandomBasedAlgorithm({\n\t\tstringifiedType: ZombieType.Checker,\n\t\tevaluate(moves, board): Map<MoveComponent, number> {\n\t\t\tconst baseEvaluations = randoBotAlgorithm.evaluate.call(this, moves, board);\n\n\t\t\tfor (const [move, evaluation] of baseEvaluations) {\n\t\t\t\tconst snapshot = board.createSnapshot();\n\t\t\t\tconst { checks, checkmates } = board.makeMove([move]);\n\t\t\t\tif (checks.filter((c, i) => c && !checkmates[i] === c).length === 0) {\n\t\t\t\t\tbaseEvaluations.set(move, evaluation / (evaluation / 2));\n\t\t\t\t}\n\t\t\t\tboard.loadSnapshot(snapshot);\n\t\t\t}\n\n\t\t\treturn baseEvaluations;\n\t\t}\n\t})\n);\n\nexport const muncherAlgorithm = createBotAlgorithm(\n\tcreateRandomBasedAlgorithm({\n\t\tstringifiedType: ZombieType.Muncher,\n\t\tevaluate(moves, board): Map<MoveComponent, number> {\n\t\t\tconst baseEvaluations = randoBotAlgorithm.evaluate.call(this, moves, board);\n\n\t\t\tfor (const [move, evaluation] of baseEvaluations) {\n\t\t\t\tif (!verifyStandardMove(move)) continue;\n\t\t\t\tif (move.specialType === SpecialMove.EnPassant || board.board[move.endCoordinates[0]][move.endCoordinates[1]].isEmpty())\n\t\t\t\t\tcontinue;\n\n\t\t\t\tbaseEvaluations.set(move, evaluation / (evaluation / 2));\n\t\t\t}\n\n\t\t\treturn baseEvaluations;\n\t\t}\n\t})\n);\n\nexport const pusherAlgorithm = createBotAlgorithm(\n\tcreateRandomBasedAlgorithm({\n\t\tstringifiedType: ZombieType.Pusher,\n\t\tevaluate(moves, board): Map<MoveComponent, number> {\n\t\t\tconst baseEvaluations = randoBotAlgorithm.evaluate.call(this, moves, board);\n\n\t\t\tfor (const [move, evaluation] of baseEvaluations) {\n\t\t\t\tif (!verifyStandardMove(move)) continue;\n\t\t\t\tconst pieceString = board.board[move.startCoordinates[0]][move.startCoordinates[1]];\n\t\t\t\tif (pieceString.isPiece() && !pieceControlConfigSettings[pieceString.piece].moveGenerationSettings.isPawn) {\n\t\t\t\t\tbaseEvaluations.set(move, evaluation / (evaluation / 2));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn baseEvaluations;\n\t\t}\n\t})\n);\n","import { Board } from \"@moveGeneration/Board/Board\";\nimport { Move, MoveComponent } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\n\nexport enum ZombieType {\n\tRando = \"rando\",\n\tFuter = \"comfuter\",\n\tRanter = \"ranter\",\n\tPatzer = \"patzer\",\n\tPusher = \"pusher\",\n\tChecker = \"checker\",\n\tMuncher = \"muncher\",\n\tF_Pusher = \"pusher_comfuter\",\n\tF_Checker = \"checker_comfuter\",\n\tF_Muncher = \"muncher_comfuter\"\n}\n\nexport const verifyZombieType = (zombieType: string): zombieType is ZombieType => zombieType in ZombieType;\n\nexport interface ZombieMoveGenerationAlgorithm {\n\treadonly stringifiedType: ZombieType;\n\tevaluate(moves: MoveComponent[], board: Board): Map<MoveComponent, number>;\n\tpickPreferredMove(evaluations: Map<MoveComponent, number>): Move;\n}\n\nexport const botAlgorithms = new Map<ZombieType, ZombieMoveGenerationAlgorithm>();\n\nexport function createBotAlgorithm(algorithm: ZombieMoveGenerationAlgorithm) {\n\tbotAlgorithms.set(algorithm.stringifiedType, algorithm);\n\treturn algorithm;\n}\n","import { Board } from \"@moveGeneration/Board/Board\";\nimport { InsufficientMaterialConstructor, InsufficientMaterialState } from \"./InsufficientMaterialConstructor\";\nimport { Tuple, assertNonUndefined, createTuple, createTupleFromCallback } from \"@client/ts/baseTypes\";\nimport { colors, totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport { Coordinate, NumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { stalemateOptionsValues } from \"../../FENDataDecorators/StalemateOptions\";\nimport { pieceControlConfigSettings, verifyPieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { disabledRank } from \"../../PieceControlDecorators/PromotionRank\";\nimport { compareCoordinates } from \"@moveGeneration/Board/BoardInterface\";\n\nexport class InsufficientMaterialChecker {\n\tprivate readonly noRoyalsToMate: boolean = false;\n\tprivate readonly isDisabled: boolean = false;\n\tprivate readonly promotionPieces;\n\tprivate readonly hasPromotion;\n\n\tconstructor(readonly state: InsufficientMaterialState, board: Board) {\n\t\tfor (const variantRule of board.variantRules) {\n\t\t\tconst { isDisabled, isPartiallyDisabled } = variantRule.getInsufficientMaterialData();\n\t\t\tif (isDisabled) {\n\t\t\t\tthis.isDisabled = true;\n\t\t\t\tbreak;\n\t\t\t} else if (isPartiallyDisabled) this.noRoyalsToMate = true;\n\t\t}\n\t\tthis.hasPromotion = board.variantData.promotionRank !== disabledRank;\n\t\tthis.promotionPieces = board.variantData.promotionPieces || [];\n\t}\n\n\tprivate getRoyalPieceMedians(board: Board) {\n\t\tconst { walls, royalMoveMedians } = this.state,\n\t\t\troyal = board.data.fenOptions.tag(\"royal\"),\n\t\t\tvariantData = board.variantData,\n\t\t\tboardSquares = board.board;\n\t\tconst extraWalls = boardSquares.reduce((accumulator, row, i) => {\n\t\t\treturn (\n\t\t\t\taccumulator +\n\t\t\t\trow.reduce((accumulator, square, j) => {\n\t\t\t\t\tif (square.isWall() && !walls[i][j]) {\n\t\t\t\t\t\treturn accumulator + 1;\n\t\t\t\t\t} else return accumulator;\n\t\t\t\t}, 0)\n\t\t\t);\n\t\t}, 0);\n\n\t\treturn royalMoveMedians.map((median, i) => {\n\t\t\tif (!royal[i]) return;\n\n\t\t\tlet minimumMedian: number;\n\t\t\tif (variantData.stalemateOptions === stalemateOptionsValues.stalemateLoses) {\n\t\t\t\tminimumMedian = 1;\n\t\t\t\tmedian--;\n\t\t\t} else {\n\t\t\t\tmedian++;\n\t\t\t\tminimumMedian = 2;\n\t\t\t}\n\n\t\t\tmedian -= extraWalls;\n\t\t\tif (median < minimumMedian) median = minimumMedian;\n\n\t\t\treturn median;\n\t\t});\n\t}\n\n\tprivate obtainPieceSymbolFromCoordinate(board: Board, coordinate: Coordinate) {\n\t\tconst { optimizedPieces, pieceSquareMedians, backwardsPieceRegistry } = this.state;\n\t\tconst piece = board.board[coordinate[0]][coordinate[1]];\n\t\tif (pieceControlConfigSettings[piece.piece].moveGenerationSettings.isPawn && this.hasPromotion) {\n\t\t\tconst availableSymbols = [...optimizedPieces]\n\t\t\t\t.filter((p) => verifyPieceLetter(p) && !pieceControlConfigSettings[p].moveGenerationSettings.isPawn)\n\t\t\t\t.map((p) => pieceSquareMedians[p]);\n\t\t\tif (availableSymbols.length === 0) {\n\t\t\t\treturn { selectedSymbol: InsufficientMaterialConstructor.NON_INDEXED_PIECE_SYMBOL, piece };\n\t\t\t} else {\n\t\t\t\tconst candidates = availableSymbols.map((s) => {\n\t\t\t\t\treturn s[Object.getOwnPropertySymbols(s)[0]].reduce<number>((p, n) => p + (n ?? 0), 0);\n\t\t\t\t});\n\t\t\t\tconst candidateIndex = candidates.indexOf(Math.max(...candidates));\n\t\t\t\tconst symbol = Object.getOwnPropertySymbols(availableSymbols[candidateIndex])[0];\n\t\t\t\treturn {\n\t\t\t\t\tselectedSymbol: symbol,\n\t\t\t\t\tpiece\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tconst availableSymbols = Object.getOwnPropertySymbols(pieceSquareMedians[piece.piece]);\n\t\t\tconst selectedSymbol =\n\t\t\t\tavailableSymbols.length === 1 ? availableSymbols[0] : backwardsPieceRegistry[piece.piece][coordinate[0]][coordinate[1]];\n\t\t\tassertNonUndefined(selectedSymbol);\n\n\t\t\treturn { selectedSymbol, piece };\n\t\t}\n\t}\n\n\tprivate getPartialIntersection(parameters: {\n\t\tboard: Board;\n\t\tarmy: Coordinate[];\n\t\tpieces: Tuple<Coordinate[], typeof totalPlayers>;\n\t\troyalColor: NumericColor;\n\t}) {\n\t\tconst { pieceSquareMedians } = this.state,\n\t\t\t{ board, army, pieces, royalColor } = parameters;\n\t\tfor (const coordinate of army) {\n\t\t\tconst { piece, selectedSymbol } = this.obtainPieceSymbolFromCoordinate(board, coordinate);\n\t\t\tconst symbolsLength = Object.getOwnPropertySymbols(pieceSquareMedians[piece.piece]).length;\n\t\t\tif (symbolsLength > 1 || pieceControlConfigSettings[piece.piece].moveGenerationSettings.isColorBound) {\n\t\t\t\tfor (const enemyCoordinate of pieces[royalColor]) {\n\t\t\t\t\tconst { selectedSymbol: enemySymbol } = this.obtainPieceSymbolFromCoordinate(board, enemyCoordinate);\n\t\t\t\t\tif (selectedSymbol === enemySymbol) return Infinity;\n\t\t\t\t}\n\t\t\t} else return Infinity;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tcheckCurrentState(board: Board) {\n\t\tconst fenOptions = board.data.fenOptions;\n\t\tconst dead = fenOptions.tag(\"dead\"),\n\t\t\troyal = fenOptions.tag(\"royal\");\n\t\tconst pieces = board.getPlayerPieces(),\n\t\t\tresultingInsufficientPieces = createTuple(false, totalPlayers);\n\t\tif (this.isDisabled) return resultingInsufficientPieces;\n\n\t\tconst royalPieceMedians = this.getRoyalPieceMedians(board),\n\t\t\t{ oppositionMedians, pieceSquareMedians } = this.state;\n\t\tconst squaresPlayerCanOutrange = createTupleFromCallback(() => createTuple(0, totalPlayers), totalPlayers);\n\t\tfor (const color of colors) {\n\t\t\tconst army = pieces[color];\n\t\t\tif (dead[color]) continue;\n\t\t\tfor (const royalColor of colors) {\n\t\t\t\tif (color === royalColor || dead[royalColor]) continue;\n\t\t\t\tif (!royal[royalColor] || this.noRoyalsToMate) {\n\t\t\t\t\tsquaresPlayerCanOutrange[royalColor][color] = this.getPartialIntersection({ board, army, pieces, royalColor });\n\t\t\t\t} else {\n\t\t\t\t\tconst royalSquares = royalPieceMedians[royalColor];\n\t\t\t\t\tif (royalSquares === undefined) continue;\n\t\t\t\t\tconst fenRoyal = royal[color],\n\t\t\t\t\t\tcurrentColorBounds: symbol[] = [];\n\t\t\t\t\tfor (const coordinate of army) {\n\t\t\t\t\t\tif (fenRoyal && compareCoordinates(coordinate, fenRoyal)) {\n\t\t\t\t\t\t\tif (board.variantData.royalsCannotCapture) {\n\t\t\t\t\t\t\t\tsquaresPlayerCanOutrange[color][royalColor]++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsquaresPlayerCanOutrange[color][royalColor] += oppositionMedians[color][royalColor];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst { piece, selectedSymbol } = this.obtainPieceSymbolFromCoordinate(board, coordinate);\n\t\t\t\t\t\t\tif (this.hasPromotion && pieceControlConfigSettings[piece.piece].moveGenerationSettings.isPawn) {\n\t\t\t\t\t\t\t\tconst medians = this.promotionPieces.map((piece) => {\n\t\t\t\t\t\t\t\t\tconst subSymbol = Object.getOwnPropertySymbols(pieceSquareMedians[piece])[0];\n\t\t\t\t\t\t\t\t\treturn pieceSquareMedians[piece][subSymbol][royalColor] ?? 0;\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tsquaresPlayerCanOutrange[color][royalColor] += Math.max(...medians);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (pieceControlConfigSettings[piece.piece].moveGenerationSettings.isColorBound) {\n\t\t\t\t\t\t\t\t\tif (currentColorBounds.includes(selectedSymbol)) continue;\n\t\t\t\t\t\t\t\t\tcurrentColorBounds.push(selectedSymbol);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsquaresPlayerCanOutrange[color][royalColor] += pieceSquareMedians[piece.piece][selectedSymbol][royalColor] ?? 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tsquaresPlayerCanOutrange[color][royalColor] += pieces[royalColor].length - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const color of colors) {\n\t\t\tif (dead[color]) continue;\n\t\t\tlet sum = 0;\n\t\t\tfor (let i = 0; i < totalPlayers; i++) {\n\t\t\t\tif (i === color) continue;\n\t\t\t\tsum += squaresPlayerCanOutrange[i][color];\n\t\t\t}\n\n\t\t\tconst royal = royalPieceMedians[color];\n\t\t\tif ((royal !== undefined && sum <= royal) || sum < 0) resultingInsufficientPieces[color] = true;\n\t\t}\n\t\treturn resultingInsufficientPieces;\n\t}\n}\n","import { Tuple, createTuple, createTupleFromCallback } from \"@client/ts/baseTypes\";\nimport { BoardSquares, initializeBoardSquares } from \"@client/ts/logic/BaseInterfaces\";\nimport { Board, baseImmunes } from \"@moveGeneration/Board/Board\";\nimport { boardDimension, colors, totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport { PieceString, createPieceFromData, emptyPieceString } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport {\n\tPieceLetter,\n\tdefaultPieces,\n\tgrasshopperPieceLetter,\n\tpieceControlConfigSettings,\n\tverifyPieceLetter\n} from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { binaryMasks, findMinimumOnBoardSquares, oneBitMask, optimizePieceSet } from \"./Utilities\";\nimport { disabledRank } from \"../../PieceControlDecorators/PromotionRank\";\nimport { stringifyCoordinate } from \"@moveGeneration/Board/BoardInterface\";\nimport { bitCount } from \"@utils/NumberUtils\";\nimport { PieceMedianCounterReturnType } from \"./PieceMedianCounter\";\n\nexport interface InsufficientMaterialState {\n\treadonly walls: BoardSquares<boolean>;\n\treadonly backwardsPieceRegistry: Record<PieceLetter, BoardSquares<symbol | null>>;\n\treadonly pieceSquareMedians: Record<PieceLetter, Record<symbol, Tuple<number | undefined, typeof totalPlayers>>>;\n\treadonly royalMoveMedians: Tuple<number, typeof totalPlayers>;\n\treadonly optimizedPieces: Set<PieceLetter>;\n\toppositionMedians: Tuple<Tuple<number, typeof totalPlayers>, typeof totalPlayers>;\n}\n\nexport class InsufficientMaterialConstructor {\n\tstatic readonly NON_INDEXED_PIECE_SYMBOL = Symbol();\n\tprivate readonly board: Board;\n\tprivate readonly emptyBoard: BoardSquares<PieceString>;\n\tprivate readonly pieceMoveRegistry: Record<PieceLetter, Record<symbol, BoardSquares<Uint16Array>>> = {};\n\tprivate readonly possibleRoyals = createTupleFromCallback<string[], typeof totalPlayers>(() => [], totalPlayers);\n\tprivate readonly boardDestinations = new Map<PieceLetter, Uint16Array[]>();\n\tprivate readonly royalPieceSets = createTupleFromCallback(() => new Set<string>(), totalPlayers);\n\treadonly state: InsufficientMaterialState;\n\n\tconstructor(board: Board, readonly callback: (state: InsufficientMaterialState) => void) {\n\t\tthis.board = board.createClone();\n\t\tthis.emptyBoard = this.board.board.map((row) => row.map((square) => (square.isWall() ? square : emptyPieceString)));\n\t\tthis.state = {\n\t\t\twalls: this.emptyBoard.map((row) => row.map((square) => square.isWall())),\n\t\t\tbackwardsPieceRegistry: {},\n\t\t\troyalMoveMedians: createTuple(0, totalPlayers),\n\t\t\tpieceSquareMedians: {\n\t\t\t\t[grasshopperPieceLetter]: {\n\t\t\t\t\t[InsufficientMaterialConstructor.NON_INDEXED_PIECE_SYMBOL]: [2, 2, 2, 2]\n\t\t\t\t}\n\t\t\t},\n\t\t\toptimizedPieces: optimizePieceSet(this.board.variantData.promotionPieces || [], true),\n\t\t\toppositionMedians: createTupleFromCallback(() => createTuple(0, totalPlayers), totalPlayers)\n\t\t};\n\t}\n\n\tprivate initializeRoyals() {\n\t\tconst boardSquares = this.board.board,\n\t\t\tpromotionPieces = this.board.variantData.promotionPieces || [];\n\t\tthis.board.data.fenOptions.tag(\"royal\").forEach((royal, color) => {\n\t\t\tif (royal) {\n\t\t\t\tconst piece = boardSquares[royal[0]][royal[1]].piece;\n\t\t\t\tif (pieceControlConfigSettings[piece].moveGenerationSettings.isPawn) {\n\t\t\t\t\tthis.possibleRoyals[color] = [piece, ...promotionPieces];\n\t\t\t\t} else this.possibleRoyals[color] = [piece];\n\t\t\t} else if (promotionPieces.includes(defaultPieces.king)) {\n\t\t\t\tthis.possibleRoyals[color] = [defaultPieces.king];\n\t\t\t}\n\t\t});\n\n\t\tfor (const color of colors) {\n\t\t\tif (this.possibleRoyals[color].length > 1) {\n\t\t\t\tthis.royalPieceSets[color] = optimizePieceSet(this.possibleRoyals[color], false);\n\t\t\t} else if (this.possibleRoyals[color].length === 1) {\n\t\t\t\tthis.royalPieceSets[color].add(this.possibleRoyals[color][0]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate recurseThroughSquares(i: number, j: number, piece: PieceString) {\n\t\tconst {\n\t\t\temptyBoard,\n\t\t\tboard: { controls },\n\t\t\tpieceMoveRegistry\n\t\t} = this;\n\t\tconst currentSquares = new Set<string>(),\n\t\t\tunvisitedSquares = new Set<string>();\n\t\tif (!piece.isPiece()) throw new TypeError(`Wrong piece signature detected at ${piece.value}`);\n\t\tconst baseBuilder = controls[piece.piece]().setColor(piece.color).setBoard(emptyBoard).setBaseImmunePieces(baseImmunes);\n\t\tconst registryResult = initializeBoardSquares(() => new Uint16Array(boardDimension).fill(oneBitMask));\n\n\t\tfunction recurse(x: number, y: number) {\n\t\t\tconst control = baseBuilder.setCoordinates(x, y).constructPieceControl();\n\t\t\tconst moves = control.getPseudoLegalMoves(),\n\t\t\t\tmoveLength = moves.length;\n\t\t\tif (moveLength === 0) return;\n\n\t\t\tfor (let i = 0; i < moveLength; i++) {\n\t\t\t\tconst move = moves[i].move;\n\t\t\t\tconst moveString = stringifyCoordinate(move);\n\t\t\t\tregistryResult[x][y][move[0]] |= binaryMasks[move[1]];\n\t\t\t\tif (!currentSquares.has(moveString)) {\n\t\t\t\t\tunvisitedSquares.add(moveString);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const value of unvisitedSquares) {\n\t\t\t\tconst [x, y] = value.split(\":\");\n\t\t\t\tif (!currentSquares.has(value)) {\n\t\t\t\t\tcurrentSquares.add(value);\n\t\t\t\t\trecurse(parseInt(x, 10), parseInt(y, 10));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trecurse(i, j);\n\t\tif (!(piece.piece in pieceMoveRegistry)) pieceMoveRegistry[piece.piece] = {};\n\t\tpieceMoveRegistry[piece.piece][Symbol()] = registryResult;\n\n\t\tconst permutations = new Uint16Array(14).fill(oneBitMask);\n\t\tcurrentSquares.forEach((value) => {\n\t\t\tconst valueArr = value.split(\":\");\n\t\t\tpermutations[parseInt(valueArr[0], 10)] |= binaryMasks[parseInt(valueArr[1], 10)];\n\t\t});\n\t\tunvisitedSquares.forEach((value) => {\n\t\t\tconst valueArr = value.split(\":\");\n\t\t\tpermutations[parseInt(valueArr[0], 10)] |= binaryMasks[parseInt(valueArr[1], 10)];\n\t\t});\n\n\t\treturn permutations;\n\t}\n\n\tprivate addToBoardDestinations(i: number, j: number, piece: PieceString) {\n\t\tconst permutations = this.recurseThroughSquares(i, j, piece);\n\n\t\tconst boardPiece = this.boardDestinations.get(piece.piece);\n\t\tif (boardPiece) {\n\t\t\tthis.boardDestinations.set(piece.piece, boardPiece.concat(permutations));\n\t\t} else {\n\t\t\tthis.boardDestinations.set(piece.piece, [permutations]);\n\t\t}\n\t}\n\n\tprivate getBoardDestinations() {\n\t\tconst boardSquares = this.board.board,\n\t\t\tpromotionRank = this.board.variantData.promotionRank || disabledRank,\n\t\t\tpromotionPieces = this.board.variantData.promotionPieces || [];\n\t\tfor (let i = 0; i < boardDimension; i++) {\n\t\t\tfor (let j = 0; j < boardDimension; j++) {\n\t\t\t\tif (boardSquares[i][j].isPiece()) this.addToBoardDestinations(i, j, boardSquares[i][j]);\n\t\t\t}\n\t\t}\n\n\t\tconst hasPromotion = promotionRank !== disabledRank && promotionPieces.some((p) => verifyPieceLetter(p));\n\t\tconst promotionRanks = [boardDimension - promotionRank, promotionRank - 1, promotionRank - 1, boardDimension - promotionRank];\n\t\tconst optimizedPieces = optimizePieceSet(promotionPieces, true);\n\t\tif (hasPromotion) {\n\t\t\tfor (let color of colors) {\n\t\t\t\tcolor &= 1;\n\t\t\t\tfor (let x = 0; x < boardDimension; x++) {\n\t\t\t\t\tconst [i, j] = [color ? promotionRanks[color] : x, color ? x : promotionRanks[color]];\n\t\t\t\t\tif (this.state.walls[i][j]) continue;\n\t\t\t\t\tfor (const piece of optimizedPieces) {\n\t\t\t\t\t\tthis.addToBoardDestinations(i, j, createPieceFromData(0, piece));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate initializeBackwardsPieceRegistry() {\n\t\tconst entries = this.boardDestinations.entries(),\n\t\t\t{\n\t\t\t\tstate: { backwardsPieceRegistry },\n\t\t\t\tpieceMoveRegistry\n\t\t\t} = this;\n\t\tfor (const [entry, uintArray] of entries) {\n\t\t\tif (pieceControlConfigSettings[entry].moveGenerationSettings.isPawn || entry === grasshopperPieceLetter || !verifyPieceLetter(entry))\n\t\t\t\tcontinue;\n\t\t\tlet isAlwaysIntersecting = true;\n\t\t\tconst permutationArray: Array<number | Uint16Array> = [];\n\n\t\t\tfor (const permutationEntry of uintArray) {\n\t\t\t\tif (permutationArray.length === 0) {\n\t\t\t\t\tpermutationArray.push(permutationEntry);\n\t\t\t\t} else {\n\t\t\t\t\tconst index = permutationArray.findIndex((uintArr) => {\n\t\t\t\t\t\tif (typeof uintArr !== \"number\") return uintArr.every((n, j) => n === permutationEntry[j]);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t\t\tif (~index) {\n\t\t\t\t\t\tpermutationArray.push(index);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpermutationArray.push(permutationEntry);\n\t\t\t\t\t\tisAlwaysIntersecting = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isAlwaysIntersecting) {\n\t\t\t\tpieceMoveRegistry[entry] = {\n\t\t\t\t\t[Symbol()]: pieceMoveRegistry[entry][Object.getOwnPropertySymbols(pieceMoveRegistry[entry])[0]]\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tif (!(entry in backwardsPieceRegistry)) {\n\t\t\t\t\tbackwardsPieceRegistry[entry] = initializeBoardSquares(() => null);\n\t\t\t\t}\n\n\t\t\t\tconst remappedSymbols: Array<symbol | number> = [];\n\t\t\t\tfor (const squares of permutationArray) {\n\t\t\t\t\tlet remappedSymbol: symbol | undefined;\n\t\t\t\t\tif (typeof squares === \"number\") {\n\t\t\t\t\t\tremappedSymbols.push(squares);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i = 0; i < boardDimension; i++) {\n\t\t\t\t\t\tfor (let j = 0; j < boardDimension; j++) {\n\t\t\t\t\t\t\tif ((squares[i] & binaryMasks[j]) ^ oneBitMask) {\n\t\t\t\t\t\t\t\tif (!remappedSymbol) {\n\t\t\t\t\t\t\t\t\tremappedSymbol = Symbol();\n\t\t\t\t\t\t\t\t\tremappedSymbols.push(remappedSymbol);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.state.backwardsPieceRegistry[entry][i][j] ??= remappedSymbol;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst uintValues = Object.getOwnPropertySymbols(pieceMoveRegistry[entry]).map((sym) => pieceMoveRegistry[entry][sym]);\n\t\t\t\tpieceMoveRegistry[entry] = {};\n\t\t\t\tfor (let i = 0; i < uintValues.length; i++) {\n\t\t\t\t\tconst remapped = remappedSymbols[i];\n\t\t\t\t\tif (typeof remapped === \"number\") continue;\n\t\t\t\t\tif (typeof remapped === \"undefined\") break;\n\t\t\t\t\tpieceMoveRegistry[entry][remapped] = uintValues[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate generateOppositionSquares() {\n\t\tconst boardSquares = this.board.board,\n\t\t\tcontrols = this.board.controls,\n\t\t\t{ emptyBoard } = this;\n\t\tconst royalMoves = createTuple<BoardSquares<Uint16Array>, typeof totalPlayers>(\n\t\t\tinitializeBoardSquares(() => new Uint16Array(boardDimension).fill(oneBitMask)),\n\t\t\ttotalPlayers\n\t\t);\n\t\tconst oppositionRowEchelon = createTuple<BoardSquares<Uint16Array> | undefined, typeof totalPlayers>(undefined, totalPlayers);\n\n\t\tthis.board.data.fenOptions.tag(\"royal\").forEach((royal, color) => {\n\t\t\tif (!royal) return;\n\t\t\tconst royalPiece = boardSquares[royal[0]][royal[1]];\n\t\t\tconst controlBuilder = controls[royalPiece.piece];\n\t\t\tconst builder = controlBuilder().setColor(0).setBaseImmunePieces(baseImmunes).setBoard(emptyBoard);\n\t\t\tconst finalArray = initializeBoardSquares(() => new Uint16Array(14).fill(oneBitMask));\n\t\t\tfor (let i = 0; i < boardSquares.length; i++) {\n\t\t\t\tfor (let j = 0; j < boardSquares[0].length; j++) {\n\t\t\t\t\tif (emptyBoard[i][j].isWall()) continue;\n\t\t\t\t\tconst control = builder.setCoordinates(i, j).constructPieceControl();\n\t\t\t\t\tconst moves = control.getPseudoLegalMoves();\n\t\t\t\t\tconst permutationArray = new Uint16Array(boardDimension).fill(oneBitMask);\n\t\t\t\t\tfor (const { move } of moves) permutationArray[move[0]] |= binaryMasks[move[1]];\n\t\t\t\t\tfinalArray[i][j] = permutationArray;\n\t\t\t\t\troyalMoves[color][i][j] = permutationArray;\n\t\t\t\t}\n\t\t\t}\n\t\t\toppositionRowEchelon[color] = finalArray;\n\t\t});\n\n\t\tfor (const color of colors) {\n\t\t\tthis.state.royalMoveMedians[color] = findMinimumOnBoardSquares(royalMoves[color]);\n\t\t}\n\t\treturn { oppositionRowEchelon, royalMoves };\n\t}\n\n\tprivate generateOppositeMedians(rowEchelon: Tuple<BoardSquares<Uint16Array> | undefined, typeof totalPlayers>) {\n\t\tconst {\n\t\t\t\temptyBoard,\n\t\t\t\tstate: { oppositionMedians }\n\t\t\t} = this,\n\t\t\troyals = this.board.data.fenOptions.tag(\"royal\");\n\t\tfor (let i = 0; i < totalPlayers; i++) {\n\t\t\tfor (let j = 0; j < totalPlayers; j++) {\n\t\t\t\tif (i === j || rowEchelon[i] === undefined) continue;\n\t\t\t\tconst royalPieceA = royals[i],\n\t\t\t\t\troyalPieceB = royals[j];\n\t\t\t\tif (!royalPieceA || !royalPieceB) continue;\n\t\t\t\tconst finalArray = Array.from({ length: 14 }, () => Array.from({ length: 14 }, () => 0));\n\t\t\t\tfor (let i2 = 0; i2 < boardDimension; i2++) {\n\t\t\t\t\tfor (let j2 = 0; j2 < boardDimension; j2++) {\n\t\t\t\t\t\tif (emptyBoard[i2][j2].isWall()) continue;\n\t\t\t\t\t\tconst jjIndex = rowEchelon[j];\n\t\t\t\t\t\tconst iiIndex = rowEchelon[i];\n\t\t\t\t\t\tif (!jjIndex || !iiIndex)\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`Central opposition matrix indexes are undefined: ${jjIndex?.toString() ?? \"undefined\"}  ${\n\t\t\t\t\t\t\t\t\tiiIndex?.toString() ?? \"undefined\"\n\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(jjIndex[i2][j2][royalPieceA[1]] & binaryMasks[royalPieceA[0]]) ^ oneBitMask &&\n\t\t\t\t\t\t\t(iiIndex[i2][j2][royalPieceB[1]] & binaryMasks[royalPieceB[0]]) ^ oneBitMask\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst uintArray = jjIndex[i2][j2].map((e, x) => e & iiIndex[i2][j2][x]);\n\t\t\t\t\t\tlet newResultingSquares = 0;\n\t\t\t\t\t\tfor (let dimSquare = 0; dimSquare < boardDimension; dimSquare++) {\n\t\t\t\t\t\t\tnewResultingSquares += bitCount(uintArray[dimSquare]) - 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfinalArray[i2][j2] = newResultingSquares;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet minimum = Infinity;\n\t\t\t\tfor (let i2 = 0; i2 < boardDimension; i2++) {\n\t\t\t\t\tfor (let j2 = 0; j2 < boardDimension; j2++) {\n\t\t\t\t\t\tif (finalArray[i2][j2] !== 0 && finalArray[i2][j2] < minimum) {\n\t\t\t\t\t\t\tminimum = finalArray[i2][j2];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toppositionMedians[i][j] = minimum - 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate generatePieceMoveMedians(royalMoves: Tuple<BoardSquares<Uint16Array>, typeof totalPlayers>) {\n\t\tconst {\n\t\t\tpieceMoveRegistry,\n\t\t\tstate: { pieceSquareMedians, walls },\n\t\t\troyalPieceSets\n\t\t} = this;\n\t\tlet currentMessages = 0,\n\t\t\trequiredMessages = 0;\n\t\tfor (const pieceLetter in pieceMoveRegistry) {\n\t\t\tif (!verifyPieceLetter(pieceLetter) || !Object.prototype.hasOwnProperty.call(pieceMoveRegistry, pieceLetter)) continue;\n\t\t\tif (pieceLetter in pieceSquareMedians) continue;\n\t\t\tpieceSquareMedians[pieceLetter] = {};\n\t\t\tconst registeredSymbols = Object.getOwnPropertySymbols(pieceMoveRegistry[pieceLetter]);\n\t\t\tfor (const registeredSymbol of registeredSymbols) {\n\t\t\t\tconst pieceMedianCounter = new Worker(new URL(\"./PieceMedianCounter.ts\", import.meta.url));\n\t\t\t\tpieceMedianCounter.postMessage({\n\t\t\t\t\twalls,\n\t\t\t\t\tmoveRegistryArray: pieceMoveRegistry[pieceLetter][registeredSymbol].map((r) => r.map((uint) => uint.buffer)),\n\t\t\t\t\troyalMoves: royalMoves.map((board) => board.map((r) => r.map((uint) => uint.buffer))),\n\t\t\t\t\troyalPieceSet: royalPieceSets.map((s) => [...s])\n\t\t\t\t});\n\t\t\t\trequiredMessages++;\n\t\t\t\tpieceMedianCounter.onmessage = (e: MessageEvent<PieceMedianCounterReturnType>) => {\n\t\t\t\t\tpieceSquareMedians[pieceLetter][registeredSymbol] = e.data;\n\t\t\t\t\tpieceMedianCounter.terminate();\n\t\t\t\t\tif (requiredMessages === ++currentMessages) {\n\t\t\t\t\t\tthis.callback(this.state);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\tgenerateInsufficientMaterialState() {\n\t\tthis.initializeRoyals();\n\t\tthis.getBoardDestinations();\n\t\tthis.initializeBackwardsPieceRegistry();\n\t\tconst { royalMoves, oppositionRowEchelon } = this.generateOppositionSquares();\n\t\tthis.generateOppositeMedians(oppositionRowEchelon);\n\t\tthis.generatePieceMoveMedians(royalMoves);\n\t}\n}\n","import { createTupleFromCallback, Tuple } from \"@client/ts/baseTypes\";\nimport { BoardSquares, initializeBoardSquares } from \"@client/ts/logic/BaseInterfaces\";\nimport { boardDimension, colors, totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport type { PieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { countMinimumOf2DArrayExcludingZero } from \"@client/ts/utils/ArrayUtils\";\nimport { countBitsOnBoard } from \"./Utilities\";\n\nexport type PieceMedianCounterReturnType = Tuple<number | undefined, typeof totalPlayers>;\ninterface PieceMedianCounterSettings {\n\twalls: BoardSquares<boolean>;\n\tmoveRegistryArray: ArrayBufferLike[][];\n\troyalPieceSet: Tuple<PieceLetter[], typeof totalPlayers>;\n\troyalMoves: Tuple<ArrayBufferLike[][], typeof totalPlayers>;\n}\n\nself.onmessage = (e: MessageEvent<PieceMedianCounterSettings>) => {\n\tconst { walls, royalPieceSet, royalMoves, moveRegistryArray } = e.data;\n\tconst resultingMedianArray = createTupleFromCallback<BoardSquares<number> | undefined, typeof totalPlayers>(\n\t\t() => initializeBoardSquares(() => 0),\n\t\ttotalPlayers\n\t);\n\tfor (let i = 0; i < boardDimension; i++) {\n\t\tfor (let j = 0; j < boardDimension; j++) {\n\t\t\tif (walls[i][j]) continue;\n\t\t\tconst moves = new Uint16Array(moveRegistryArray[i][j]);\n\t\t\tfor (const color of colors) {\n\t\t\t\tif (royalPieceSet[color].length === 0) {\n\t\t\t\t\tresultingMedianArray[color] = undefined;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tlet resultingSquares = 0;\n\t\t\t\t\tfor (let royalI = 0; royalI < boardDimension; royalI++) {\n\t\t\t\t\t\tfor (let royalJ = 0; royalJ < boardDimension; royalJ++) {\n\t\t\t\t\t\t\tconst royalMoveSet = new Uint16Array(royalMoves[color][royalI][royalJ]);\n\t\t\t\t\t\t\tconst result = moves.map((e, x) => e & royalMoveSet[x]);\n\t\t\t\t\t\t\tconst newResultingSquares = countBitsOnBoard(result);\n\n\t\t\t\t\t\t\tif (newResultingSquares > resultingSquares) {\n\t\t\t\t\t\t\t\tresultingSquares = newResultingSquares;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst resultingMedian = resultingMedianArray[color];\n\t\t\t\t\tif (resultingMedian) resultingMedian[i][j] = resultingSquares;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpostMessage(\n\t\tresultingMedianArray.map((arr) => {\n\t\t\tif (arr) {\n\t\t\t\tconst minimum = countMinimumOf2DArrayExcludingZero(arr);\n\t\t\t\treturn minimum === Infinity ? 0 : minimum;\n\t\t\t} else return arr;\n\t\t})\n\t);\n};\n","import type { PieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport type { InsufficientMaterialState } from \"./InsufficientMaterialConstructor\";\nimport type { BoardSquares } from \"@client/ts/logic/BaseInterfaces\";\nimport type { ImplementInterface, Tuple } from \"@client/ts/baseTypes\";\nimport type { totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\n\ninterface SerializedInsufficientMaterialDraft {\n\treadonly backwardsPieceRegistry: Record<PieceLetter, BoardSquares<number | null>>;\n\treadonly optimizedPieces: PieceLetter[];\n\treadonly pieceSquareMedians: Record<PieceLetter, Record<number, Tuple<number | undefined, typeof totalPlayers>>>;\n}\nexport type SerializedInsufficientMaterialState = ImplementInterface<InsufficientMaterialState, SerializedInsufficientMaterialDraft>;\n\nexport function serializeInsufficientMaterialState(state: InsufficientMaterialState): SerializedInsufficientMaterialState {\n\tconst backwardsPieceRegistry: Record<PieceLetter, BoardSquares<number | null>> = {};\n\tconst counters: Record<symbol, number> = {};\n\n\tlet individualCounter = 0;\n\tlet key: PieceLetter;\n\tfor (key in state.backwardsPieceRegistry) {\n\t\tif (!Object.prototype.hasOwnProperty.call(state.backwardsPieceRegistry, key)) continue;\n\t\tbackwardsPieceRegistry[key] = state.backwardsPieceRegistry[key].map((r) =>\n\t\t\tr.map((e) => {\n\t\t\t\tif (e !== null) {\n\t\t\t\t\tif (e in counters) {\n\t\t\t\t\t\treturn counters[e];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcounters[e] = individualCounter++;\n\t\t\t\t\t\treturn counters[e];\n\t\t\t\t\t}\n\t\t\t\t} else return e;\n\t\t\t})\n\t\t);\n\t}\n\n\tconst pieceSquareMedians: Record<PieceLetter, Record<number, Tuple<number | undefined, typeof totalPlayers>>> = {};\n\tfor (key in state.pieceSquareMedians) {\n\t\tif (!Object.prototype.hasOwnProperty.call(state.pieceSquareMedians, key)) continue;\n\t\tconst result: Record<number, Tuple<number | undefined, typeof totalPlayers>> = {};\n\t\tfor (const symbol of Object.getOwnPropertySymbols(state.pieceSquareMedians[key])) {\n\t\t\tif (symbol in counters) {\n\t\t\t\tresult[counters[symbol]] = state.pieceSquareMedians[key][symbol];\n\t\t\t} else result[individualCounter--] = state.pieceSquareMedians[key][symbol];\n\t\t}\n\t\tpieceSquareMedians[key] = result;\n\t}\n\n\treturn {\n\t\t...state,\n\t\tbackwardsPieceRegistry,\n\t\tpieceSquareMedians,\n\t\toptimizedPieces: [...state.optimizedPieces]\n\t};\n}\n\nexport function deserializeInsufficientMaterialState(state: SerializedInsufficientMaterialState): InsufficientMaterialState {\n\tconst backwardsPieceRegistry: Record<PieceLetter, BoardSquares<symbol | null>> = {};\n\tconst counters: Record<PieceLetter, Record<number, symbol>> = {};\n\tlet key: PieceLetter;\n\tfor (key in state.backwardsPieceRegistry) {\n\t\tif (!Object.prototype.hasOwnProperty.call(state.backwardsPieceRegistry, key)) continue;\n\t\tcounters[key] = {};\n\t\tbackwardsPieceRegistry[key] = state.backwardsPieceRegistry[key].map((r) =>\n\t\t\tr.map((e) => {\n\t\t\t\tif (e !== null) {\n\t\t\t\t\tif (!(e in counters[key])) counters[key][e] = Symbol();\n\t\t\t\t\treturn counters[key][e];\n\t\t\t\t} else return e;\n\t\t\t})\n\t\t);\n\t}\n\n\tconst pieceSquareMedians: Record<PieceLetter, Record<symbol, Tuple<number | undefined, typeof totalPlayers>>> = {};\n\tfor (key in state.pieceSquareMedians) {\n\t\tif (!Object.prototype.hasOwnProperty.call(state.pieceSquareMedians, key)) continue;\n\t\tconst result: Record<symbol, Tuple<number | undefined, typeof totalPlayers>> = {};\n\t\tfor (const numericKey in state.pieceSquareMedians[key]) {\n\t\t\tif (!Object.prototype.hasOwnProperty.call(state.pieceSquareMedians[key], numericKey)) continue;\n\t\t\tconst indexingNumber = Number(numericKey);\n\t\t\tif (key in counters && indexingNumber in counters[key]) {\n\t\t\t\tresult[counters[key][indexingNumber]] = state.pieceSquareMedians[key][indexingNumber];\n\t\t\t} else result[Symbol()] = state.pieceSquareMedians[key][indexingNumber];\n\t\t}\n\t\tpieceSquareMedians[key] = result;\n\t}\n\n\treturn {\n\t\t...state,\n\t\tbackwardsPieceRegistry,\n\t\tpieceSquareMedians,\n\t\toptimizedPieces: new Set(state.optimizedPieces)\n\t};\n}\n","import { boardDimension } from \"@moveGeneration/GameInformation/GameData\";\nimport { PieceLetter, verifyPieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { bitCount } from \"@utils/NumberUtils\";\n\nexport const binaryMasks = Array(boardDimension)\n\t.fill(1)\n\t.map((v, i) => (v << boardDimension) | (v << (boardDimension - 1 - i)));\nexport const oneBitMask = 1 << boardDimension;\n\nexport function countBitsOnBoard(board: Uint16Array): number {\n\tlet setBits = 0;\n\tfor (let x = 0; x < boardDimension; x++) {\n\t\tsetBits += bitCount(board[x] ^ oneBitMask);\n\t}\n\n\treturn setBits;\n}\n\nexport function findMinimumOnBoardSquares(board: Uint16Array[][]): number {\n\tlet minimum = Infinity;\n\tfor (let i = 0; i < boardDimension; i++) {\n\t\tfor (let j = 0; j < boardDimension; j++) {\n\t\t\tconst setBits = countBitsOnBoard(board[i][j]);\n\t\t\tif (setBits !== 0 && setBits < minimum) {\n\t\t\t\tminimum = setBits;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn minimum;\n}\n\nexport function optimizePieceSet(possiblePieces: string[], maximumTarget: boolean): Set<PieceLetter> {\n\tconst optimalRoyalMoveSets = [\n\t\t[\"β\", \"W\", \"R\", \"E\", \"M\", \"Q\", \"D\", \"A\"],\n\t\t[\"γ\", \"F\", \"B\", \"H\", \"M\", \"Q\", \"D\", \"A\", \"Δ\"],\n\t\t[\"Y\", \"Z\"],\n\t\t[\"I\", \"J\"],\n\t\t[\"S\", \"T\"],\n\t\t[\"S\", \"Y\"],\n\t\t[\"I\", \"Y\"],\n\t\t[\"U\", \"N\", \"O\"],\n\t\t[\"H\", \"A\"],\n\t\t[\"E\", \"A\"],\n\t\t[\"Δ\", \"H\"],\n\t\t[\"C\", \"L\"],\n\t\t[\"C\", \"V\"]\n\t];\n\tconst moveSet = new Set<PieceLetter>();\n\tfor (const optimalMoveSet of optimalRoyalMoveSets) {\n\t\tconst detractionSet = maximumTarget ? optimalMoveSet.slice().reverse() : optimalMoveSet;\n\t\tfor (const piece of possiblePieces) {\n\t\t\tif (detractionSet.includes(piece)) {\n\t\t\t\tconst target = detractionSet.slice(0, -detractionSet.indexOf(piece));\n\t\t\t\ttarget.forEach((t) => {\n\t\t\t\t\tif (possiblePieces.includes(t) && verifyPieceLetter(t)) moveSet.add(t);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (moveSet.size === 0) {\n\t\tpossiblePieces.forEach((p) => {\n\t\t\tif (verifyPieceLetter(p)) moveSet.add(p);\n\t\t});\n\t}\n\n\treturn moveSet;\n}\n","import { boardDimension } from \"@moveGeneration/GameInformation/GameData\";\nimport type { Coordinate } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport type { MoveData } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { RoyalsCannotCapture } from \"../PieceControlDecorators/RoyalsCannotCapture\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"atomic\";\nexport class Atomic extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(Atomic);\n\t}\n\treadonly dependencies = new Map([[RoyalsCannotCapture, []]]);\n\n\tstatic readonly atomicCoordinates: Coordinate[] = [\n\t\t[-1, -1],\n\t\t[-1, 0],\n\t\t[0, -1],\n\t\t[-1, 1],\n\t\t[1, -1],\n\t\t[1, 0],\n\t\t[0, 1],\n\t\t[1, 1]\n\t];\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Atomic\",\n\t\t\t\tdescription: \"Captures cause all surrounding pieces except pawns to explode\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.extending,\n\t\t\t\tdisplayIcon: chessGlyphIndex.atomic\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^Atomic$/i.test(match);\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn \"Atomic\";\n\t}\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tisComplexEvaluation(): boolean {\n\t\treturn true;\n\t}\n\n\tgetCapturedPieces(moveData: MoveData): Coordinate[] {\n\t\tconst baseCoordinates = this.callHandler(\"getCapturedPieces\", arguments);\n\t\tconst addCoordinate = (disI: number, disJ: number) => {\n\t\t\tconst coordinateI = moveData.endCoordinates[0] + disI;\n\t\t\tconst coordinateJ = moveData.endCoordinates[1] + disJ;\n\t\t\tif (coordinateI >= 0 && coordinateI <= boardDimension && coordinateJ >= 0 && coordinateJ <= boardDimension) {\n\t\t\t\tconst pieceString = this.decorator.board.board[coordinateI][coordinateJ];\n\t\t\t\tif (\n\t\t\t\t\t(pieceString.isPiece() || pieceString.isDead()) &&\n\t\t\t\t\t!pieceControlConfigSettings[pieceString.piece].moveGenerationSettings.isPawn\n\t\t\t\t) {\n\t\t\t\t\tbaseCoordinates.push([coordinateI, coordinateJ]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (baseCoordinates.length !== 0) {\n\t\t\tfor (const [i, j] of Atomic.atomicCoordinates) {\n\t\t\t\taddCoordinate(i, j);\n\t\t\t}\n\t\t\tbaseCoordinates.push([...moveData.startCoordinates]);\n\t\t}\n\n\t\treturn baseCoordinates;\n\t}\n}\n","import type { PlayerBooleanTuple } from \"@moveGeneration/Board/Board\";\nimport { FENData } from \"@moveGeneration/FENData/FENData\";\nimport { totalPlayers, VariantType } from \"@moveGeneration/GameInformation/GameData\";\nimport { verifyNumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { createPieceFromData, deadColorIndex } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport { InternalMove, InternalMoveSignature } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { VariantRule } from \"@moveGeneration/VariantRules/VariantRule\";\nimport { VariantRuleAllowedChecks, variantRuleColors, VariantRuleHandler } from \"@moveGeneration/VariantRules/VariantRuleInterface\";\n\nconst tag = \"deadKingWalking\";\nexport class DeadKingWalking extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(DeadKingWalking);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Zombies\",\n\t\t\t\tdescription: \"Resigned players are controlled by a bot\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.autogenous,\n\t\t\t\tdisplayIcon: \"\"\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^DeadKingWalking$/i.test(match);\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn \"DeadKingWalking\";\n\t}\n\tisDisabled({ variantDataRules, gameType, fenTags }: VariantRuleAllowedChecks): boolean {\n\t\treturn (\n\t\t\tgameType === VariantType.Teams ||\n\t\t\tfenTags.dead.value.reduce((p, n, i) => p + Number(n || fenTags.resigned.value[i]), 0) <= totalPlayers - 1 ||\n\t\t\t(variantDataRules.pointsForMate !== false && variantDataRules.pointsForMate < 6)\n\t\t);\n\t}\n\n\tprocessInternalMove(internalMove: InternalMove): { stalemates: PlayerBooleanTuple } {\n\t\tif (\n\t\t\tinternalMove.type === InternalMoveSignature.Resign ||\n\t\t\tinternalMove.type === InternalMoveSignature.ClaimWin ||\n\t\t\tinternalMove.type === InternalMoveSignature.Timeout\n\t\t) {\n\t\t\tconst { sideToMove, fenOptions, board } = this.decorator;\n\t\t\tconst dead = fenOptions.tag(\"dead\"),\n\t\t\t\tresigned = fenOptions.tag(\"resigned\");\n\n\t\t\tresigned[sideToMove] = true;\n\t\t\tdead[sideToMove] = true;\n\n\t\t\tfor (const coordinate of board.getPlayerPieces()[sideToMove]) {\n\t\t\t\tconst piece = board.board[coordinate[0]][coordinate[1]].piece;\n\t\t\t\tif (pieceControlConfigSettings[piece].moveGenerationSettings.isPawn) {\n\t\t\t\t\tboard.board[coordinate[0]][coordinate[1]] = createPieceFromData(deadColorIndex, piece);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst deadPlayers = dead.map((d, i) => d || resigned[i]).filter(Boolean);\n\t\t\tif (deadPlayers.length === totalPlayers - 1) {\n\t\t\t\tconst alivePlayer = deadPlayers.findIndex((d) => !d);\n\t\t\t\tif (verifyNumericColor(alivePlayer)) {\n\t\t\t\t\tthis.decorator.assignPoints(\n\t\t\t\t\t\talivePlayer,\n\t\t\t\t\t\tthis.decorator.countTotalPointsOnBoard().reduce((p, n, i) => p + (i === alivePlayer ? n : 0), 0)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn { stalemates: [false, false, false, false] };\n\t\t} else return this.callHandler(\"processInternalMove\", arguments);\n\t}\n}\n","import { MoveData, SpecialMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { emptyPieceString, PieceString } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { Coordinate, nonPlayablePieces } from \"../../../GameInformation/GameUnits/GameUnits\";\nimport { assertNonUndefined } from \"@client/ts/baseTypes\";\nimport { isVerticalPlacement } from \"@client/ts/logic/BaseInterfaces\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"enPassant\";\nexport class EnPassant extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(EnPassant);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"En Passant\",\n\t\t\t\tdescription: \"Pawns can capture en passant\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.minor,\n\t\t\t\tdisplayIcon: chessGlyphIndex.pawnConnection\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^EnPassant$/i.test(match);\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn \"EnPassant\";\n\t}\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tprocessStandardMove(moveData: MoveData): { endPiece: PieceString[] } {\n\t\tconst enPassants = this.decorator.fenOptions.tag(\"enPassant\");\n\t\tconst {\n\t\t\tstartCoordinates: [startI, startJ],\n\t\t\tendCoordinates: [endI, endJ]\n\t\t} = moveData;\n\t\tif (moveData.specialType === SpecialMove.EnPassant) {\n\t\t\tconst eligibleEnPassants: number[] = [];\n\t\t\tenPassants.forEach((e, i) => {\n\t\t\t\tif (!e) return;\n\t\t\t\tif (e[0][0] === endI && e[0][1] === endJ) eligibleEnPassants.push(i);\n\t\t\t});\n\t\t\tfor (const enPassantCoordinate of eligibleEnPassants) {\n\t\t\t\tconst enPassant = enPassants[enPassantCoordinate];\n\t\t\t\tassertNonUndefined(enPassant);\n\t\t\t\tthis.decorator.board.board[enPassant[1][0]][enPassant[1][1]] = emptyPieceString;\n\t\t\t\tenPassants[enPassantCoordinate] = null;\n\t\t\t}\n\t\t} else {\n\t\t\tconst pieceString = this.decorator.board.board[startI][startJ];\n\n\t\t\tif (!pieceString.isEmpty() && pieceString.piece !== nonPlayablePieces.duck) {\n\t\t\t\tenPassants[this.decorator.sideToMove] = null;\n\t\t\t\tconst setting = pieceControlConfigSettings[pieceString.piece];\n\t\t\t\tif (\n\t\t\t\t\tsetting.moveGenerationSettings.isPawn &&\n\t\t\t\t\tMath.abs(isVerticalPlacement(this.decorator.sideToMove) ? startI - endI : startJ - endJ) === 2\n\t\t\t\t) {\n\t\t\t\t\tconst enPassantInfo: [Coordinate, Coordinate] = [\n\t\t\t\t\t\t[Math.ceil((startI + endI) / 2), Math.ceil((startJ + endJ) / 2)],\n\t\t\t\t\t\t[endI, endJ]\n\t\t\t\t\t];\n\t\t\t\t\tenPassants[this.decorator.sideToMove] = enPassantInfo;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.callHandler(\"processStandardMove\", arguments);\n\t}\n}\n","import { createTuple } from \"../../../../../baseTypes\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport type { PostMoveResults } from \"../../../FENData/FENDataInterface\";\nimport { totalPlayers } from \"../../../GameInformation/GameData\";\nimport { createPieceFromData, deadColorIndex } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { RoyalsCannotCapture } from \"../PieceControlDecorators/RoyalsCannotCapture\";\nimport { pieceControlConfigSettings } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { MoveComponent, verifyStandardMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport type { Coordinate } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"fatalCapture\";\nexport class FatalCapture extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(FatalCapture);\n\t}\n\treadonly dependencies = new Map([[RoyalsCannotCapture, []]]);\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Fatal Capture\",\n\t\t\t\tdescription: \"Pieces (but not pawns) die when they capture\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.extending,\n\t\t\t\tdisplayIcon: chessGlyphIndex.trashBin\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^FatalCapture$/i.test(match);\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn \"FatalCapture\";\n\t}\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\taffectOptions(move: MoveComponent): PostMoveResults {\n\t\tlet endCaptureCoordinates: Coordinate | undefined;\n\t\tif (verifyStandardMove(move)) {\n\t\t\tconst {\n\t\t\t\tstartCoordinates: [startI, startJ],\n\t\t\t\tendCoordinates: [endI, endJ]\n\t\t\t} = move;\n\t\t\tconst isCapture = this.decorator.board.board[endI][endJ].isPiece();\n\t\t\tconst royal = this.decorator.fenOptions.tag(\"royal\")[this.decorator.sideToMove];\n\t\t\tif (royal && startI === royal[0] && startJ === royal[1] && isCapture) {\n\t\t\t\treturn {\n\t\t\t\t\tcheckmates: this.decorator.board.gameType.getBaseColors(this.decorator.sideToMove),\n\t\t\t\t\tchecks: createTuple(false, totalPlayers),\n\t\t\t\t\tstalemates: createTuple(false, totalPlayers)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tendCaptureCoordinates = isCapture ? move.endCoordinates : undefined;\n\t\t}\n\n\t\tconst returnType = this.callHandler(\"affectOptions\", arguments);\n\t\tif (endCaptureCoordinates) {\n\t\t\tconst pieceString = this.decorator.board.board[endCaptureCoordinates[0]][endCaptureCoordinates[1]];\n\t\t\tif (!pieceControlConfigSettings[pieceString.piece].moveGenerationSettings.isPawn) {\n\t\t\t\tthis.decorator.board.board[endCaptureCoordinates[0]][endCaptureCoordinates[1]] = createPieceFromData(\n\t\t\t\t\tdeadColorIndex,\n\t\t\t\t\tthis.decorator.board.board[endCaptureCoordinates[0]][endCaptureCoordinates[1]].piece\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn returnType;\n\t}\n}\n","import { FENData } from \"../../../FENData/FENData\";\nimport type { PostMoveResults } from \"../../../FENData/FENDataInterface\";\nimport { totalPlayers } from \"../../../GameInformation/GameData\";\nimport type { PieceString } from \"../../../GameInformation/GameUnits/PieceString\";\nimport type { MoveComponent, MoveData } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport type { VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"fiftyMoveRule\";\nexport class FiftyMoveRule extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(FiftyMoveRule);\n\t}\n\tprivate totalFullMoves: number;\n\n\tconstructor(fullMoves?: unknown) {\n\t\tsuper();\n\t\tif (typeof fullMoves === \"number\" && fullMoves > 0) {\n\t\t\tthis.totalFullMoves = fullMoves;\n\t\t} else {\n\t\t\tthis.totalFullMoves = 50;\n\t\t}\n\t}\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\n\tgetPublicProperties() {\n\t\tconst isDisabled = this.totalFullMoves === Infinity;\n\t\treturn {\n\t\t\tparameterValue: this.totalFullMoves,\n\t\t\tinformation: {\n\t\t\t\tname: \"N Move Rule\",\n\t\t\t\ttextualForm: \"\",\n\t\t\t\tdescription: isDisabled\n\t\t\t\t\t? \"50 move rule disabled\"\n\t\t\t\t\t: `After ${this.totalFullMoves} full moves without captures or pawn pushes game is over`,\n\t\t\t\ttag\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string) {\n\t\tconst matchArray = match.match(/^FiftyMoveRule=((?:\\d+)|(?:Infinity))$/i);\n\t\tif (matchArray) {\n\t\t\tthis.totalFullMoves = Number(matchArray[1]);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn `FiftyMoveRule=${this.totalFullMoves}`;\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tgetParametrizedOptions() {\n\t\tconst options = new Map<string, number>();\n\t\tfor (const value of [50, 150, 200, 25, 10]) options.set(`${value} Move rule`, value);\n\t\toptions.set(\"Unlimited\", Infinity);\n\t\treturn options;\n\t}\n\n\tprocessStandardMove(moveData: MoveData): { endPiece: PieceString[] } {\n\t\tif (this.decorator.getCapturedPieces(moveData).length > 0) {\n\t\t\tthis.decorator.plyCount = 0;\n\t\t}\n\n\t\treturn this.callHandler(\"processStandardMove\", arguments);\n\t}\n\n\taffectOptions(move: MoveComponent): PostMoveResults {\n\t\tconst results = this.callHandler(\"affectOptions\", arguments);\n\t\tif (move.isIrreversible) {\n\t\t\tthis.decorator.plyCount = 0;\n\t\t} else {\n\t\t\tthis.decorator.plyCount++;\n\t\t}\n\n\t\tconst alivePlayers = totalPlayers - this.decorator.fenOptions.tag(\"dead\").filter(Boolean).length;\n\t\tif (alivePlayers > 0 && Math.floor(this.decorator.plyCount / alivePlayers) > this.totalFullMoves) {\n\t\t\tthis.decorator.assignGeneralTermination(\"50-move Rule\");\n\t\t\tthis.injectIntoBaseClass(function (this: FENData) {\n\t\t\t\tthis.spreadPointsBetweenPlayersEvenly();\n\t\t\t})();\n\t\t}\n\n\t\treturn results;\n\t}\n}\n","import type { NumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport type { PostMoveResults } from \"../../../FENData/FENDataInterface\";\nimport { totalPlayers } from \"../../../GameInformation/GameData\";\nimport type { PieceString } from \"../../../GameInformation/GameUnits/PieceString\";\nimport type { MoveData } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport {\n\tAllowedSuperClasses,\n\tVariantDataRules,\n\tVariantRuleAllowedChecks,\n\tvariantRuleColors,\n\tVariantRuleHandler\n} from \"../../VariantRuleInterface\";\nimport { ForcedCapture } from \"../BoardDecorators/ForcedCapture\";\nimport { StalemateOptions, stalemateOptionsValues } from \"./StalemateOptions\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"giveaway\";\nexport class Giveaway extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(Giveaway);\n\t}\n\tprivate static readonly pointsForPiece = 3;\n\tprivate static readonly stalematePoints = {\n\t\t[1]: 200,\n\t\t[2]: 400,\n\t\t[3]: 600\n\t};\n\treadonly dependencies = new Map<new (...args: unknown[]) => VariantRule<AllowedSuperClasses, keyof VariantDataRules>, unknown[]>([\n\t\t[ForcedCapture, []],\n\t\t[StalemateOptions, [stalemateOptionsValues.stalemateWins]]\n\t]);\n\n\tprivate initiallyAliveColors = totalPlayers;\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Giveaway\",\n\t\t\t\tdescription: \"First to lose all pieces or stalemate wins\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.widespread,\n\t\t\t\tdisplayIcon: chessGlyphIndex.gift\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string) {\n\t\treturn /^Giveaway$/i.test(match);\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn \"Giveaway\";\n\t}\n\tisDisabled({ variantDataRules }: VariantRuleAllowedChecks): boolean {\n\t\treturn variantDataRules.taboo;\n\t}\n\n\tinitDecoratorSettings() {\n\t\tthis.decorator.fenOptions.setTag(\"royal\", [null, null, null, null]);\n\t\tthis.initiallyAliveColors = this.decorator.fenOptions\n\t\t\t.tag(\"dead\")\n\t\t\t.map((d, i) => d || this.decorator.fenOptions.tag(\"resigned\")[i])\n\t\t\t.filter(Boolean).length;\n\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n\n\tprocessStandardMove(moveData: MoveData): { endPiece: PieceString[] } {\n\t\tconst capturedPieces = this.decorator.getCapturedPieces(moveData);\n\t\tconst board = this.decorator.board.board;\n\t\tfor (const capturedPiece of capturedPieces) {\n\t\t\tconst pieceString = board[capturedPiece[0]][capturedPiece[1]];\n\t\t\tif (pieceString.isPiece()) {\n\t\t\t\tthis.assignPoints(pieceString.color, Giveaway.pointsForPiece, true);\n\t\t\t}\n\t\t}\n\n\t\tthis.callHandler(\"processStandardMove\", arguments);\n\t\treturn { endPiece: [] };\n\t}\n\n\taffectOptions(): PostMoveResults {\n\t\tconst returnType = this.callHandler(\"affectOptions\", arguments);\n\t\tthis.decorator.fenOptions.setTag(\"royal\", [null, null, null, null]);\n\t\treturn returnType;\n\t}\n\n\tobtainPointsForMate(): number {\n\t\t// Checkmates do not exist, so the only scenario in which this gets called is stalemate\n\t\tconst aliveColors = this.decorator.fenOptions.tag(\"dead\").filter(Boolean).length;\n\t\tswitch (aliveColors) {\n\t\t\tcase 1:\n\t\t\t\tif (this.initiallyAliveColors === totalPlayers) {\n\t\t\t\t\treturn Giveaway.stalematePoints[1];\n\t\t\t\t}\n\t\t\t// * Fallthrough\n\t\t\tcase 2:\n\t\t\t\tif (this.initiallyAliveColors >= totalPlayers - 1) {\n\t\t\t\t\treturn Giveaway.stalematePoints[2];\n\t\t\t\t}\n\t\t\t// * Fallthrough\n\t\t\tcase 3:\n\t\t\t\treturn Giveaway.stalematePoints[3];\n\t\t\tdefault:\n\t\t\t\tconsole.error(`Unexpected players length ${aliveColors}`);\n\t\t\t\treturn 0;\n\t\t}\n\t}\n\n\tassignPoints(sideToMove: NumericColor, points: number, isGiveawayAssigned = false) {\n\t\tif (isGiveawayAssigned) {\n\t\t\tfor (const decorator of this.wrappingDecorators) {\n\t\t\t\tif (decorator.assignPoints) {\n\t\t\t\t\tdecorator.assignPoints(sideToMove, points);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tFENData.prototype.assignPoints.call(this.decorator, sideToMove, points);\n\t\t}\n\t}\n}\n","import { compareArrays } from \"@client/ts/utils/ArrayUtils\";\nimport { compareCoordinates } from \"../../../Board/BoardInterface\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { PostMoveResults } from \"../../../FENData/FENDataInterface\";\nimport { colors, convertCoordinateToPGN4, getPlayerNameFromColor } from \"../../../GameInformation/GameData\";\nimport { InternalMoveSignature } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport type { Coordinate } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { parseSingleCoordinate } from \"@client/ts/logic/utils/Tags/Utils\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"kingOfTheHill\";\nexport class KingOfTheHill extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(KingOfTheHill);\n\t}\n\tprivate static readonly defaultCoordinates: Coordinate[] = [\n\t\t[7, 7],\n\t\t[7, 6],\n\t\t[6, 7],\n\t\t[6, 6]\n\t];\n\tprivate static readonly defaultRoyal = \"K\";\n\n\tprivate hillSquares: Coordinate[];\n\n\tconstructor(hillSquares?: unknown) {\n\t\tsuper();\n\t\tif (\n\t\t\tArray.isArray(hillSquares) &&\n\t\t\thillSquares.every<Coordinate>((c): c is Coordinate => Array.isArray(c) && c.length === 2 && c.every((n) => typeof n === \"number\"))\n\t\t) {\n\t\t\tthis.hillSquares = hillSquares;\n\t\t} else {\n\t\t\tthis.hillSquares = KingOfTheHill.defaultCoordinates;\n\t\t}\n\t}\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: this.hillSquares,\n\t\t\tinformation: {\n\t\t\t\tname: \"King of the Hill\",\n\t\t\t\tdescription: \"A king reaching the hill will checkmate all opponents\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.autogenous,\n\t\t\t\tdisplayIcon: chessGlyphIndex.kingOfTheHill\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\tconst matchArray = match.toLowerCase().match(/^KotH(?:=(.+))?$/i);\n\t\tif (matchArray) {\n\t\t\tif (matchArray[1]) {\n\t\t\t\tconst coordinatesArray: Coordinate[] = [];\n\t\t\t\tconst presumedOption = matchArray[1].split(\",\");\n\t\t\t\tfor (const coordinate of presumedOption) {\n\t\t\t\t\tconst parsedCoordinate = parseSingleCoordinate(coordinate);\n\t\t\t\t\tif (parsedCoordinate) {\n\t\t\t\t\t\tcoordinatesArray.push(parsedCoordinate);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (coordinatesArray.length > 0) {\n\t\t\t\t\tthis.hillSquares = coordinatesArray;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tserializeToParsingForm(): string {\n\t\tif (compareArrays(this.hillSquares, KingOfTheHill.defaultCoordinates)) {\n\t\t\treturn \"KotH\";\n\t\t} else {\n\t\t\treturn `KotH=${this.hillSquares.map((c) => convertCoordinateToPGN4(c)).join(\",\")}`;\n\t\t}\n\t}\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tgetInsufficientMaterialData() {\n\t\treturn {\n\t\t\tisPartiallyDisabled: true,\n\t\t\tisDisabled: true\n\t\t} as const;\n\t}\n\n\taffectOptions(): PostMoveResults {\n\t\tconst { board, sideToMove, fenOptions } = this.decorator;\n\t\tconst returnValues = this.callHandler(\"affectOptions\", arguments);\n\n\t\tconst royal = fenOptions.tag(\"royal\")[sideToMove],\n\t\t\tdead = fenOptions.tag(\"dead\"),\n\t\t\twb = fenOptions.tag(\"wb\");\n\t\tif (\n\t\t\tboard.variantData.giveaway &&\n\t\t\tthis.hillSquares.some((c) => {\n\t\t\t\tconst pieceString = board.board[c[0]][c[1]];\n\t\t\t\treturn pieceString.isPiece() && pieceString.piece === KingOfTheHill.defaultRoyal;\n\t\t\t})\n\t\t) {\n\t\t\tthis.decorator.processInternalMove({ type: InternalMoveSignature.Stalemate });\n\t\t\treturnValues.stalemates[sideToMove] = true;\n\t\t} else if (royal && this.hillSquares.some((c) => compareCoordinates(c, royal))) {\n\t\t\tconst pointsForMate = this.decorator.obtainPointsForMate();\n\t\t\tfor (const color of colors) {\n\t\t\t\tif (color === sideToMove) continue;\n\t\t\t\tif (!dead[color]) {\n\t\t\t\t\tdead[color] = true;\n\t\t\t\t\tthis.decorator.assignPoints(sideToMove, pointsForMate);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.decorator.board.variantData.taboo) {\n\t\t\t\tthis.decorator.gameOver = `${getPlayerNameFromColor(sideToMove, wb).toUpperCase()} WON THE RACE!`;\n\t\t\t} else {\n\t\t\t\tthis.decorator.assignGeneralTermination(\"King of the Hill\");\n\t\t\t}\n\t\t}\n\n\t\treturn returnValues;\n\t}\n}\n","import { createTuple, Tuple, verifyTupleType } from \"@client/ts/baseTypes\";\nimport { compareCoordinates } from \"../../../Board/BoardInterface\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { createDefaultFENEffectSettings, PostMoveResults } from \"../../../FENData/FENDataInterface\";\nimport { colors, totalPlayers } from \"../../../GameInformation/GameData\";\nimport { MoveComponent, verifyStandardMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport type { VariantRuleAllowedChecks, VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"nCheck\";\nexport class NCheck extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(NCheck);\n\t}\n\tprivate defaultChecks: Tuple<number, typeof totalPlayers>;\n\tconstructor(defaultChecks?: unknown) {\n\t\tsuper();\n\t\tif (\n\t\t\tArray.isArray(defaultChecks) &&\n\t\t\tverifyTupleType(defaultChecks, totalPlayers) &&\n\t\t\tdefaultChecks.every<number>((check): check is number => typeof check === \"number\")\n\t\t) {\n\t\t\tthis.defaultChecks = defaultChecks;\n\t\t} else {\n\t\t\tthis.defaultChecks = createTuple(3, totalPlayers);\n\t\t}\n\t}\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\tgetPublicProperties() {\n\t\tconst checks = this.defaultChecks\n\t\t\t.filter(Boolean)\n\t\t\t.reduce((p, n, i, arr) => p + (arr[i - 1] === arr[i] ? \"\" : `-${n}`), \"\")\n\t\t\t.slice(1);\n\t\treturn {\n\t\t\tparameterValue: this.defaultChecks,\n\t\t\tinformation: {\n\t\t\t\tname: `N-Check`,\n\t\t\t\ttextualForm: `${checks}+`,\n\t\t\t\tdescription: `Checking a king ${checks} times is checkmate`,\n\t\t\t\ttag\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\tconst matchArray = match.toLowerCase().match(/^(\\d\\d?\\d?(?:-\\d\\d?\\d?){0,3})-check$/i);\n\t\tif (matchArray) {\n\t\t\tconst checks = matchArray[1].split(\"-\");\n\t\t\tfor (let i = 0; i <= checks.length; i++) {\n\t\t\t\tif (checks[i]) {\n\t\t\t\t\tthis.defaultChecks[i] = Number(checks[i]);\n\t\t\t\t} else {\n\t\t\t\t\twhile (i !== totalPlayers) {\n\t\t\t\t\t\tthis.defaultChecks[i] = this.defaultChecks[i - 1];\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn `${this.defaultChecks.join(\"-\")}-check`;\n\t}\n\tisDisabled({ variantDataRules }: VariantRuleAllowedChecks): boolean {\n\t\treturn variantDataRules.giveaway;\n\t}\n\n\tgetInsufficientMaterialData() {\n\t\treturn {\n\t\t\tisPartiallyDisabled: true,\n\t\t\tisDisabled: false\n\t\t} as const;\n\t}\n\n\tgetParametrizedOptions() {\n\t\tconst resultingMap = new Map<string, Tuple<number, typeof totalPlayers> | false>([[\"N+ Off\", false]]);\n\t\tfor (let i = 1; i < 10; i++) resultingMap.set(`${i}+`, createTuple(i, totalPlayers));\n\t\tfor (const value of [12, 15, 20, 30, 50]) resultingMap.set(`${value}+`, createTuple(value, totalPlayers));\n\t\treturn resultingMap;\n\t}\n\n\tinitDecoratorSettings() {\n\t\tconst lives = this.decorator.fenOptions.tag(\"lives\");\n\t\tfor (const color of colors) {\n\t\t\tif (lives[color] === null) {\n\t\t\t\tlives[color] = this.defaultChecks[color];\n\t\t\t}\n\t\t}\n\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n\n\taffectOptions(move: MoveComponent, settings = createDefaultFENEffectSettings()): PostMoveResults {\n\t\tconst { board, sideToMove } = this.decorator;\n\t\tconst currentChecks = board.getCurrentChecks().map((arr) => new Set(arr));\n\t\tconst isNCheckValidated = !settings.ignoreCheckmateChecks && !settings.ignoreNextTurn;\n\t\tconst royal = this.decorator.fenOptions.tag(\"royal\"),\n\t\t\tlives = this.decorator.fenOptions.tag(\"lives\");\n\t\tconst results = this.callHandler(\"affectOptions\", arguments);\n\n\t\tconst isStandardMove = verifyStandardMove(move);\n\t\tif (isNCheckValidated) {\n\t\t\tconst updatedChecks = board.getCurrentChecks(sideToMove);\n\n\t\t\tconst playerChecks = createTuple(0, totalPlayers);\n\t\t\tfor (const color of colors) {\n\t\t\t\tfor (const coordinate of updatedChecks[color]) {\n\t\t\t\t\tconst royalPiece = royal[color];\n\t\t\t\t\tif (\n\t\t\t\t\t\t!currentChecks[color].has(coordinate) ||\n\t\t\t\t\t\t(royalPiece && isStandardMove && compareCoordinates(move.endCoordinates, royalPiece))\n\t\t\t\t\t) {\n\t\t\t\t\t\tplayerChecks[color]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (lives.every<number>((live): live is number => live !== null)) {\n\t\t\t\tfor (const color of colors) {\n\t\t\t\t\tlives[color] -= playerChecks[color];\n\t\t\t\t\tif (lives[color] <= 0) {\n\t\t\t\t\t\tthis.decorator.assignPoints(sideToMove, this.decorator.obtainPointsForMate());\n\t\t\t\t\t\tthis.decorator.turnPiecesDead(color);\n\t\t\t\t\t\tlives[color] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.decorator.getRealPlayers() > 1) {\n\t\t\t\tthis.decorator.sideToMove = this.decorator.nextTurn(sideToMove);\n\t\t\t\tboard.pregenerateAttacks();\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t}\n}\n","import { FENData } from \"../../../FENData/FENData\";\nimport { getOppositePlacedColor, totalPlayers, VariantType } from \"../../../GameInformation/GameData\";\nimport type { PieceString } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { pieceControlConfigSettings } from \"../../../PieceControl/PieceControlInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport type { VariantRuleAllowedChecks, VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"oppositeMultiplier\";\n\nexport class OppositeMultiplier extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tprivate static readonly MAXIMUM_MULTIPLIER = 6;\n\tstatic {\n\t\tVariantRule.initVariantRule(OppositeMultiplier);\n\t}\n\tprivate oppositeMultiplierValue = 2;\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: this.oppositeMultiplierValue,\n\t\t\tinformation: {\n\t\t\t\tname: \"Opposite's piece value\",\n\t\t\t\ttextualForm: `Ox${this.oppositeMultiplierValue}`,\n\t\t\t\tdescription: `Opposite's pieces are worth ${this.oppositeMultiplierValue} times their normal points value until one player is eliminated`,\n\t\t\t\ttag\n\t\t\t}\n\t\t} as const;\n\t}\n\t\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\tconst matchArray = match.toLowerCase().match(/^OppX=(\\d)$/i);\n\t\tif (matchArray) {\n\t\t\tconst numericValue = Number(matchArray[1]);\n\t\t\tif (numericValue <= 0 || numericValue > OppositeMultiplier.MAXIMUM_MULTIPLIER) return false;\n\t\t\tthis.oppositeMultiplierValue = numericValue;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn `OppX=${this.oppositeMultiplierValue}`;\n\t}\n\n\tisDisabled({ variantDataRules, gameType, fenTags }: VariantRuleAllowedChecks): boolean {\n\t\treturn (\n\t\t\tgameType === VariantType.Teams ||\n\t\t\tvariantDataRules.giveaway ||\n\t\t\tfenTags.dead.value.reduce((p, n, i) => p + Number(n || fenTags.resigned.value[i]), 0) <= totalPlayers - 1\n\t\t);\n\t}\n\n\tgetParametrizedOptions() {\n\t\tconst options = new Map<string, number | false>([[\"Ox Off\", false]]);\n\t\tfor (let i = 1; i <= OppositeMultiplier.MAXIMUM_MULTIPLIER; i++) options.set(`Ox${i}`, i);\n\t\treturn options;\n\t}\n\n\tgetPointsForPiece(pieceString: PieceString): number {\n\t\tconst dead = this.decorator.fenOptions.tag(\"dead\"),\n\t\t\tresigned = this.decorator.fenOptions.tag(\"resigned\");\n\t\tconst aliveColors = dead.map((d, i) => d || resigned[i]).filter(Boolean).length;\n\t\tif (aliveColors === totalPlayers && pieceString.isPiece() && pieceString.color === getOppositePlacedColor(this.decorator.sideToMove)) {\n\t\t\treturn pieceControlConfigSettings[pieceString.piece].points.singlesPoints * this.oppositeMultiplierValue;\n\t\t} else return this.callHandler(\"getPointsForPiece\", arguments);\n\t}\n}\n","import { MoveData, SpecialMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport type { PlayerBooleanTuple } from \"../../../Board/Board\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { getOppositePlacedColor } from \"../../../GameInformation/GameData\";\nimport { PieceString } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\n\nconst tag = \"oppositeSideCastling\";\nexport class OppositeSideCastling extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(OppositeSideCastling);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Opposite-side Castling\",\n\t\t\t\tdescription: \"Once your opponent has castled, you can only castle to the opposite side\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.minor,\n\t\t\t\tdisplayIcon: \"ὸ\"\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string) {\n\t\treturn /^OppositeSideCastling$/i.test(match);\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn \"OppositeSideCastling\";\n\t}\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tprocessStandardMove(moveData: MoveData): { endPiece: PieceString[] } {\n\t\tconst result = this.callHandler(\"processStandardMove\", arguments);\n\n\t\tif (\"specialType\" in moveData) {\n\t\t\tlet castlingDataReference: PlayerBooleanTuple | undefined;\n\t\t\tif (moveData.specialType === SpecialMove.CastlingKingside) {\n\t\t\t\tcastlingDataReference = this.decorator.fenOptions.tag(\"castleKingside\");\n\t\t\t} else if (moveData.specialType === SpecialMove.CastlingQueenside) {\n\t\t\t\tcastlingDataReference = this.decorator.fenOptions.tag(\"castleQueenside\");\n\t\t\t}\n\n\t\t\tif (castlingDataReference) {\n\t\t\t\tcastlingDataReference[getOppositePlacedColor(this.decorator.sideToMove)] = false;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n","import { FENData } from \"../../../FENData/FENData\";\nimport { PostMoveResults } from \"../../../FENData/FENDataInterface\";\nimport { createPieceFromData, PieceString } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport type { PieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { MoveComponent, MoveData, verifyInternalMove, verifyStandardMove } from \"../../../MoveTree/MoveTreeInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"piecesGoToBanks\";\nexport class PiecesGoToBanks extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Bank Captures\",\n\t\t\t\tdescription: \"Captured pieces go to banks\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.extending,\n\t\t\t\tdisplayIcon: chessGlyphIndex.copyToClipboard\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^Crazy(?:house|wan)$/i.test(match);\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn \"\";\n\t}\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tprocessStandardMove(moveData: MoveData): { endPiece: PieceString[] } {\n\t\tconst promotedFrom = this.decorator.fenOptions.tag(\"promotedFrom\");\n\n\t\tif (moveData.promotion) {\n\t\t\tconst pieceLetter = this.decorator.board.board[moveData.startCoordinates[0]][moveData.startCoordinates[1]].piece;\n\t\t\tpromotedFrom.set(moveData.endCoordinates, pieceLetter);\n\t\t} else {\n\t\t\tfor (const [key, value] of promotedFrom) {\n\t\t\t\tif (key[0] === moveData.startCoordinates[0] && key[1] === moveData.endCoordinates[1]) {\n\t\t\t\t\tpromotedFrom.delete(key);\n\t\t\t\t\tpromotedFrom.set(moveData.endCoordinates, value);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.callHandler(\"processStandardMove\", arguments);\n\t}\n\n\taffectOptions(move: MoveComponent): PostMoveResults {\n\t\tconst fenOptions = this.decorator.fenOptions;\n\t\tconst areBanksEnabled = fenOptions.tag(\"areBanksEnabled\"),\n\t\t\tbank = fenOptions.tag(\"bank\"),\n\t\t\tpromotedFrom = fenOptions.tag(\"promotedFrom\");\n\n\t\tif (areBanksEnabled[this.decorator.sideToMove]) {\n\t\t\tif (!verifyInternalMove(move)) {\n\t\t\t\tif (verifyStandardMove(move)) {\n\t\t\t\t\tconst captures = this.decorator.getCapturedPieces(move);\n\t\t\t\t\tconst sideToMove = this.decorator.sideToMove;\n\t\t\t\t\tconst addPieceToBank = (piece: PieceLetter) => {\n\t\t\t\t\t\tfor (const [key, value] of bank[sideToMove]) {\n\t\t\t\t\t\t\tif (key.piece === piece && key.color === sideToMove) {\n\t\t\t\t\t\t\t\tbank[sideToMove].set(key, value + 1);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbank[sideToMove].set(createPieceFromData(sideToMove, piece), 1);\n\t\t\t\t\t};\n\n\t\t\t\t\tcaptures.forEach((c) => {\n\t\t\t\t\t\tfor (const [key, value] of promotedFrom) {\n\t\t\t\t\t\t\tif (key[0] === c[0] && key[1] === c[1]) {\n\t\t\t\t\t\t\t\tpromotedFrom.delete(key);\n\t\t\t\t\t\t\t\taddPieceToBank(value);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\taddPieceToBank(this.decorator.board.board[c[0]][c[1]].piece);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.callHandler(\"affectOptions\", arguments);\n\t}\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { totalPlayers, VariantType } from \"../../../GameInformation/GameData\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { VariantRuleAllowedChecks, variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"playForMate\";\nexport class PlayForMate extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(PlayForMate);\n\t}\n\tprivate initiallyAliveColors = totalPlayers;\n\tprivate static readonly checkmatePoints = {\n\t\t[1]: 24,\n\t\t[2]: 32,\n\t\t[3]: 48\n\t};\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Play for mate\",\n\t\t\t\tdescription: \"No points for pieces, only checkmates matter\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.pointsAlternation,\n\t\t\t\tdisplayIcon: chessGlyphIndex.hashtag\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string) {\n\t\treturn /^Play4Mate$/i.test(match);\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn \"Play4Mate\";\n\t}\n\tisDisabled({ gameType }: VariantRuleAllowedChecks): boolean {\n\t\treturn gameType === VariantType.Teams;\n\t}\n\n\tinitDecoratorSettings() {\n\t\tthis.initiallyAliveColors = this.decorator.fenOptions\n\t\t\t.tag(\"dead\")\n\t\t\t.map((d, i) => d || this.decorator.fenOptions.tag(\"resigned\")[i])\n\t\t\t.filter(Boolean).length;\n\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n\n\tobtainPointsForMate(): number {\n\t\tconst aliveColors = this.decorator.fenOptions.tag(\"dead\").filter(Boolean).length;\n\t\tswitch (aliveColors) {\n\t\t\tcase 1:\n\t\t\t\tif (this.initiallyAliveColors === totalPlayers) {\n\t\t\t\t\treturn PlayForMate.checkmatePoints[1];\n\t\t\t\t}\n\t\t\t// * Fallthrough\n\t\t\tcase 2:\n\t\t\t\tif (this.initiallyAliveColors >= totalPlayers - 1) {\n\t\t\t\t\treturn PlayForMate.checkmatePoints[2];\n\t\t\t\t}\n\t\t\t// * Fallthrough\n\t\t\tcase 3:\n\t\t\t\treturn PlayForMate.checkmatePoints[3];\n\t\t\tdefault:\n\t\t\t\tconsole.error(`Unexpected players length ${aliveColors}`);\n\t\t\t\treturn 0;\n\t\t}\n\t}\n\n\tgetPointsForPiece(): number {\n\t\treturn 0;\n\t}\n}\n","import { VariantType } from \"@moveGeneration/GameInformation/GameData\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { VariantRule } from \"../../VariantRule\";\nimport type { VariantRuleAllowedChecks, VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"pointsForMate\";\nexport class PointsForMate extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(PointsForMate);\n\t}\n\tprivate pointsForMate: number;\n\tconstructor(pointsForMate?: unknown) {\n\t\tsuper();\n\t\tif (typeof pointsForMate === \"number\") {\n\t\t\tthis.pointsForMate = pointsForMate;\n\t\t} else {\n\t\t\tthis.pointsForMate = 20;\n\t\t}\n\t}\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: this.pointsForMate,\n\t\t\tinformation: {\n\t\t\t\tname: `Points for Mate`,\n\t\t\t\ttextualForm: `+${this.pointsForMate}`,\n\t\t\t\tdescription: `Checkmates & king captures are worth ${this.pointsForMate} points`,\n\t\t\t\ttag\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string) {\n\t\tconst matchArray = match.match(/^PointsForMate=(3|5|10|40)$/i);\n\t\tif (matchArray) {\n\t\t\tthis.pointsForMate = Number(matchArray[1]);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn `PointsForMate=${this.pointsForMate}`;\n\t}\n\n\tisDisabled({ variantDataRules, gameType }: VariantRuleAllowedChecks): boolean {\n\t\treturn variantDataRules.giveaway || variantDataRules.playForMate || gameType === VariantType.Teams;\n\t}\n\n\tgetParametrizedOptions() {\n\t\tconst options = new Map<string, number>();\n\t\tfor (const value of [20, 3, 5, 10, 40]) options.set(`+${value}`, value);\n\t\treturn options;\n\t}\n\n\tobtainPointsForMate() {\n\t\treturn this.pointsForMate;\n\t}\n}\n","import { throwOnNever } from \"@client/ts/baseTypes\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { InternalMove, InternalMoveSignature } from \"../../../MoveTree/MoveTreeInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"stalemateOptions\";\nexport const stalemateOptionsValues = {\n\tstalemateLoses: \"loss\",\n\tstalemateWins: \"win\",\n\tstalemateDraws: \"draw\"\n} as const;\nexport type CustomStalemateValue = (typeof stalemateOptionsValues)[keyof typeof stalemateOptionsValues];\nexport const verifyCustomStalemateValue = (v: string): v is CustomStalemateValue => Object.values<string>(stalemateOptionsValues).includes(v);\n\nexport class StalemateOptions extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(StalemateOptions);\n\t}\n\tprivate type: CustomStalemateValue | undefined;\n\tprivate isFFA = false;\n\n\tconstructor(type?: unknown) {\n\t\tsuper();\n\t\tif (typeof type === \"string\" && verifyCustomStalemateValue(type)) {\n\t\t\tthis.type = type;\n\t\t} else {\n\t\t\tthis.type = undefined;\n\t\t}\n\t}\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\n\tgetPublicProperties() {\n\t\tconst description =\n\t\t\tthis.type === \"draw\"\n\t\t\t\t? `Stalemate is a draw`\n\t\t\t\t: this.isFFA\n\t\t\t\t? `The remaining players share the points`\n\t\t\t\t: `The stalemated player ${this.type === \"loss\" ? \"loses\" : \"wins\"}`;\n\t\treturn {\n\t\t\tparameterValue: this.type,\n\t\t\tinformation: {\n\t\t\t\tname: \"Stalemate\",\n\t\t\t\tdescription,\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.minor,\n\t\t\t\tdisplayIcon: chessGlyphIndex.dollarSign\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\tconst matchArray = match.toLowerCase().match(/^Stalemate=(.+)$/i);\n\t\tif (matchArray) {\n\t\t\tconst presumedOption = matchArray[1];\n\t\t\tif (verifyCustomStalemateValue(presumedOption)) {\n\t\t\t\tthis.type = presumedOption;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn `Stalemate=${this.type ?? \"draw\"}`;\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\t\n\tgetParametrizedOptions() {\n\t\treturn new Map<string, CustomStalemateValue>([\n\t\t\t[\"Draw\", stalemateOptionsValues.stalemateDraws],\n\t\t\t[\"The stalemated player loses\", stalemateOptionsValues.stalemateLoses],\n\t\t\t[\"The stalemated player wins\", stalemateOptionsValues.stalemateWins]\n\t\t]);\n\t}\n\n\tinitDecoratorSettings() {\n\t\tif (this.type === undefined) {\n\t\t\tif (this.decorator.board.gameType.isFFA() && this.decorator.fenOptions.tag(\"dead\").filter(Boolean).length > 2) {\n\t\t\t\tthis.type = \"win\";\n\t\t\t\tthis.isFFA = true;\n\t\t\t} else {\n\t\t\t\tthis.type = \"draw\";\n\t\t\t\tthis.isFFA = false;\n\t\t\t}\n\t\t}\n\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n\n\tprocessInternalMove(internalMove: InternalMove): { stalemates: [boolean, boolean, boolean, boolean] } {\n\t\tconst currentTurn = this.decorator.sideToMove;\n\t\tconst returnValues = this.callHandler(\"processInternalMove\", arguments);\n\t\tif (internalMove.type === InternalMoveSignature.Stalemate) {\n\t\t\tconst pointsForMate = this.decorator.obtainPointsForMate();\n\t\t\tswitch (this.type) {\n\t\t\t\tcase \"loss\":\n\t\t\t\t\tif (!this.isFFA) {\n\t\t\t\t\t\tthis.decorator.points[currentTurn] += pointsForMate;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t// * Fallthrough\n\t\t\t\tcase \"draw\":\n\t\t\t\t\tthis.injectIntoBaseClass(function (this: FENData) {\n\t\t\t\t\t\tthis.spreadPointsBetweenPlayersEvenly();\n\t\t\t\t\t})();\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"win\":\n\t\t\t\t\tthis.decorator.points[this.decorator.sideToMove] += pointsForMate;\n\t\t\t\t\tbreak;\n\t\t\t\tcase undefined:\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrowOnNever(this.type);\n\t\t\t}\n\n\t\t\tif (this.decorator.getRealPlayers() === 1) {\n\t\t\t\tthis.decorator.assignGeneralTermination(\"Stalemate\", currentTurn);\n\t\t\t}\n\t\t}\n\n\t\treturn returnValues;\n\t}\n}\n","import type { Tuple } from \"@client/ts/baseTypes\";\nimport { compareCoordinates } from \"../../../Board/BoardInterface\";\nimport { FENData } from \"../../../FENData/FENData\";\nimport { PostMoveResults } from \"../../../FENData/FENDataInterface\";\nimport { colors, totalPlayers, VariantType } from \"../../../GameInformation/GameData\";\nimport { createPieceFromData } from \"../../../GameInformation/GameUnits/PieceString\";\nimport { pieceControlConfigSettings } from \"../../../PieceControl/PieceControlInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { VariantRuleAllowedChecks, variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { DeadKingWalking } from \"./DeadKingWalking\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"takeover\";\nexport class Takeover extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(Takeover);\n\t}\n\treadonly dependencies = new Map([[DeadKingWalking, []]]);\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Takeover\",\n\t\t\t\tdescription: \"Checkmate players to take control of their pieces\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.phased,\n\t\t\t\tdisplayIcon: chessGlyphIndex.exchange\n\t\t\t}\n\t\t} as const;\n\t}\n\tmatchesPGNDeclaration(match: string) {\n\t\treturn /^Takeover$/i.test(match);\n\t}\n\tserializeToParsingForm(): string {\n\t\treturn \"Takeover\";\n\t}\n\tisDisabled({ gameType }: VariantRuleAllowedChecks): boolean {\n\t\treturn gameType === VariantType.Teams;\n\t}\n\n\taffectOptions(): PostMoveResults {\n\t\tconst sideToMove = this.decorator.sideToMove,\n\t\t\tdetectedPieces = this.decorator.board.getPlayerPieces();\n\t\tconst results = this.callHandler(\"affectOptions\", arguments);\n\t\tfor (const color of colors) {\n\t\t\tif (!results.checkmates[color]) continue;\n\t\t\tfor (const piece of detectedPieces[sideToMove]) {\n\t\t\t\tconst pieceString = this.decorator.board.board[piece[0]][piece[1]];\n\t\t\t\tif (!pieceString.isDead() || pieceControlConfigSettings[pieceString.piece].moveGenerationSettings.isPawn) continue;\n\t\t\t\tthis.decorator.board.board[piece[0]][piece[1]] = createPieceFromData(sideToMove, pieceString.piece);\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t}\n\n\tcountTotalPointsOnBoard(): [number, number, number, number] {\n\t\tconst zombieImmune = this.decorator.fenOptions.tag(\"zombieImmune\"),\n\t\t\troyals = this.decorator.fenOptions.tag(\"royal\");\n\t\tconst resultingPoints: Tuple<number, typeof totalPlayers> = [0, 0, 0, 0];\n\t\tthis.decorator.board.getPlayerPieces().forEach((army, color) => {\n\t\t\tif (zombieImmune[color]) return;\n\t\t\tconst royal = royals[color];\n\t\t\tfor (const coordinate of army) {\n\t\t\t\tif (royal && compareCoordinates(coordinate, royal)) {\n\t\t\t\t\tresultingPoints[color] += this.decorator.obtainPointsForMate();\n\t\t\t\t} else {\n\t\t\t\t\tconst piece = this.decorator.board.board[coordinate[0]][coordinate[1]].piece;\n\t\t\t\t\tresultingPoints[color] += pieceControlConfigSettings[piece].points.singlesPoints;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn resultingPoints;\n\t}\n}\n","import { FENData } from \"../../../FENData/FENData\";\nimport { PostMoveResults } from \"../../../FENData/FENDataInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport type { VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"threefoldRepetition\";\nexport class ThreefoldRepetition extends VariantRule<typeof FENData, typeof tag> implements VariantRuleHandler<FENData> {\n\tstatic {\n\t\tVariantRule.initVariantRule(ThreefoldRepetition);\n\t}\n\tprivate totalRepetitionsRequired: number;\n\n\tconstructor(totalRepetitions?: unknown) {\n\t\tsuper();\n\t\tif (typeof totalRepetitions === \"number\" && totalRepetitions > 0) {\n\t\t\tthis.totalRepetitionsRequired = totalRepetitions;\n\t\t} else {\n\t\t\tthis.totalRepetitionsRequired = 3;\n\t\t}\n\t}\n\n\tgetDecoratorType() {\n\t\treturn FENData;\n\t}\n\n\tgetPublicProperties() {\n\t\tconst isDisabled = this.totalRepetitionsRequired === Infinity;\n\t\treturn {\n\t\t\tparameterValue: this.totalRepetitionsRequired,\n\t\t\tinformation: {\n\t\t\t\tname: \"N-fold Repetition\",\n\t\t\t\ttextualForm: \"\",\n\t\t\t\tdescription: isDisabled\n\t\t\t\t\t? \"3-fold repetition disabled\"\n\t\t\t\t\t: `After position repeats ${this.totalRepetitionsRequired} times game is over`,\n\t\t\t\ttag\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string) {\n\t\tconst matchArray = match.match(/^ThreefoldRepetition=((?:\\d+)|(?:Infinity))$/i);\n\t\tif (matchArray) {\n\t\t\tthis.totalRepetitionsRequired = Number(matchArray[1]);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn `ThreefoldRepetition=${this.totalRepetitionsRequired}`;\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tgetParametrizedOptions() {\n\t\tconst options = new Map<string, number>();\n\t\tfor (const value of [3, 2, 5]) options.set(`${value}-fold`, value);\n\t\toptions.set(\"Unlimited\", Infinity);\n\t\treturn options;\n\t}\n\n\taffectOptions(): PostMoveResults {\n\t\tconst results = this.callHandler(\"affectOptions\", arguments);\n\t\tconst repetitions = this.decorator.board.moves.getHash(this.decorator.board.moves.constructPreliminaryHashString(this.decorator.board));\n\n\t\tif (repetitions + 1 >= this.totalRepetitionsRequired) {\n\t\t\tthis.decorator.assignGeneralTermination(\"Threefold Repetition\");\n\t\t\tthis.injectIntoBaseClass(function (this: FENData) {\n\t\t\t\tthis.spreadPointsBetweenPlayersEvenly();\n\t\t\t})();\n\t\t}\n\n\t\treturn results;\n\t}\n}\n","import { createTuple } from \"../../../../../baseTypes\";\nimport { totalPlayers } from \"../../../GameInformation/GameData\";\nimport { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport type { ControlConfiguration } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"anyCapture\";\nexport class AnyCapture extends VariantRule<typeof PieceControl, typeof tag> implements VariantRuleHandler<PieceControl> {\n\tstatic {\n\t\tVariantRule.initVariantRule(AnyCapture);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn PieceControl;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Any Capture\",\n\t\t\t\tdescription: \"You can capture your own pieces\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.autogenous,\n\t\t\t\tdisplayIcon: chessGlyphIndex.captureAnything\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^AnyCapture$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"AnyCapture\";\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tconfigure(configuration: Required<ControlConfiguration>) {\n\t\tconst modifiedConfiguration: Required<ControlConfiguration> = {\n\t\t\t...configuration,\n\t\t\timmunePieces: createTuple(false, totalPlayers)\n\t\t};\n\n\t\tfor (const decorator of this.wrappingDecorators) {\n\t\t\tif (decorator.configure) return decorator.configure(modifiedConfiguration);\n\t\t}\n\t\treturn PieceControl.prototype.configure.call(this.decorator, modifiedConfiguration);\n\t}\n}\n","import { PieceLetter, verifyPieceLetter, pieceControlConfigSettings, defaultPieces } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { compileEnumeration, prefixWithIndefiniteArticle } from \"@client/ts/utils/StringFormatUtils\";\nimport { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport { VariantRule } from \"../../VariantRule\";\nimport type { VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"promotionPieces\";\nexport class PromoteTo extends VariantRule<typeof PieceControl, typeof tag> implements VariantRuleHandler<PieceControl> {\n\tstatic {\n\t\tVariantRule.initVariantRule(PromoteTo);\n\t}\n\n\tstatic filterPromotionPieceString(pieces: string): PieceLetter[] {\n\t\tconst inputPromotion = pieces.split(\"\").filter<PieceLetter>((p): p is PieceLetter => verifyPieceLetter(p));\n\t\treturn inputPromotion.length ? inputPromotion : [defaultPieces.queen, defaultPieces.rook, defaultPieces.bishop, defaultPieces.knight];\n\t}\n\n\tprivate promotionPieces: PieceLetter[];\n\tconstructor(promotionPieces?: unknown) {\n\t\tsuper();\n\t\tthis.promotionPieces =\n\t\t\tArray.isArray(promotionPieces) &&\n\t\t\tpromotionPieces.every<PieceLetter>((p): p is PieceLetter => typeof p === \"string\" && verifyPieceLetter(p))\n\t\t\t\t? promotionPieces\n\t\t\t\t: [defaultPieces.queen, defaultPieces.rook, defaultPieces.bishop, defaultPieces.knight];\n\t}\n\n\tgetDecoratorType() {\n\t\treturn PieceControl;\n\t}\n\n\tgetPublicProperties() {\n\t\tconst pieceNames = this.promotionPieces.reduce<string[]>((p, c) => {\n\t\t\tconst pieceName = pieceControlConfigSettings[c].naming.name;\n\t\t\treturn [...p, pieceName];\n\t\t}, []);\n\t\treturn {\n\t\t\tparameterValue: this.promotionPieces,\n\t\t\tinformation: {\n\t\t\t\tname: \"Pawns promote to\",\n\t\t\t\ttextualForm: \"\",\n\t\t\t\tdescription: `Pawns promote to ${prefixWithIndefiniteArticle(compileEnumeration(pieceNames))}`,\n\t\t\t\ttag\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\tconst matchArray = match.match(/^PromoteTo=([A-ZxΘ]+)$/i);\n\t\tif (matchArray) {\n\t\t\tthis.promotionPieces = PromoteTo.filterPromotionPieceString(matchArray[1]);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn `PromoteTo=${this.promotionPieces.join(\"\")}`;\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tinitDecoratorSettings(): void {\n\t\tif (this.decorator.hooks.usePawnLogic) {\n\t\t\tthis.decorator.hooks.usePawnLogic.promotionPieces = this.promotionPieces;\n\t\t}\n\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n}\n","import { formatOrdinalNumber } from \"@client/ts/utils/StringFormatUtils\";\nimport { boardDimension } from \"../../../GameInformation/GameData\";\nimport { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport { VariantRule } from \"../../VariantRule\";\nimport type { VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"promotionRank\";\nexport const disabledRank = 99;\nexport class PromotionRank extends VariantRule<typeof PieceControl, typeof tag> implements VariantRuleHandler<PieceControl> {\n\tstatic {\n\t\tVariantRule.initVariantRule(PromotionRank);\n\t}\n\n\tprivate promotionRank: number;\n\tconstructor(promotionRank?: unknown) {\n\t\tsuper();\n\t\tthis.promotionRank = typeof promotionRank === \"number\" ? promotionRank : 8;\n\t}\n\n\tgetDecoratorType() {\n\t\treturn PieceControl;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: this.promotionRank,\n\t\t\tinformation: {\n\t\t\t\tname: \"Promotion Rank\",\n\t\t\t\ttextualForm: \"\",\n\t\t\t\tdescription: `on the ${this.promotionRank}${formatOrdinalNumber(this.promotionRank)} rank`,\n\t\t\t\ttag\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\tconst matchArray = match.match(/^Prom=(\\d\\d?)$/i);\n\t\tif (matchArray) {\n\t\t\tthis.promotionRank = Number(matchArray[1]);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn `Prom=${this.promotionRank}`;\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tgetParametrizedOptions() {\n\t\tconst resultingMap = new Map<string, number>();\n\t\tfor (let i = 1; i <= boardDimension; i++) {\n\t\t\tresultingMap.set(String(i) + formatOrdinalNumber(i), i);\n\t\t}\n\t\tresultingMap.set(\"No promotion\", disabledRank);\n\t\treturn resultingMap;\n\t}\n\n\tinitDecoratorSettings(): void {\n\t\tif (this.decorator.hooks.usePawnLogic) {\n\t\t\tthis.decorator.hooks.usePawnLogic.promotionRanks = [\n\t\t\t\tboardDimension - this.promotionRank,\n\t\t\t\tthis.promotionRank - 1,\n\t\t\t\tthis.promotionRank - 1,\n\t\t\t\tboardDimension - this.promotionRank\n\t\t\t];\n\t\t}\n\n\t\tfor (const decorator of this.wrappingDecorators) decorator.initDecoratorSettings?.();\n\t}\n}\n","import { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\nimport { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport { AttackType, PieceControlConfiguration } from \"../../../PieceControl/PieceControlInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"royalsCannotCapture\";\nexport class RoyalsCannotCapture extends VariantRule<typeof PieceControl, typeof tag> implements VariantRuleHandler<PieceControl> {\n\tgetDecoratorType() {\n\t\treturn PieceControl;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Royals Cannot Capture\",\n\t\t\t\tdescription: \"Royal pieces cannot capture pieces.\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.autogenous,\n\t\t\t\tdisplayIcon: chessGlyphIndex.handshake\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(): boolean {\n\t\treturn false;\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"\";\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tgetMovePossibility(configuration: PieceControlConfiguration): boolean {\n\t\tconst royal = this.decorator.fenData.fenOptions.tag(\"royal\")[this.decorator.color];\n\t\tif (royal && royal[0] === this.decorator.i && royal[1] === this.decorator.j) {\n\t\t\tconfiguration.special = AttackType.MoveOnly;\n\t\t}\n\n\t\tfor (const decorator of this.wrappingDecorators) {\n\t\t\tif (decorator.getMovePossibility) return decorator.getMovePossibility(configuration);\n\t\t}\n\t\treturn PieceControl.prototype.getMovePossibility.call(this.decorator, configuration);\n\t}\n}\n","import { AttackType } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"sideways\";\nexport class Sideways extends VariantRule<typeof PieceControl, typeof tag> implements VariantRuleHandler<PieceControl> {\n\tstatic {\n\t\tVariantRule.initVariantRule(Sideways);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn PieceControl;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Sideways\",\n\t\t\t\tdescription: \"Pawns can also move one square sideways\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.autogenous,\n\t\t\t\tdisplayIcon: chessGlyphIndex.pawnSideways\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^Sideways$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"Sideways\";\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tgetPossibleCells() {\n\t\tif (this.decorator.hooks.usePawnLogic) {\n\t\t\tthis.injectIntoBaseClass(function (this: PieceControl) {\n\t\t\t\tthis.generateJumpAttack({ displacement: [0, -1], special: AttackType.MoveOnly });\n\t\t\t\tthis.generateJumpAttack({ displacement: [0, 1], special: AttackType.MoveOnly });\n\t\t\t})();\n\t\t}\n\n\t\tfor (const decorator of this.wrappingDecorators) {\n\t\t\tif (decorator.getPossibleCells) return decorator.getPossibleCells();\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\tconst prototype: PieceControl = Object.getPrototypeOf(this.decorator);\n\t\tprototype.getPossibleCells.call(this.decorator);\n\t}\n}\n","import { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport { AttackType, PieceControlConfiguration } from \"../../../PieceControl/PieceControlInterface\";\nimport { VariantRule } from \"../../VariantRule\";\nimport type { VariantRuleHandler } from \"../../VariantRuleInterface\";\n\nconst tag = \"stonewall\";\nexport class Stonewall extends VariantRule<typeof PieceControl, typeof tag> implements VariantRuleHandler<PieceControl> {\n\tstatic {\n\t\tVariantRule.initVariantRule(Stonewall);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn PieceControl;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Stonewall\",\n\t\t\t\ttextualForm: \"\",\n\t\t\t\tdescription: \"Dead pieces cannot be captured\",\n\t\t\t\ttag\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^Deadwall$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"Deadwall\";\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tgetMovePossibility(configuration: PieceControlConfiguration): boolean {\n\t\tconst {\n\t\t\tdisplacement: [i, j],\n\t\t\tspecial\n\t\t} = configuration;\n\t\tlet modifiedConfiguration = configuration;\n\n\t\tif (\n\t\t\t(special === AttackType.AttackOnly || special === AttackType.Normal || special === AttackType.RayGen) &&\n\t\t\tthis.decorator.board[i] &&\n\t\t\tthis.decorator.board[i][j] &&\n\t\t\tthis.decorator.board[i][j].isDead()\n\t\t) {\n\t\t\tmodifiedConfiguration = {\n\t\t\t\t...configuration,\n\t\t\t\tspecial: AttackType.MoveOnly\n\t\t\t};\n\t\t}\n\n\t\tfor (const decorator of this.wrappingDecorators) {\n\t\t\tif (decorator.getMovePossibility) return decorator.getMovePossibility(configuration);\n\t\t}\n\t\treturn PieceControl.prototype.getMovePossibility.call(this.decorator, modifiedConfiguration);\n\t}\n}\n","import type { ControlConfiguration } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { PieceControl } from \"../../../PieceControl/PieceControl\";\nimport { VariantRule } from \"../../VariantRule\";\nimport { variantRuleColors, VariantRuleHandler } from \"../../VariantRuleInterface\";\nimport { chessGlyphIndex } from \"@client/fonts/chessGlyphIndex\";\n\nconst tag = \"torpedo\";\nexport class Torpedo extends VariantRule<typeof PieceControl, typeof tag> implements VariantRuleHandler<PieceControl> {\n\tstatic {\n\t\tVariantRule.initVariantRule(Torpedo);\n\t}\n\n\tgetDecoratorType() {\n\t\treturn PieceControl;\n\t}\n\n\tgetPublicProperties() {\n\t\treturn {\n\t\t\tparameterValue: true,\n\t\t\tinformation: {\n\t\t\t\tname: \"Torpedo\",\n\t\t\t\tdescription: \"Pawns can always jump two squares\",\n\t\t\t\ttag,\n\t\t\t\tcolor: variantRuleColors.autogenous,\n\t\t\t\tdisplayIcon: chessGlyphIndex.torpedo\n\t\t\t}\n\t\t} as const;\n\t}\n\n\tmatchesPGNDeclaration(match: string): boolean {\n\t\treturn /^Torpedo$/i.test(match);\n\t}\n\n\tserializeToParsingForm(): string {\n\t\treturn \"Torpedo\";\n\t}\n\n\tisDisabled(): boolean {\n\t\treturn false;\n\t}\n\n\tconfigure(configuration: ControlConfiguration) {\n\t\tconst modifiedConfiguration: ControlConfiguration = {\n\t\t\t...configuration,\n\t\t\tbaseRank: true\n\t\t};\n\n\t\tfor (const decorator of this.wrappingDecorators) {\n\t\t\tif (decorator.configure) return decorator.configure(modifiedConfiguration);\n\t\t}\n\t\tPieceControl.prototype.configure.call(this.decorator, modifiedConfiguration);\n\t}\n}\n","import type { FunctionType, Tuple } from \"@client/ts/baseTypes\";\nimport { createHexColor, IndexedColor } from \"@client/ts/interfaces/Colors\";\nimport type { FENOptionsTags } from \"@moveGeneration/FENData/FENOptions/FENOptionsTagsInterface\";\nimport type { Coordinate } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport type { Board } from \"../Board/Board\";\nimport type { FENData } from \"../FENData/FENData\";\nimport type { totalPlayers, VariantType } from \"../GameInformation/GameData\";\nimport type { PieceControl } from \"../PieceControl/PieceControl\";\nimport type { PieceLetter } from \"../PieceControl/PieceControlInterface\";\nimport type { CustomStalemateValue } from \"./VariantRuleDefinitions/FENDataDecorators/StalemateOptions\";\nimport type { StripPieceStringObjects } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\n\nexport interface VariantHandlerTarget<C extends AllowedHandlerClasses> {\n\t__baseClass: C;\n\tinitDecoratorSettings(): void;\n}\n\nexport type FunctionProperties<T> = Pick<T, { [K in keyof T]: T[K] extends FunctionType ? K : never }[keyof T]>;\nexport type AllowedHandlerClasses = Board | FENData | PieceControl;\nexport type AllowedSuperClasses = typeof Board | typeof FENData | typeof PieceControl;\n\nexport type VariantRuleHandler<C extends AllowedHandlerClasses> = {\n\t[K in keyof FunctionProperties<C>]?: C[K];\n};\n\ninterface BaseVariantRuleInformation<K extends keyof VariantDataRules> {\n\tname: string;\n\tdescription: string;\n\ttag: K;\n}\ninterface TextualVariantRuleInformation<K extends keyof VariantDataRules> extends BaseVariantRuleInformation<K> {\n\ttextualForm: string;\n\tcolor?: never;\n\tdisplayIcon?: never;\n}\ninterface StandardVariantRuleInformation<K extends keyof VariantDataRules> extends BaseVariantRuleInformation<K> {\n\ttextualForm?: never;\n\tcolor: IndexedColor;\n\tdisplayIcon: string;\n}\nexport type VariantRuleInformation<K extends keyof VariantDataRules> =\n\t| Readonly<StandardVariantRuleInformation<K>>\n\t| Readonly<TextualVariantRuleInformation<K>>;\n\nexport interface VariantRuleAllowedChecks {\n\treadonly variantDataRules: VariantDataRules | StripPieceStringObjects<VariantDataRules>;\n\treadonly gameType: VariantType;\n\treadonly fenTags: FENOptionsTags;\n}\n\nexport interface VariantDataRules {\n\talternativeTeams: number | false;\n\tblindfold: boolean;\n\tcaptureTheKing: boolean;\n\tchess960: number | false;\n\tcrazyhouse: boolean;\n\tghostboard: boolean;\n\tparadigmChess30: number | false;\n\ttaboo: boolean;\n\tenPassant: boolean;\n\tfatalCapture: boolean;\n\tpiecesGoToBanks: boolean;\n\tanyCapture: boolean;\n\tpromotionPieces: PieceLetter[] | false;\n\tpromotionRank: number | false;\n\tsideways: boolean;\n\tstonewall: boolean;\n\ttorpedo: boolean;\n\toppositeSideCastling: boolean;\n\tsetupChess: number | false;\n\tpiecesFaceCenter: boolean;\n\troyalsCannotCapture: boolean;\n\tseirawanSetup: boolean;\n\tatomic: boolean;\n\tfogOfWar: boolean;\n\tanonymous: boolean;\n\tsemiAnonymous: boolean;\n\tstalemateOptions: CustomStalemateValue | undefined;\n\tforcedCapture: boolean;\n\tgiveaway: boolean;\n\tallowPassing: boolean;\n\tpointsForMate: number | false;\n\ttakeover: boolean;\n\tkingOfTheHill: Coordinate[] | false;\n\tbarePieceRule: boolean;\n\tduckChess: boolean;\n\tplayForMate: boolean;\n\toppositeMultiplier: number | false;\n\tnCheck: Tuple<number, typeof totalPlayers> | false;\n\tselfCheck: boolean;\n\tfiftyMoveRule: number | false;\n\tthreefoldRepetition: number | false;\n\tselfPartner: boolean;\n\tdeadKingWalking: boolean;\n}\n\nexport const variantRuleColors = {\n\tminor: createHexColor(\"#e01492\"),\n\tvisual: createHexColor(\"#ad5709\"),\n\tautogenous: createHexColor(\"#f2791e\"),\n\tmetadata: createHexColor(\"#89a5d3\"),\n\tstartingPosition: createHexColor(\"#7030a0\"),\n\textending: createHexColor(\"#fbaa07\"),\n\twidespread: createHexColor(\"#d40c0c\"),\n\tpointsAlternation: createHexColor(\"#00b0f0\"),\n\tphased: createHexColor(\"#00b050\")\n} as const;\n","import { Board } from \"../Board/Board\";\nimport { FENData } from \"../FENData/FENData\";\nimport { PieceControl } from \"../PieceControl/PieceControl\";\nimport { ForcedCapture } from \"./VariantRuleDefinitions/BoardDecorators/ForcedCapture\";\nimport { SeirawanSetup } from \"./VariantRuleDefinitions/BoardDecorators/SeirawanSetup\";\nimport { SetupChess } from \"./VariantRuleDefinitions/BoardDecorators/SetupChess\";\nimport { Taboo } from \"./VariantRuleDefinitions/BoardDecorators/Taboo\";\nimport { FiftyMoveRule } from \"./VariantRuleDefinitions/FENDataDecorators/FiftyMoveRule\";\nimport { Giveaway } from \"./VariantRuleDefinitions/FENDataDecorators/Giveaway\";\nimport { StalemateOptions } from \"./VariantRuleDefinitions/FENDataDecorators/StalemateOptions\";\nimport { ThreefoldRepetition } from \"./VariantRuleDefinitions/FENDataDecorators/ThreefoldRepetition\";\nimport { PromoteTo } from \"./VariantRuleDefinitions/PieceControlDecorators/PromoteTo\";\nimport { PromotionRank } from \"./VariantRuleDefinitions/PieceControlDecorators/PromotionRank\";\nimport { VariantRule, VariantRulePublicProperties } from \"./VariantRule\";\nimport type { AllowedSuperClasses, VariantDataRules, VariantRuleAllowedChecks } from \"./VariantRuleInterface\";\n\nexport interface VariantRuleParsingTypes {\n\tboardDecorators: Array<VariantRule<typeof Board, keyof VariantDataRules>>;\n\tpieceControlDecorators: Array<VariantRule<typeof PieceControl, keyof VariantDataRules>>;\n\tfenDataDecorators: Array<VariantRule<typeof FENData, keyof VariantDataRules>>;\n\t[Symbol.iterator]: () => Generator<VariantRule<AllowedSuperClasses, keyof VariantDataRules>, void>;\n}\nexport const createBaseParsingTypes = (): VariantRuleParsingTypes => ({\n\tboardDecorators: [],\n\tpieceControlDecorators: [],\n\tfenDataDecorators: [],\n\t*[Symbol.iterator]() {\n\t\tfor (const rv of [...this.boardDecorators, ...this.pieceControlDecorators, ...this.fenDataDecorators]) {\n\t\t\tconst variantRule: VariantRule<AllowedSuperClasses, keyof VariantDataRules> = rv;\n\t\t\tyield variantRule;\n\t\t}\n\t}\n});\n\nconst variantRulePriorities = [SetupChess, ForcedCapture, Taboo, SeirawanSetup, PromoteTo, PromotionRank, Giveaway].reverse();\n\nfunction differentiateDecoratorMethods(\n\tvariant: VariantRule<AllowedSuperClasses, keyof VariantDataRules>,\n\tmethods: {\n\t\t[K in keyof Omit<VariantRuleParsingTypes, symbol>]: (\n\t\t\tvariant: VariantRuleParsingTypes[K] extends Array<VariantRule<infer C, keyof VariantDataRules>>\n\t\t\t\t? VariantRule<C, keyof VariantDataRules>\n\t\t\t\t: never\n\t\t) => void;\n\t}\n) {\n\tconst verifyDecorator = <C extends typeof Board | typeof PieceControl | typeof FENData>(\n\t\trv: VariantRule<AllowedSuperClasses, keyof VariantDataRules>,\n\t\ttype: C\n\t): rv is VariantRule<C, keyof VariantDataRules> => rv.getDecoratorType() === type;\n\n\tif (verifyDecorator(variant, Board)) {\n\t\tmethods.boardDecorators(variant);\n\t} else if (verifyDecorator(variant, PieceControl)) {\n\t\tmethods.pieceControlDecorators(variant);\n\t} else if (verifyDecorator(variant, FENData)) {\n\t\tmethods.fenDataDecorators(variant);\n\t}\n}\n\nexport function parseVariantRules(rules: string): VariantRuleParsingTypes {\n\ttype VariantRuleConstructor = new (...args: unknown[]) => VariantRule<AllowedSuperClasses, keyof VariantDataRules>;\n\tconst variantClasses = new Set<VariantRuleConstructor>();\n\tconst variantRuleList = new Set<VariantRule<AllowedSuperClasses, keyof VariantDataRules>>();\n\tconst forcedRules = [PromotionRank, PromoteTo, StalemateOptions, FiftyMoveRule, ThreefoldRepetition];\n\tfor (const variantRule of VariantRule.variantRuleList) {\n\t\tconst rv = new variantRule();\n\t\tvariantRuleList.add(rv);\n\t\tvariantClasses.add(variantRule);\n\t}\n\n\tconst finalList = createBaseParsingTypes();\n\tconst rulesStrings = rules.split(/\\s+/);\n\n\tconst insertVariantRule = (variant: VariantRule<AllowedSuperClasses, keyof VariantDataRules>) => {\n\t\tdifferentiateDecoratorMethods(variant, {\n\t\t\tboardDecorators: (variant: VariantRule<typeof Board, keyof VariantDataRules>) => {\n\t\t\t\tfinalList.boardDecorators.push(variant);\n\t\t\t},\n\t\t\tpieceControlDecorators: (variant: VariantRule<typeof PieceControl, keyof VariantDataRules>) => {\n\t\t\t\tfinalList.pieceControlDecorators.push(variant);\n\t\t\t},\n\t\t\tfenDataDecorators: (variant: VariantRule<typeof FENData, keyof VariantDataRules>) => {\n\t\t\t\tfinalList.fenDataDecorators.push(variant);\n\t\t\t}\n\t\t});\n\n\t\tfor (const [dependency, dependencyArgs] of variant.dependencies) {\n\t\t\tif (\n\t\t\t\t!Object.values(finalList).some((decorators: Array<VariantRule<AllowedSuperClasses, keyof VariantDataRules>>) =>\n\t\t\t\t\tdecorators.some((rv) => rv instanceof dependency)\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tinsertVariantRule(new dependency(...dependencyArgs));\n\t\t\t}\n\t\t}\n\t};\n\n\tfor (const variant of variantRuleList) {\n\t\tfor (const ruleString of rulesStrings) {\n\t\t\tif (variant.matchesPGNDeclaration(ruleString)) {\n\t\t\t\tinsertVariantRule(variant);\n\t\t\t\tvariantRuleList.delete(variant);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (const forcedRule of forcedRules) {\n\t\tconst variant = new forcedRule();\n\t\tdifferentiateDecoratorMethods(variant, {\n\t\t\tboardDecorators: (variant: VariantRule<typeof Board, keyof VariantDataRules>) => {\n\t\t\t\tif (!finalList.boardDecorators.some((rule) => rule instanceof forcedRule)) {\n\t\t\t\t\tfinalList.boardDecorators.push(variant);\n\t\t\t\t}\n\t\t\t},\n\t\t\tpieceControlDecorators: (variant: VariantRule<typeof PieceControl, keyof VariantDataRules>) => {\n\t\t\t\tif (!finalList.pieceControlDecorators.some((rule) => rule instanceof forcedRule)) {\n\t\t\t\t\tfinalList.pieceControlDecorators.push(variant);\n\t\t\t\t}\n\t\t\t},\n\t\t\tfenDataDecorators: (variant: VariantRule<typeof FENData, keyof VariantDataRules>) => {\n\t\t\t\tif (!finalList.fenDataDecorators.some((rule) => rule instanceof forcedRule)) {\n\t\t\t\t\tfinalList.fenDataDecorators.push(variant);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tfor (const rule of variantRulePriorities) {\n\t\tconst resultingRule = new rule();\n\t\tdifferentiateDecoratorMethods(resultingRule, {\n\t\t\tboardDecorators: () => {\n\t\t\t\tconst index = finalList.boardDecorators.findIndex((c) => c instanceof rule);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tfinalList.boardDecorators.unshift(finalList.boardDecorators.splice(index, 1)[0]);\n\t\t\t\t}\n\t\t\t},\n\t\t\tpieceControlDecorators: () => {\n\t\t\t\tconst index = finalList.pieceControlDecorators.findIndex((c) => c instanceof rule);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tfinalList.pieceControlDecorators.unshift(finalList.pieceControlDecorators.splice(index, 1)[0]);\n\t\t\t\t}\n\t\t\t},\n\t\t\tfenDataDecorators: () => {\n\t\t\t\tconst index = finalList.fenDataDecorators.findIndex((c) => c instanceof rule);\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tfinalList.fenDataDecorators.unshift(finalList.fenDataDecorators.splice(index, 1)[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\treturn finalList;\n}\n\nexport function compileVariantRuleData(rules: VariantRuleParsingTypes): VariantDataRules {\n\tconst finalObject: Partial<VariantDataRules> = {};\n\tconst variantRuleList = VariantRule.variantRuleList.map((rv) => new rv());\n\tfor (const rule of variantRuleList) {\n\t\tfinalObject[rule.getPublicProperties().information.tag] = false;\n\t}\n\n\tconst setFinalObjectProperty = <K extends keyof VariantDataRules>(properties: VariantRulePublicProperties<K>) => {\n\t\tfinalObject[properties.information.tag] = properties.parameterValue;\n\t};\n\n\tfor (const rule of rules) setFinalObjectProperty(rule.getPublicProperties());\n\treturn finalObject as VariantDataRules;\n}\n\nexport function copyVariantRules<T extends AllowedSuperClasses>(\n\trvs: Array<VariantRule<T, keyof VariantDataRules>>\n): Array<VariantRule<T, keyof VariantDataRules>> {\n\treturn rvs.map((rv) => {\n\t\tconst parameterValue = rv.getPublicProperties().parameterValue;\n\t\tconst parameterArray = parameterValue !== false ? [parameterValue] : [];\n\t\treturn new rv.constructor(parameterArray);\n\t});\n}\n\nexport function validateVariantRules(board: Board) {\n\tconst configuration: VariantRuleAllowedChecks = {\n\t\tvariantDataRules: board.variantData,\n\t\tgameType: board.gameType.type,\n\t\tfenTags: board.data.fenOptions.tags\n\t};\n\treturn {\n\t\t...board.variantRules,\n\t\tboardDecorators: board.variantRules.boardDecorators.filter((rv) => !rv.isDisabled(configuration)),\n\t\tpieceControlDecorators: board.variantRules.pieceControlDecorators.filter((rv) => !rv.isDisabled(configuration)),\n\t\tfenDataDecorators: board.variantRules.fenDataDecorators.filter((rv) => !rv.isDisabled(configuration))\n\t};\n}\n","import { createTupleFromCallback, Tuple } from \"@client/ts/baseTypes\";\nimport {\n\tcolors,\n\tGamePlayerData,\n\tgetPlayerNameFromColor,\n\tplayerNames,\n\tTermination,\n\tTimeControl,\n\ttotalPlayers,\n\tvalidateTerminationString,\n\tVariantType\n} from \"@moveGeneration/GameInformation/GameData\";\nimport { truncateNumber } from \"@utils/NumberUtils\";\nimport type { VariantTag } from \"../TagInterface\";\nimport { tagNamesEqual, unwrapTag, wrapTag } from \"../Utils\";\n\nconst variantTypeTag = \"Variant\";\nexport const createVariantTypeTag = (): VariantTag<VariantType> => ({\n\ttag: \"variantType\",\n\tcurrentValue: VariantType.FFA,\n\tverifyTagInParsing(inputTag) {\n\t\treturn tagNamesEqual(inputTag, variantTypeTag);\n\t},\n\tparseTag(inputTag) {\n\t\tconst tagContents = unwrapTag(inputTag, variantTypeTag);\n\t\tfor (const type of Object.values(VariantType)) {\n\t\t\tif (tagContents === type) return type;\n\t\t}\n\n\t\treturn VariantType.FFA;\n\t},\n\tserialize(board) {\n\t\treturn wrapTag(variantTypeTag, board.gameType.type);\n\t}\n});\n\nconst variantDateTag = \"Date\";\nexport const createDateTag = (): VariantTag<Date> => ({\n\ttag: \"date\",\n\tcurrentValue: new Date(),\n\tverifyTagInParsing(inputTag) {\n\t\treturn tagNamesEqual(inputTag, variantDateTag);\n\t},\n\tparseTag(tagContents) {\n\t\treturn new Date(unwrapTag(tagContents, variantDateTag));\n\t},\n\tserialize(board) {\n\t\tif (!board.gameData.date) return;\n\t\tif (typeof board.gameData.date === \"object\") {\n\t\t\treturn wrapTag(variantDateTag, board.gameData.date.toUTCString());\n\t\t} else {\n\t\t\treturn wrapTag(variantDateTag, board.gameData.date);\n\t\t}\n\t}\n});\n\nconst variantSiteTag = \"Site\";\nexport const createSiteTag = (): VariantTag<string> => ({\n\ttag: \"site\",\n\tcurrentValue: \"\",\n\tverifyTagInParsing(inputTag) {\n\t\treturn tagNamesEqual(inputTag, variantSiteTag);\n\t},\n\tparseTag(tagContents) {\n\t\treturn unwrapTag(tagContents, variantSiteTag);\n\t},\n\tserialize(board) {\n\t\tif (!board.gameData.site) return;\n\t\treturn wrapTag(variantSiteTag, board.gameData.site);\n\t}\n});\n\nconst variantTimeControlTag = \"TimeControl\",\n\tgetDefaultTimeControl = (): TimeControl => ({ baseTime: 180, increment: 2, isDelay: false });\nexport const createTimeControlTag = (): VariantTag<TimeControl> => ({\n\ttag: \"timeControl\",\n\tcurrentValue: getDefaultTimeControl(),\n\tverifyTagInParsing(inputTag) {\n\t\treturn tagNamesEqual(inputTag, variantTimeControlTag);\n\t},\n\tparseTag(inputTag) {\n\t\tconst defaultTC = getDefaultTimeControl();\n\t\tconst matchArray = unwrapTag(inputTag, variantTimeControlTag)\n\t\t\t.match(/^((?:0\\.\\d\\d?)?|(?:\\d\\d?s?))(?:(?:(?:\\+|\\|)(\\d\\d?)(D?))|(\\smin))$/)\n\t\t\t?.slice(1);\n\n\t\tif (matchArray) {\n\t\t\tconst [minutesMatch, secondsMatch, delay] = matchArray;\n\t\t\tif (!secondsMatch) return defaultTC;\n\t\t\tdefaultTC.isDelay = delay ? true : false;\n\t\t\tif (/\\smin/.test(secondsMatch)) {\n\t\t\t\tdefaultTC.increment = 0;\n\t\t\t} else {\n\t\t\t\tdefaultTC.increment = Number(secondsMatch);\n\t\t\t}\n\t\t\tif (minutesMatch.endsWith(\"s\")) {\n\t\t\t\tdefaultTC.baseTime = Math.round(Number(minutesMatch.slice(0, -1)));\n\t\t\t} else {\n\t\t\t\tdefaultTC.baseTime = Number(minutesMatch) * 60;\n\t\t\t}\n\t\t}\n\n\t\treturn defaultTC;\n\t},\n\tserialize(board) {\n\t\tconst timeControl = board.gameData.timeControl;\n\t\tconst noIncrement = timeControl.increment === 0;\n\t\tlet timeControlString = \"\";\n\t\tif (timeControl.baseTime < 60) {\n\t\t\ttimeControlString += noIncrement ? `${timeControl.baseTime * 60} sec` : `${timeControl.baseTime * 60}s`;\n\t\t} else if (timeControl.baseTime > 60 && noIncrement) {\n\t\t\ttimeControlString += `${truncateNumber(timeControl.baseTime / 60, 1)} min`;\n\t\t} else {\n\t\t\ttimeControlString += truncateNumber(timeControl.baseTime / 60, 1);\n\t\t}\n\n\t\tif (!noIncrement) {\n\t\t\ttimeControlString += \"|\";\n\t\t\ttimeControlString += timeControl.increment;\n\t\t}\n\t\tif (timeControl.isDelay) {\n\t\t\ttimeControlString += \"D\";\n\t\t}\n\n\t\treturn wrapTag(variantTimeControlTag, timeControlString);\n\t}\n});\n\nconst variantTerminationTag = \"Termination\";\nexport const createTerminationTag = (): VariantTag<Termination | undefined> => ({\n\ttag: \"termination\",\n\tcurrentValue: undefined,\n\tverifyTagInParsing(inputTag) {\n\t\treturn tagNamesEqual(inputTag, variantTerminationTag);\n\t},\n\tparseTag(inputTag) {\n\t\tconst tagContents = unwrapTag(inputTag, variantTerminationTag);\n\t\treturn validateTerminationString(tagContents) ? tagContents : undefined;\n\t},\n\tserialize(board) {\n\t\tif (!board.gameData.termination) return;\n\t\treturn wrapTag(variantTerminationTag, board.gameData.termination);\n\t}\n});\n\nconst variantGameId = \"GameNr\";\nexport const createGameNumberTag = (): VariantTag<number | undefined> => ({\n\ttag: \"gameNumber\",\n\tcurrentValue: undefined,\n\tverifyTagInParsing(inputTag) {\n\t\treturn tagNamesEqual(inputTag, variantGameId);\n\t},\n\tparseTag(inputTag) {\n\t\tconst id = Number(unwrapTag(inputTag, variantGameId));\n\t\treturn isNaN(id) ? undefined : id;\n\t},\n\tserialize(board) {\n\t\tif (!board.gameData.gameNumber) return;\n\t\treturn wrapTag(variantGameId, board.gameData.gameNumber.toString());\n\t}\n});\n\nexport const createPlayerDataTag = (): VariantTag<Tuple<GamePlayerData, typeof totalPlayers>> => ({\n\ttag: \"playerData\",\n\tcurrentValue: createTupleFromCallback(() => ({}), totalPlayers),\n\tverifyTagInParsing(inputTag) {\n\t\tfor (const color of colors) {\n\t\t\tconst playerName = getPlayerNameFromColor(color);\n\t\t\tif (tagNamesEqual(inputTag, playerName) || tagNamesEqual(inputTag, `${playerName}Elo`)) return true;\n\t\t}\n\n\t\treturn false;\n\t},\n\tparseTag(inputTag) {\n\t\tfor (const color of colors) {\n\t\t\tconst playerName = getPlayerNameFromColor(color);\n\t\t\tconst newCurrentValue: Tuple<GamePlayerData, typeof totalPlayers> = [...this.currentValue];\n\t\t\tif (tagNamesEqual(inputTag, playerName)) {\n\t\t\t\tconst name = unwrapTag(inputTag, playerName);\n\t\t\t\tif (name) newCurrentValue[color] = { ...newCurrentValue[color], name };\n\t\t\t\treturn newCurrentValue;\n\t\t\t} else if (tagNamesEqual(inputTag, `${playerName}Elo`)) {\n\t\t\t\tconst elo = Number(unwrapTag(inputTag, playerName));\n\t\t\t\tif (!isNaN(elo)) newCurrentValue[color] = { ...newCurrentValue[color], elo };\n\t\t\t\treturn newCurrentValue;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"Tag does not match any player data signature\");\n\t},\n\tserialize(board) {\n\t\tconst uniqueResultingTags: string[] = [];\n\t\tfor (const color of colors) {\n\t\t\tconst playerData = board.gameData.players[color];\n\t\t\tif (playerData.elo) {\n\t\t\t\tuniqueResultingTags.push(wrapTag(`${playerNames[color]}Elo`, String(playerData.elo)));\n\t\t\t}\n\t\t\tif (playerData.name) {\n\t\t\t\tuniqueResultingTags.push(wrapTag(`${playerNames[color]}`, String(playerData.name)));\n\t\t\t}\n\t\t}\n\n\t\treturn uniqueResultingTags.join(\"\\n\");\n\t}\n});\n\nconst resultsTag = \"Results\";\nexport const createResultsTag = (): VariantTag<string> => ({\n\ttag: \"results\",\n\tcurrentValue: \"\",\n\tverifyTagInParsing(inputTag) {\n\t\treturn tagNamesEqual(inputTag, resultsTag);\n\t},\n\tparseTag(tagContents) {\n\t\treturn unwrapTag(tagContents, resultsTag);\n\t},\n\tserialize(board) {\n\t\tif (!board.gameData.result) return;\n\t\treturn wrapTag(resultsTag, board.gameData.result);\n\t}\n});\n","import { createBaseParsingTypes, parseVariantRules, VariantRuleParsingTypes } from \"@moveGeneration/VariantRules/VariantRuleSetup\";\nimport type { VariantTag } from \"../TagInterface\";\nimport { tagNamesEqual, unwrapTag, wrapTag } from \"../Utils\";\n\nconst variantRulesTag = \"RuleVariants\";\nexport const createVariantRulesTag = (): VariantTag<VariantRuleParsingTypes> => ({\n\ttag: \"variantRules\",\n\tcurrentValue: createBaseParsingTypes(),\n\tverifyTagInParsing(inputTag) {\n\t\treturn tagNamesEqual(inputTag, variantRulesTag);\n\t},\n\tparseTag(tagContents) {\n\t\treturn parseVariantRules(unwrapTag(tagContents, variantRulesTag));\n\t},\n\tserialize(board) {\n\t\tconst resultingRuleList: string[] = [];\n\t\tfor (const rule of board.variantRules) {\n\t\t\tconst serializedForm = rule.serializeToParsingForm();\n\t\t\tif (serializedForm) {\n\t\t\t\tresultingRuleList.push(serializedForm);\n\t\t\t}\n\t\t}\n\n\t\treturn wrapTag(variantRulesTag, resultingRuleList.join(\" \"));\n\t}\n});\n","import type { Board } from \"@moveGeneration/Board/Board\";\nimport { createFENDataTag } from \"./TagLogic/FENDataTag\";\nimport * as GenericTags from \"./TagLogic/GameMetadataTags\";\nimport { createVariantRulesTag } from \"./TagLogic/VariantRulesTag\";\n\nexport const createDefaultVariantTags = () => ({\n\tvariantType: GenericTags.createVariantTypeTag(),\n\tstartingPosition: createFENDataTag(),\n\tvariantRules: createVariantRulesTag(),\n\tdate: GenericTags.createDateTag(),\n\tsite: GenericTags.createSiteTag(),\n\ttimeControl: GenericTags.createTimeControlTag(),\n\ttermination: GenericTags.createTerminationTag(),\n\tgameNumber: GenericTags.createGameNumberTag(),\n\tplayerData: GenericTags.createPlayerDataTag(),\n\tresults: GenericTags.createResultsTag()\n});\nexport type VariantTags = ReturnType<typeof createDefaultVariantTags>;\n\nexport interface VariantTag<T> {\n\tcurrentValue: T;\n\treadonly tag: keyof VariantTags;\n\tverifyTagInParsing(inputTag: string): boolean;\n\tparseTag(tagContents: string): T;\n\tserialize(board: Board): string | undefined;\n}\n","import type { Board } from \"@moveGeneration/Board/Board\";\nimport type { GameData } from \"@moveGeneration/GameInformation/GameData\";\nimport { nonPlayablePieces } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport type { PieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { compileVariantRuleData } from \"@moveGeneration/VariantRules/VariantRuleSetup\";\nimport { parsePGN4Moves } from \"./Moves/ParsePGNMoves\";\nimport { serializePGNMoves } from \"./Moves/SerializePGNMoves\";\nimport { createDefaultVariantTags, VariantTags } from \"./TagInterface\";\n\nexport function parsePGN4(pgn4: string) {\n\tlet pgn4Tags: string[],\n\t\tpgn4Moves = \"\";\n\tconst match = pgn4.match(/(?=1\\.\\s*?[xA-ZΑ-ωa-n0-9-])/);\n\tif (match?.index) {\n\t\tpgn4Moves = pgn4.substring(match.index);\n\t\tpgn4Tags = pgn4\n\t\t\t.substring(0, match.index)\n\t\t\t.split(\"]\")\n\t\t\t.map((t) => t.trim());\n\t} else {\n\t\tpgn4Tags = pgn4.split(\"]\").map((t) => t.trim());\n\t}\n\tconst moves = pgn4Moves.length ? parsePGN4Moves(pgn4Moves) : [];\n\n\tconst variantTags = createDefaultVariantTags();\n\tlet wasFEN4set = false;\n\tfor (const input of pgn4Tags) {\n\t\tlet variantTag: keyof VariantTags;\n\t\tfor (variantTag in variantTags) {\n\t\t\tconst tag = variantTags[variantTag];\n\t\t\tif (Object.prototype.hasOwnProperty.call(variantTags, variantTag) && tag.verifyTagInParsing(input)) {\n\t\t\t\tif (variantTag === \"startingPosition\") wasFEN4set = true;\n\t\t\t\ttag.currentValue = tag.parseTag(input);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (!wasFEN4set) variantTags.startingPosition.currentValue.fenData.fenOptions.setTag(\"noCorners\", true);\n\n\tconst gameData: GameData = {\n\t\tsite: variantTags.site.currentValue,\n\t\tgameNumber: variantTags.gameNumber.currentValue,\n\t\tdate: variantTags.date.currentValue,\n\t\ttimeControl: variantTags.timeControl.currentValue,\n\t\tplayers: variantTags.playerData.currentValue,\n\t\ttermination: variantTags.termination.currentValue,\n\t\tresult: undefined\n\t};\n\n\tconst variantRuleData = compileVariantRuleData(variantTags.variantRules.currentValue);\n\tconst promotionPieces = Array.isArray(variantRuleData.promotionPieces) ? variantRuleData.promotionPieces : [];\n\n\tconst nonPlayablePieceValues: string[] = Object.values(nonPlayablePieces);\n\treturn {\n\t\tgameData,\n\t\tgameType: variantTags.variantType.currentValue,\n\t\tvariantRules: variantTags.variantRules.currentValue,\n\t\tvariantRuleData,\n\t\tboard: variantTags.startingPosition.currentValue.board,\n\t\tfenData: variantTags.startingPosition.currentValue.fenData,\n\t\tpieceSet: new Set<PieceLetter>(\n\t\t\t[...variantTags.startingPosition.currentValue.pieceSet, ...promotionPieces].filter((e) => !nonPlayablePieceValues.includes(e))\n\t\t),\n\t\tmoves\n\t};\n}\n\nexport interface SerializedBoardStrings {\n\tboard: string;\n\tmoves: string;\n}\nconst defaultTags = createDefaultVariantTags();\nexport function serializeBoard(board: Board): SerializedBoardStrings {\n\treturn {\n\t\tboard: Object.values(defaultTags)\n\t\t\t.map((t) => t.serialize(board))\n\t\t\t.filter<string>((v): v is string => v !== undefined)\n\t\t\t.join(\"\\n\"),\n\t\tmoves: serializePGNMoves(board.moves)\n\t};\n}\n","import type { MoveTreeInterface } from \"@moveGeneration/MoveTree/MoveTree\";\nimport type { MoveWrapper } from \"@moveGeneration/MoveTree/MoveTreeInterface\";\n\nexport function serializePGNMoves(moveTree: MoveTreeInterface): string {\n\tlet resultingString = \"\";\n\n\tconst traverse = (moves: MoveWrapper[]) => {\n\t\tfor (const moveWrapper of moves) {\n\t\t\tif (moveWrapper.metadata.currentFullMove) {\n\t\t\t\tresultingString = resultingString.replace(/\\s\\.\\.\\s$/, \"\");\n\t\t\t\tresultingString += ` ${moveWrapper.metadata.currentFullMove}. `;\n\t\t\t}\n\n\t\t\tresultingString += moveWrapper.cachedNames.fullMoveNotation;\n\t\t\tif (moveWrapper.comment) resultingString += ` {${moveWrapper.comment}}`;\n\t\t\tresultingString += \" .. \";\n\n\t\t\tfor (const alternativeLine of moveWrapper.alternativeLines) {\n\t\t\t\tresultingString += \"(.. \";\n\t\t\t\ttraverse(alternativeLine);\n\t\t\t\tresultingString += \" )\";\n\t\t\t}\n\t\t}\n\n\t\tresultingString = resultingString.replace(/\\s\\.\\.\\s$/, \"\");\n\t};\n\n\ttraverse(moveTree.moves);\n\treturn resultingString;\n}\n","import { assertNonUndefined } from \"@client/ts/baseTypes\";\nimport { verifyColorEnumValue, colorEnum } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { duckPieceString, createPieceFromData, deadColorIndex } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport {\n\tMoveData,\n\tDroppingMove,\n\tInternalMove,\n\tInternalMoveSignature,\n\tSpecialMove,\n\tMoveComponent,\n\tverifyInternalMove,\n\tMoveWrapper,\n\tcreateDummyMoveMetadata,\n\tverifyMoveWrapperProperties,\n\tMove,\n\tverifyRequiredMove\n} from \"@moveGeneration/MoveTree/MoveTreeInterface\";\nimport { verifyPieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { parseEnPassantCoordinates, parseSingleCoordinate } from \"../Utils\";\n\nexport const PGN4_SYNTAX = {\n\tSPLIT: \".\",\n\tPIECE_REGEX: /[xA-ZΑ-ωa-nrbyg0-9-=+#@]/,\n\tPIECE_REGEX_SIMPLIFIED: /[A-ZΑ-ωa-n0-9-]/,\n\tMOVE_CAPTURING_REGEX: /^[A-ZΑ-ω]?([a-n]\\d{1,2})(?:-|x[A-ZΑ-ω]?)[A-ZΑ-ω]?([a-n]\\d{1,2})/,\n\tDUCK_MOVE_CAPTURING_REGEX: /Θ([a-n]\\d{1,2})?-([a-n]\\d{1,2})/,\n\tDROPPING_MOVE_CAPTURING_REGEX: /Θ?@([a-z])([A-ZΑ-ω])-([a-n]\\d{1,2})/,\n\tBRACKETS: {\n\t\tCOMMENT_START: \"{\",\n\t\tCOMMENT_END: \"}\",\n\t\tVARIATION_START: \"(\",\n\t\tVARIATION_END: \")\"\n\t},\n\tCOORDINATE_REGEX: /[a-n](?:(?:1[0-4])|(?:[1-9]))/,\n\tCOMMENT_SYNTAXES: {\n\t\tCLOCK: /\\[%timestamp (-?\\d+?)]/,\n\t\tARROWS: /\\[%cal ((?:R|B|Y|G).+?)]/,\n\t\tSQUARES: /\\[%csl ((?:R|B|Y|G).+?)]/,\n\t\tANNOTATION: /\\[%ann (.+?)]/\n\t}\n} as const;\n\nfunction obtainDuckMove(move: string): MoveData | DroppingMove | undefined {\n\tconst match = move.match(PGN4_SYNTAX.DUCK_MOVE_CAPTURING_REGEX);\n\tif (match) {\n\t\tif (match[1]) {\n\t\t\tconst startCoordinates = parseSingleCoordinate(match[1]);\n\t\t\tconst endCoordinates = parseSingleCoordinate(match[2]);\n\t\t\tif (!startCoordinates || !endCoordinates) return;\n\t\t\treturn { startCoordinates, endCoordinates };\n\t\t} else {\n\t\t\tconst endCoordinates = parseSingleCoordinate(match[2]);\n\t\t\tif (!endCoordinates) return;\n\t\t\treturn { piece: duckPieceString, endCoordinates };\n\t\t}\n\t} else return;\n}\n\nfunction obtainInternalType(type: string): InternalMove | undefined {\n\tlet internalMove: keyof typeof InternalMoveSignature;\n\tfor (internalMove in InternalMoveSignature) {\n\t\tif (Object.prototype.hasOwnProperty.call(InternalMoveSignature, internalMove)) {\n\t\t\tif (InternalMoveSignature[internalMove] === type) return { type: InternalMoveSignature[internalMove] };\n\t\t}\n\t}\n}\n\nfunction obtainDroppingMove(move: string): DroppingMove | undefined {\n\tconst match = move.match(PGN4_SYNTAX.DROPPING_MOVE_CAPTURING_REGEX);\n\tif (match) {\n\t\tconst [, color, piece, coordinate] = match;\n\t\tif (!verifyColorEnumValue(color) || !verifyPieceLetter(piece)) return;\n\t\tconst endCoordinates = parseSingleCoordinate(coordinate);\n\t\tif (!endCoordinates) return;\n\t\treturn {\n\t\t\tpiece: createPieceFromData(colorEnum[color], piece),\n\t\t\tendCoordinates\n\t\t};\n\t} else return;\n}\n\nfunction obtainStandardMove(move: string): MoveData | undefined {\n\tconst moveData: MoveData = { startCoordinates: [-1, -1], endCoordinates: [-1, -1] };\n\tconst promotionMatch = move.match(/.*?=([A-Zx])/);\n\tif (promotionMatch?.[1]) {\n\t\tmoveData.promotion = [createPieceFromData(deadColorIndex, promotionMatch[1].charAt(0))];\n\t}\n\n\tconst moveCoordinates = move.match(PGN4_SYNTAX.MOVE_CAPTURING_REGEX);\n\tif (moveCoordinates) {\n\t\tconst startCoordinate = parseSingleCoordinate(moveCoordinates[1]);\n\t\tconst endCoordinate = parseSingleCoordinate(moveCoordinates[2]);\n\n\t\tassertNonUndefined(startCoordinate);\n\t\tassertNonUndefined(endCoordinate);\n\t\tmoveData.startCoordinates = startCoordinate;\n\t\tmoveData.endCoordinates = endCoordinate;\n\n\t\treturn moveData;\n\t} else {\n\t\tif (/O-O-O.*/.test(move)) {\n\t\t\treturn { ...moveData, specialType: SpecialMove.CastlingQueenside };\n\t\t} else if (/O-O.*/.test(move)) {\n\t\t\treturn { ...moveData, specialType: SpecialMove.CastlingKingside };\n\t\t}\n\t}\n}\n\nfunction cloneMoveData(move: MoveComponent): MoveComponent {\n\tif (!verifyInternalMove(move)) {\n\t\tif (\"startCoordinates\" in move) {\n\t\t\tconst newMove: MoveData = {\n\t\t\t\tstartCoordinates: [...move.startCoordinates],\n\t\t\t\tendCoordinates: [...move.endCoordinates]\n\t\t\t};\n\t\t\tif (\"specialType\" in move) {\n\t\t\t\tnewMove.specialType = move.specialType;\n\t\t\t}\n\t\t\tif (\"promotion\" in move) {\n\t\t\t\tnewMove.promotion = move.promotion;\n\t\t\t}\n\t\t\treturn newMove;\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tendCoordinates: move.endCoordinates,\n\t\t\t\tpiece: move.piece\n\t\t\t};\n\t\t}\n\t} else {\n\t\treturn { type: move.type };\n\t}\n}\n\nexport const parsePGN4Moves = (moves: string): MoveWrapper[] => {\n\tconst parseMoves = (selectedMove: string, path: number[]): MoveWrapper[] => {\n\t\tconst moveList: MoveWrapper[] = [];\n\t\tconst currentPath = path;\n\n\t\tfunction getMoveIndexes(mI: number) {\n\t\t\twhile (selectedMove[mI] && PGN4_SYNTAX.PIECE_REGEX.test(selectedMove[mI])) mI++;\n\t\t\treturn mI;\n\t\t}\n\n\t\tfunction parseComment(mI: number) {\n\t\t\twhile (selectedMove[mI] && selectedMove[mI] !== PGN4_SYNTAX.BRACKETS.COMMENT_END) mI++;\n\t\t\treturn mI;\n\t\t}\n\n\t\tfunction getEnumeratorIndex(mI: number) {\n\t\t\twhile (selectedMove[mI] && /\\d|\\./.test(selectedMove[mI])) mI++;\n\t\t\treturn --mI;\n\t\t}\n\n\t\tfunction findBracketIndex(i: number) {\n\t\t\tlet depth = 0;\n\t\t\tfor (; i < selectedMove.length; i++) {\n\t\t\t\tswitch (selectedMove[i]) {\n\t\t\t\t\tcase PGN4_SYNTAX.BRACKETS.COMMENT_START:\n\t\t\t\t\t\ti = parseComment(i);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PGN4_SYNTAX.BRACKETS.VARIATION_START:\n\t\t\t\t\t\tdepth++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase PGN4_SYNTAX.BRACKETS.VARIATION_END:\n\t\t\t\t\t\tif (--depth === 0) {\n\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new TypeError(\"No matching parentheses for input \" + selectedMove);\n\t\t}\n\n\t\tfunction processMoveDataInsertion() {\n\t\t\tif (currentMoveData) {\n\t\t\t\tcurrentPath.push(++increment);\n\t\t\t\tcurrentMove.path = currentPath.slice();\n\t\t\t\tcurrentPath.pop();\n\t\t\t\tcurrentMove.moveData = currentMoveData.map((m) => cloneMoveData(m));\n\t\t\t\tcurrentMove.metadata = createDummyMoveMetadata();\n\t\t\t\tconst clockSyntax = currentMove.comment?.match(PGN4_SYNTAX.COMMENT_SYNTAXES.CLOCK);\n\t\t\t\tif (clockSyntax && !isNaN(Number(clockSyntax[1]))) {\n\t\t\t\t\tcurrentMove.comment = currentMove.comment?.replace(PGN4_SYNTAX.COMMENT_SYNTAXES.CLOCK, \"\");\n\t\t\t\t\tcurrentMove.metadata.playerClock = Number(clockSyntax[1]);\n\t\t\t\t}\n\t\t\t\tconst arrowSyntax = currentMove.comment?.match(PGN4_SYNTAX.COMMENT_SYNTAXES.ARROWS);\n\t\t\t\tif (arrowSyntax) {\n\t\t\t\t\tconst arrows = arrowSyntax[1].split(\",\");\n\t\t\t\t\tfor (const arrow of arrows) {\n\t\t\t\t\t\tconst [color, coordinate] = [arrow[0], arrow.slice(1)];\n\t\t\t\t\t\tconst numericColor = color.toLowerCase(),\n\t\t\t\t\t\t\tarrowCoordinates = parseEnPassantCoordinates(coordinate);\n\t\t\t\t\t\tif (!verifyColorEnumValue(numericColor) || !arrowCoordinates) continue;\n\t\t\t\t\t\tcurrentMove.metadata.highlightedArrows.push([colorEnum[numericColor], ...arrowCoordinates]);\n\t\t\t\t\t}\n\t\t\t\t\tcurrentMove.comment = currentMove.comment?.replace(PGN4_SYNTAX.COMMENT_SYNTAXES.ARROWS, \"\");\n\t\t\t\t}\n\t\t\t\tconst squareSyntax = currentMove.comment?.match(PGN4_SYNTAX.COMMENT_SYNTAXES.SQUARES);\n\t\t\t\tif (squareSyntax) {\n\t\t\t\t\tconst squares = squareSyntax[1].split(\",\");\n\t\t\t\t\tfor (const square of squares) {\n\t\t\t\t\t\tconst [color, inputCoordinate] = [square[0], square.slice(1)];\n\t\t\t\t\t\tconst numericColor = color.toLowerCase(),\n\t\t\t\t\t\t\tcoordinate = parseSingleCoordinate(inputCoordinate);\n\t\t\t\t\t\tif (!verifyColorEnumValue(numericColor) || !coordinate) continue;\n\t\t\t\t\t\tcurrentMove.metadata.highlightedSquares.push([colorEnum[numericColor], coordinate]);\n\t\t\t\t\t}\n\t\t\t\t\tcurrentMove.comment = currentMove.comment?.replace(PGN4_SYNTAX.COMMENT_SYNTAXES.SQUARES, \"\");\n\t\t\t\t}\n\t\t\t\tconst annotationMatch = currentMove.comment?.match(PGN4_SYNTAX.COMMENT_SYNTAXES.ANNOTATION);\n\t\t\t\tif (annotationMatch) {\n\t\t\t\t\tcurrentMove.metadata.annotation = annotationMatch[1];\n\t\t\t\t\tcurrentMove.comment = currentMove.comment?.replace(PGN4_SYNTAX.COMMENT_SYNTAXES.ANNOTATION, \"\");\n\t\t\t\t}\n\n\t\t\t\tif (verifyMoveWrapperProperties(currentMove)) {\n\t\t\t\t\tmoveList.push(Object.assign({}, currentMove));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(`Not all properties of move wrapper are filled out: ${JSON.stringify(currentMove)}`);\n\t\t\t\t}\n\n\t\t\t\tcurrentMove = {\n\t\t\t\t\talternativeLines: [],\n\t\t\t\t\tcomment: \"\"\n\t\t\t\t};\n\t\t\t\tcurrentMoveData = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction obtainMoveFromInfo(info: string): Move {\n\t\t\tconst currentMove: MoveComponent[] = [];\n\t\t\tconst internalType = obtainInternalType(info[0]);\n\t\t\tif (info.length === 1 && internalType !== undefined) {\n\t\t\t\treturn [internalType];\n\t\t\t}\n\n\t\t\tconst standardMove = obtainStandardMove(info);\n\t\t\tif (standardMove) currentMove.push(standardMove);\n\t\t\tconst droppingMove = obtainDroppingMove(info);\n\t\t\tif (droppingMove) currentMove.push(droppingMove);\n\t\t\tconst duckMove = obtainDuckMove(info);\n\t\t\tif (duckMove) currentMove.push(duckMove);\n\n\t\t\tif (verifyRequiredMove(currentMove)) {\n\t\t\t\treturn currentMove;\n\t\t\t} else throw new Error(`Move length is 0 for string ${info}`);\n\t\t}\n\n\t\tlet currentMoveData: Move | undefined;\n\t\tlet currentMove: Partial<MoveWrapper> = {\n\t\t\talternativeLines: [],\n\t\t\tcomment: \"\"\n\t\t};\n\n\t\tlet increment = -1,\n\t\t\tvariationIncrement = -1;\n\t\ttry {\n\t\t\tfor (let i = 0; i < selectedMove.length; i++) {\n\t\t\t\tconst isNumNaN = isNaN(Number(selectedMove[i]));\n\t\t\t\tif (isNumNaN && !/\\s/.test(selectedMove[i]) && selectedMove[i] !== PGN4_SYNTAX.SPLIT) {\n\t\t\t\t\tif (PGN4_SYNTAX.PIECE_REGEX_SIMPLIFIED.test(selectedMove[i])) {\n\t\t\t\t\t\tconst index = getMoveIndexes(i);\n\t\t\t\t\t\tcurrentMoveData = obtainMoveFromInfo(selectedMove.substring(i, index));\n\t\t\t\t\t\ti = index;\n\t\t\t\t\t} else if (moves[i] === PGN4_SYNTAX.BRACKETS.COMMENT_START) {\n\t\t\t\t\t\tconst index = parseComment(i);\n\t\t\t\t\t\tcurrentMove.comment = moves.substring(i + 1, index);\n\t\t\t\t\t\ti = index;\n\t\t\t\t\t} else if (moves[i] === PGN4_SYNTAX.BRACKETS.VARIATION_START) {\n\t\t\t\t\t\tconst index = findBracketIndex(i);\n\t\t\t\t\t\tcurrentPath.push(increment + 1, ++variationIncrement);\n\t\t\t\t\t\tcurrentMove.alternativeLines?.push([...parseMoves(moves.substring(i + 1, index), currentPath.slice())]);\n\t\t\t\t\t\ti = index;\n\t\t\t\t\t}\n\t\t\t\t} else if (\n\t\t\t\t\t(selectedMove[i] === PGN4_SYNTAX.SPLIT && moves[i + 1] && moves[i + 1] === PGN4_SYNTAX.SPLIT) ||\n\t\t\t\t\t(moves[i].trim() && !isNumNaN && moves[i + 1] && (moves[i + 1] === PGN4_SYNTAX.SPLIT || !isNaN(Number(moves[i + 1]))))\n\t\t\t\t) {\n\t\t\t\t\tif (!isNumNaN) i = getEnumeratorIndex(i);\n\t\t\t\t\tif (currentMoveData) {\n\t\t\t\t\t\tprocessMoveDataInsertion();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tprocessMoveDataInsertion();\n\t\t\tcurrentPath.push(increment + 1);\n\t\t\tcurrentMove.path = currentPath.slice();\n\t\t\tif (verifyMoveWrapperProperties(currentMove)) {\n\t\t\t\tmoveList.push(Object.assign({}, currentMove));\n\t\t\t}\n\t\t}\n\n\t\treturn moveList;\n\t};\n\n\treturn parseMoves(moves, []);\n};\n","import { createTuple, Tuple, verifyTupleType } from \"@client/ts/baseTypes\";\nimport { BoardSquares, initializeBoardSquares } from \"@client/ts/logic/BaseInterfaces\";\nimport { FENData, FENOptions } from \"@moveGeneration/FENData/FENData\";\nimport type { FENOptionsTags } from \"@moveGeneration/FENData/FENOptions/FENOptionsTagsInterface\";\nimport { boardDimension, colors, totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport {\n\tverifyColorEnumValue,\n\tcolorEnum,\n\tCoordinate,\n\tnonPlayablePieces,\n\tstringColorEnum\n} from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { createPieceFromString, emptyPieceString, PieceString } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport type { PieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport type { VariantTag } from \"../TagInterface\";\nimport { tagNamesEqual, unwrapTag, wrapTag } from \"../Utils\";\n\nexport function checkDimensionIntersection(dimension: Coordinate, [i, j]: Coordinate) {\n\tconst dimensionI = (boardDimension - dimension[0]) / 2,\n\t\tdimensionJ = (boardDimension - dimension[1]) / 2;\n\treturn i < dimensionI || i >= dimensionI + dimension[0] || j < dimensionJ || j >= dimensionJ + dimension[1];\n}\n\nfunction serializeFENOptions(fenOptions: FENOptions): string {\n\tconst resultingStrings: string[] = [];\n\tlet key: keyof FENOptionsTags;\n\tfor (key in fenOptions.tags) {\n\t\tif (!Object.prototype.hasOwnProperty.call(fenOptions.tags, key)) continue;\n\t\tconst serializedForm = fenOptions.tags[key].serialize();\n\t\tif (serializedForm) resultingStrings.push(serializedForm);\n\t}\n\n\treturn `{${resultingStrings.join(\",\")}}`;\n}\n\nfunction modifyFourBooleanParameter(part: string, fenDataArrayRef: Tuple<boolean, typeof totalPlayers>) {\n\tconst booleans = part.split(\",\").map((e) => Boolean(Number(e)));\n\tif (verifyTupleType(booleans, totalPlayers)) {\n\t\tfenDataArrayRef.forEach((_, i, arr) => (arr[i] = booleans[i]));\n\t} else {\n\t\tconsole.error(\"Incorrect amount of arguments for the boolean parameter length in FENData: \" + part);\n\t\tconsole.trace(`Expected ${totalPlayers} arguments, but got ${booleans.length}`);\n\t}\n}\n\nconst predefinedFENpositions = {\n\t\"4PC\": \"R-0,0,0,0-1,1,1,1-1,1,1,1-0,0,0,0-0-x,x,x,yR,yN,yB,yK,yQ,yB,yN,yR,x,x,x/x,x,x,yP,yP,yP,yP,yP,yP,yP,yP,x,x,x/x,x,x,8,x,x,x/bR,bP,10,gP,gR/bN,bP,10,gP,gN/bB,bP,10,gP,gB/bQ,bP,10,gP,gK/bK,bP,10,gP,gQ/bB,bP,10,gP,gB/bN,bP,10,gP,gN/bR,bP,10,gP,gR/x,x,x,8,x,x,x/x,x,x,rP,rP,rP,rP,rP,rP,rP,rP,x,x,x/x,x,x,rR,rN,rB,rQ,rK,rB,rN,rR,x,x,x\",\n\t\"4PCo\": \"R-0,0,0,0-1,1,1,1-1,1,1,1-0,0,0,0-0-x,x,x,yR,yN,yB,yK,yQ,yB,yN,yR,x,x,x/x,x,x,yP,yP,yP,yP,yP,yP,yP,yP,x,x,x/x,x,x,8,x,x,x/bR,bP,10,gP,gR/bN,bP,10,gP,gN/bB,bP,10,gP,gB/bK,bP,10,gP,gQ/bQ,bP,10,gP,gK/bB,bP,10,gP,gB/bN,bP,10,gP,gN/bR,bP,10,gP,gR/x,x,x,8,x,x,x/x,x,x,rP,rP,rP,rP,rP,rP,rP,rP,x,x,x/x,x,x,rR,rN,rB,rQ,rK,rB,rN,rR,x,x,x\",\n\t\"4PCb\": \"R-0,0,0,0-1,1,1,1-1,1,1,1-0,0,0,0-0-x,x,x,yR,yN,yB,yQ,yK,yB,yN,yR,x,x,x/x,x,x,yP,yP,yP,yP,yP,yP,yP,yP,x,x,x/x,x,x,8,x,x,x/bR,bP,10,gP,gR/bN,bP,10,gP,gN/bB,bP,10,gP,gB/bQ,bP,10,gP,gQ/bK,bP,10,gP,gK/bB,bP,10,gP,gB/bN,bP,10,gP,gN/bR,bP,10,gP,gR/x,x,x,8,x,x,x/x,x,x,rP,rP,rP,rP,rP,rP,rP,rP,x,x,x/x,x,x,rR,rN,rB,rQ,rK,rB,rN,rR,x,x,x\",\n\t\"4PCn\": \"R-0,0,0,0-1,1,1,1-1,1,1,1-0,0,0,0-0-x,x,x,yR,yN,yB,yQ,yK,yB,yN,yR,x,x,x/x,x,x,yP,yP,yP,yP,yP,yP,yP,yP,x,x,x/x,x,x,8,x,x,x/bR,bP,10,gP,gR/bN,bP,10,gP,gN/bB,bP,10,gP,gB/bQ,bP,10,gP,gK/bK,bP,10,gP,gQ/bB,bP,10,gP,gB/bN,bP,10,gP,gN/bR,bP,10,gP,gR/x,x,x,8,x,x,x/x,x,x,rP,rP,rP,rP,rP,rP,rP,rP,x,x,x/x,x,x,rR,rN,rB,rQ,rK,rB,rN,rR,x,x,x\",\n\t\"2PC\": \"R-0,1,0,1-1,1,1,1-1,1,1,1-0,0,0,0-0-{'pawnBaseRank':5,'wb':true,'dim':'8x8'}-x,x,x,x,x,x,x,x,x,x,x,x,x,x/x,x,x,x,x,x,x,x,x,x,x,x,x,x/x,x,x,x,x,x,x,x,x,x,x,x,x,x/x,x,x,yR,yN,yB,yQ,yK,yB,yN,yR,x,x,x/x,x,x,yP,yP,yP,yP,yP,yP,yP,yP,x,x,x/x,x,x,8,x,x,x/x,x,x,8,x,x,x/x,x,x,8,x,x,x/x,x,x,8,x,x,x/x,x,x,rP,rP,rP,rP,rP,rP,rP,rP,x,x,x/x,x,x,rR,rN,rB,rQ,rK,rB,rN,rR,x,x,x/x,x,x,x,x,x,x,x,x,x,x,x,x,x/x,x,x,x,x,x,x,x,x,x,x,x,x,x/x,x,x,x,x,x,x,x,x,x,x,x,x,x\"\n} as const;\nconst verifyPredefinedFENPosition = (fenShorthand: string): fenShorthand is keyof typeof predefinedFENpositions =>\n\tfenShorthand in predefinedFENpositions;\n\nconst fenDataTag = \"StartFen4\";\nexport const createFENDataTag = (): VariantTag<{\n\tboard: BoardSquares<PieceString>;\n\tfenData: FENData;\n\tpieceSet: Set<PieceLetter>;\n}> => ({\n\ttag: \"startingPosition\",\n\tcurrentValue: {\n\t\tboard: initializeBoardSquares((): PieceString => emptyPieceString),\n\t\tfenData: new FENData(),\n\t\tpieceSet: new Set<PieceLetter>()\n\t},\n\tverifyTagInParsing(inputTag) {\n\t\treturn tagNamesEqual(inputTag, fenDataTag);\n\t},\n\tparseTag(inputTag) {\n\t\tconst tagContents = unwrapTag(inputTag, fenDataTag);\n\t\tconst fenDataString = verifyPredefinedFENPosition(tagContents) ? predefinedFENpositions[tagContents] : tagContents;\n\n\t\tconst fenData = new FENData();\n\t\tconst board: BoardSquares<PieceString> = initializeBoardSquares(() => emptyPieceString);\n\t\tconst pieceSet = new Set<PieceLetter>();\n\n\t\tconst transparentWall = createPieceFromString(\"x\");\n\t\tconst parts = fenDataString.split(\"-\");\n\t\tif (parts.length < 7 || parts[parts.length - 1].split(\"/\").length !== boardDimension) {\n\t\t\tconsole.warn(\"FEN has less than 7 parts: \" + fenDataString);\n\t\t} else {\n\t\t\tconst sideToMove = parts[0].charAt(0).toLowerCase();\n\t\t\tif (verifyColorEnumValue(sideToMove)) {\n\t\t\t\tfenData.sideToMove = colorEnum[sideToMove];\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"FEN option 1: side to move is not an alphabetic color: \" + sideToMove);\n\t\t\t}\n\n\t\t\tmodifyFourBooleanParameter(parts[1], fenData.fenOptions.tag(\"dead\"));\n\t\t\tmodifyFourBooleanParameter(parts[2], fenData.fenOptions.tag(\"castleKingside\"));\n\t\t\tmodifyFourBooleanParameter(parts[3], fenData.fenOptions.tag(\"castleQueenside\"));\n\n\t\t\tconst points = parts[4].split(\",\").map((e) => Number(e));\n\t\t\tif (verifyTupleType(points, totalPlayers)) {\n\t\t\t\tfenData.points = points;\n\t\t\t} else {\n\t\t\t\tconsole.warn(`FEN option 5: points is of incorrect length: ${points.join(\",\")}`);\n\t\t\t}\n\n\t\t\tfenData.plyCount = Number(parts[5]);\n\n\t\t\tconst royals: Tuple<Coordinate | null, typeof totalPlayers> = createTuple(null, totalPlayers);\n\t\t\tconst verifyKeyInTags = (key: string): key is keyof FENOptionsTags => key in fenData.fenOptions.tags;\n\n\t\t\tif (parts[6].startsWith(\"{\")) {\n\t\t\t\tconst initialParsing: unknown = JSON.parse(parts[6].replaceAll(\"(\", \"[\").replaceAll(\")\", \"]\").replaceAll(\"'\", '\"'));\n\t\t\t\tif (typeof initialParsing !== \"object\" || initialParsing === null)\n\t\t\t\t\tthrow new Error(\"Unexpected object definition syntax for \" + String(initialParsing));\n\t\t\t\tfor (const [key, value] of Object.entries(initialParsing)) {\n\t\t\t\t\tif (!verifyKeyInTags(key)) continue;\n\t\t\t\t\tconst tag = fenData.fenOptions.tags[key];\n\t\t\t\t\ttag.value = tag.parse(value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst position = parts[parts.length - 1].split(\"/\"),\n\t\t\t\tdimension = fenData.fenOptions.tag(\"dim\");\n\t\t\tposition.forEach((line, i) => {\n\t\t\t\tlet j = 0;\n\t\t\t\tfor (let pieceStr of line.split(\",\")) {\n\t\t\t\t\tif (pieceStr.endsWith('\"')) pieceStr = pieceStr.slice(0, -1);\n\t\t\t\t\tif (isNaN(Number(pieceStr))) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (!checkDimensionIntersection(dimension, [i, j])) {\n\t\t\t\t\t\t\t\tconst pieceString = createPieceFromString(pieceStr);\n\t\t\t\t\t\t\t\tboard[i][j] = pieceString;\n\t\t\t\t\t\t\t\tif (pieceString.isPiece()) {\n\t\t\t\t\t\t\t\t\tif (pieceString.piece === \"K\" && !royals[pieceString.color]) {\n\t\t\t\t\t\t\t\t\t\troyals[pieceString.color] = [i, j];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tpieceSet.add(pieceString.piece);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tj++;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else j += Number(pieceStr);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (const color of colors) {\n\t\t\t\tfor (const [piece] of fenData.fenOptions.tag(\"bank\")[color]) {\n\t\t\t\t\tif (piece.piece in nonPlayablePieces) continue;\n\t\t\t\t\tpieceSet.add(piece.piece);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfenData.fenOptions.setTag(\"royal\", royals);\n\n\t\t\tfor (let i = 0; i < boardDimension; i++) {\n\t\t\t\tfor (let j = 0; j < boardDimension; j++) {\n\t\t\t\t\tif (checkDimensionIntersection(dimension, [i, j])) board[i][j] = transparentWall;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!fenData.fenOptions.tag(\"noCorners\")) {\n\t\t\tconst cornerAreaSize = 3,\n\t\t\t\tarrayDimension = boardDimension - 1;\n\t\t\tbaseLoop: for (let i = 0; i < cornerAreaSize; i++) {\n\t\t\t\tfor (let j = 0; j < cornerAreaSize; j++) {\n\t\t\t\t\tconst squares: Coordinate[] = [\n\t\t\t\t\t\t[i, j],\n\t\t\t\t\t\t[arrayDimension - i, j],\n\t\t\t\t\t\t[i, arrayDimension - j],\n\t\t\t\t\t\t[arrayDimension - i, arrayDimension - j]\n\t\t\t\t\t];\n\t\t\t\t\tfor (const square of squares) {\n\t\t\t\t\t\tconst pieceString = board[square[0]][square[1]];\n\t\t\t\t\t\tif (!pieceString.isWall() || pieceString.piece !== transparentWall.piece) {\n\t\t\t\t\t\t\tfenData.fenOptions.setTag(\"noCorners\", true);\n\t\t\t\t\t\t\tbreak baseLoop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { fenData, board, pieceSet };\n\t},\n\tserialize(baseBoard) {\n\t\tconst { board, data } = baseBoard;\n\t\tlet resultingString = \"\";\n\t\tresultingString += `${stringColorEnum[data.sideToMove].toUpperCase()}-`;\n\t\tresultingString += `${data.fenOptions\n\t\t\t.tag(\"dead\")\n\t\t\t.map((d) => Number(d))\n\t\t\t.join(\",\")}-`;\n\t\tresultingString += `${data.fenOptions\n\t\t\t.tag(\"castleKingside\")\n\t\t\t.map((d) => Number(d))\n\t\t\t.join(\",\")}-`;\n\t\tresultingString += `${data.fenOptions\n\t\t\t.tag(\"castleQueenside\")\n\t\t\t.map((d) => Number(d))\n\t\t\t.join(\",\")}-`;\n\t\tresultingString += `${data.points.join(\",\")}-`;\n\t\tresultingString += `${data.plyCount}-`;\n\t\tresultingString += `${serializeFENOptions(data.fenOptions)}-`;\n\n\t\tlet currentEmptySquares = 0;\n\t\tfor (const row of board) {\n\t\t\tfor (const pieceString of row) {\n\t\t\t\tif (pieceString.isEmpty()) {\n\t\t\t\t\tcurrentEmptySquares++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentEmptySquares !== 0) {\n\t\t\t\t\tresultingString += `${currentEmptySquares},`;\n\t\t\t\t\tcurrentEmptySquares = 0;\n\t\t\t\t}\n\t\t\t\tresultingString += `${pieceString.value},`;\n\t\t\t}\n\n\t\t\tif (currentEmptySquares !== 0) {\n\t\t\t\tresultingString += `${currentEmptySquares}/`;\n\t\t\t\tcurrentEmptySquares = 0;\n\t\t\t} else {\n\t\t\t\tresultingString = resultingString.slice(0, -1);\n\t\t\t\tresultingString += \"/\";\n\t\t\t}\n\t\t}\n\t\tresultingString = resultingString.slice(0, -1);\n\n\t\treturn wrapTag(fenDataTag, resultingString);\n\t}\n});\n","import type { Coordinate } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\n\nexport function parseSingleCoordinate(coordinate: string): Coordinate | undefined {\n\tif (coordinate.length === 0) return;\n\tconst parsedCoordinate: [number, number] = [14 - Number(coordinate.slice(1)), coordinate.charCodeAt(0) - 97];\n\tif (Number.isNaN(parsedCoordinate[0]) || Number.isNaN(parsedCoordinate[1])) return;\n\tif (parsedCoordinate[0] < 0 || parsedCoordinate[0] > 13 || parsedCoordinate[1] < 0 || parsedCoordinate[1] > 13) return;\n\treturn parsedCoordinate;\n}\n\nexport function parseEnPassantCoordinates(coordinates: string): [Coordinate, Coordinate] | undefined {\n\tif (coordinates.length === 0) return;\n\tconst coordinatesArray = coordinates.split(\":\");\n\treturn [\n\t\t[14 - Number(coordinatesArray[0].slice(1)), coordinatesArray[0].charCodeAt(0) - 97],\n\t\t[14 - Number(coordinatesArray[1].slice(1)), coordinatesArray[1].charCodeAt(0) - 97]\n\t];\n}\n\nexport const wrapTag = (baseTag: string, content: string) => `[${baseTag} \"${content}\"]`;\nexport const tagNamesEqual = (baseTag: string, definedTag: string) => baseTag.toLowerCase().startsWith(`[${definedTag.toLowerCase()} \"`);\nexport const unwrapTag = (baseTag: string, definedTag: string) => baseTag.replace(`[${definedTag} \"`, \"\").slice(0, -1);\n","import { Tuple } from \"../baseTypes\";\n\nexport function shuffleArray<T>(array: T[]): T[];\nexport function shuffleArray<T, L extends number>(array: Tuple<T, L>): Tuple<T, L>;\nexport function shuffleArray<T, L extends number>(array: T[] | Tuple<T, L>): T[] | Tuple<T, L> {\n\tlet i = array.length;\n\tlet r = 0;\n\twhile (i !== 0) {\n\t\tr = Math.floor(Math.random() * i--);\n\t\t[array[i], array[r]] = [array[r], array[i]];\n\t}\n\n\treturn array;\n}\n\nexport function compareArrays(arr1: unknown[] | readonly unknown[], arr2: unknown[] | readonly unknown[]): boolean {\n\tif (arr1 === arr2) return true;\n\tif (arr1.length !== arr2.length) return false;\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tconst first = arr1[i],\n\t\t\tsecond = arr2[i];\n\t\tif (Array.isArray(first) && Array.isArray(second)) {\n\t\t\tif (!compareArrays(first, second)) return false;\n\t\t} else if (first !== second) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function countMinimumOf2DArrayExcludingZero(array: number[][]): number {\n\tlet minimum = Infinity;\n\tfor (const row of array) {\n\t\tfor (const number of row) {\n\t\t\tif (number !== 0 && number < minimum) {\n\t\t\t\tminimum = number;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn minimum;\n}\n\nexport function findLastIndex<T>(array: T[], callback: (value: T, index: number, arr: T[]) => boolean): number {\n\tlet i = array.length;\n\twhile (i--) {\n\t\tif (callback(array[i], i, array)) return i;\n\t}\n\treturn -1;\n}\n","export function truncateNumber(number: number, digits: number): number {\n\tconst multiplier = Math.pow(10, digits);\n\tconst adjusted = number * multiplier;\n\tif (adjusted < 0) {\n\t\treturn Math.ceil(adjusted / multiplier);\n\t} else {\n\t\treturn Math.floor(adjusted / multiplier);\n\t}\n}\n\nexport function bitCount(number: number): number {\n\tnumber = number - ((number >> 1) & 0x55555555);\n\tnumber = (number & 0x33333333) + ((number >> 2) & 0x33333333);\n\treturn (((number + (number >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;\n}\n","export function copyClass<T, P extends unknown[]>(instance: T, baseClass: new (...args: P) => T, customProperties = false): T {\n\tconst prototype: unknown = Object.getPrototypeOf(instance);\n\tif (typeof prototype !== \"object\") throw new Error(\"Expected prototype to be an object\");\n\tconst properties: unknown = Object.create(prototype);\n\tif (typeof properties !== \"object\" || properties === null) throw new Error(\"Expected prototype to be an object\");\n\tconst copy: unknown = Object.assign(properties, customProperties ? {} : instance);\n\tif (!(copy instanceof baseClass)) throw new Error(\"Expected prototype to not be overridden\");\n\treturn copy;\n}\n\nexport const verifyObjectType = (v: unknown): v is Record<PropertyKey, unknown> => typeof v === \"object\" && v !== null;\nexport function verifyPropertiesInObject<K extends string>(obj: Record<PropertyKey, unknown>, keys: readonly K[]): obj is Record<K, unknown> {\n\tfor (const key of keys) {\n\t\tif (!Object.prototype.hasOwnProperty.call(obj, key)) return false;\n\t}\n\treturn true;\n}\n","export function formatOrdinalNumber(num: number): string {\n\tconst lastTwoDigits = Number(String(num).slice(-2));\n\tif (lastTwoDigits > 3 && lastTwoDigits < 21) return \"th\";\n\tswitch (lastTwoDigits % 10) {\n\t\tcase 1:\n\t\t\treturn \"st\";\n\t\tcase 2:\n\t\t\treturn \"nd\";\n\t\tcase 3:\n\t\t\treturn \"rd\";\n\t\tdefault:\n\t\t\treturn \"th\";\n\t}\n}\n\nexport function compileEnumeration(list: string[]): string {\n\tif (list.length === 0) return \"\";\n\tif (list.length === 1) return list[0];\n\tlet result = \"\";\n\tfor (let i = 0; i < list.length; i++) {\n\t\tif (i === list.length - 2) {\n\t\t\tresult += ` ${list[i]} or `;\n\t\t} else if (i === list.length - 1) {\n\t\t\tresult += list[i];\n\t\t} else {\n\t\t\tresult += list[i] + \", \";\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function prefixWithIndefiniteArticle(str: string): string {\n\tconst vowels = /[AEUIO]/i;\n\treturn vowels.test(str.charAt(0)) ? \"an \" + str : \"a \" + str;\n}\n\nexport function convertSecondsToFlexibleHoursMinutesSeconds(seconds: number): string {\n\tif (seconds >= 3600) {\n\t\treturn new Date(seconds * 1000).toISOString().substring(11, 16);\n\t} else {\n\t\treturn new Date(seconds * 1000).toISOString().substring(14, 19);\n\t}\n}\n\nexport function convertCamelCaseToKebabCase(baseString: string): string {\n\treturn baseString.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n\nexport function hashString(string: string): number {\n\tlet hash = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst char = string.charCodeAt(i);\n\t\thash = (hash << 5) - hash + char;\n\t\thash |= 0;\n\t}\n\n\treturn hash;\n}\n","var map = {\n\t\"./BoardDecorators/AllowPassing.ts\": 66,\n\t\"./BoardDecorators/AlternativeTeams.ts\": 67,\n\t\"./BoardDecorators/BarePieceRule.ts\": 74,\n\t\"./BoardDecorators/Blindfold.ts\": 75,\n\t\"./BoardDecorators/CaptureTheKing.ts\": 33,\n\t\"./BoardDecorators/Chess960.ts\": 76,\n\t\"./BoardDecorators/Crazyhouse.ts\": 77,\n\t\"./BoardDecorators/DuckChess.ts\": 78,\n\t\"./BoardDecorators/FogOfWar.ts\": 79,\n\t\"./BoardDecorators/ForcedCapture.ts\": 35,\n\t\"./BoardDecorators/GameMetadataRules.ts\": 80,\n\t\"./BoardDecorators/Ghostboard.ts\": 81,\n\t\"./BoardDecorators/ParadigmChess30.ts\": 82,\n\t\"./BoardDecorators/PiecesFaceCenter.ts\": 83,\n\t\"./BoardDecorators/SeirawanSetup.ts\": 45,\n\t\"./BoardDecorators/SelfCheck.ts\": 84,\n\t\"./BoardDecorators/SetupChess.ts\": 50,\n\t\"./BoardDecorators/Taboo.ts\": 46,\n\t\"./BoardVariantModules/EngineMoveGeneration/Algorithms/ComfuterEvaluation.ts\": 36,\n\t\"./BoardVariantModules/EngineMoveGeneration/Algorithms/ComfuterEvaluationExtensions.ts\": 51,\n\t\"./BoardVariantModules/EngineMoveGeneration/Algorithms/MixedAlgorithms.ts\": 85,\n\t\"./BoardVariantModules/EngineMoveGeneration/Algorithms/RandomEvaluation.ts\": 27,\n\t\"./BoardVariantModules/EngineMoveGeneration/Algorithms/RandomEvaluationExtensions.ts\": 86,\n\t\"./BoardVariantModules/EngineMoveGeneration/BotInterface.ts\": 20,\n\t\"./BoardVariantModules/InsufficientMaterial/InsufficientMaterialChecker.ts\": 87,\n\t\"./BoardVariantModules/InsufficientMaterial/InsufficientMaterialConstructor.ts\": 52,\n\t\"./BoardVariantModules/InsufficientMaterial/PieceMedianCounter.ts\": 37,\n\t\"./BoardVariantModules/InsufficientMaterial/StateSerializer.ts\": 88,\n\t\"./BoardVariantModules/InsufficientMaterial/Utilities.ts\": 30,\n\t\"./FENDataDecorators/Atomic.ts\": 89,\n\t\"./FENDataDecorators/DeadKingWalking.ts\": 53,\n\t\"./FENDataDecorators/EnPassant.ts\": 90,\n\t\"./FENDataDecorators/FatalCapture.ts\": 91,\n\t\"./FENDataDecorators/FiftyMoveRule.ts\": 34,\n\t\"./FENDataDecorators/Giveaway.ts\": 54,\n\t\"./FENDataDecorators/KingOfTheHill.ts\": 92,\n\t\"./FENDataDecorators/NCheck.ts\": 93,\n\t\"./FENDataDecorators/OppositeMultiplier.ts\": 94,\n\t\"./FENDataDecorators/OppositeSideCastling.ts\": 95,\n\t\"./FENDataDecorators/PiecesGoToBanks.ts\": 96,\n\t\"./FENDataDecorators/PlayForMate.ts\": 97,\n\t\"./FENDataDecorators/PointsForMate.ts\": 98,\n\t\"./FENDataDecorators/StalemateOptions.ts\": 29,\n\t\"./FENDataDecorators/Takeover.ts\": 99,\n\t\"./FENDataDecorators/ThreefoldRepetition.ts\": 55,\n\t\"./PieceControlDecorators/AnyCapture.ts\": 100,\n\t\"./PieceControlDecorators/PromoteTo.ts\": 42,\n\t\"./PieceControlDecorators/PromotionRank.ts\": 28,\n\t\"./PieceControlDecorators/RoyalsCannotCapture.ts\": 38,\n\t\"./PieceControlDecorators/Sideways.ts\": 101,\n\t\"./PieceControlDecorators/Stonewall.ts\": 102,\n\t\"./PieceControlDecorators/Torpedo.ts\": 103\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 73;"],"names":["chessGlyphIndex","doubleBackwardArrow","downloadIcon","endBackwardArrow","forwardDoubleArrow","userSearch","userConnection","notAllowed","clock","extraInformation","authorshipNotice","draw","backwardArrow","userInformation","smallBackwardArrow","leaderBoard","equal","downwardArrow","upperArrow","endForwardArrow","urlAttached","crossMark","rightOutwardsArrow","hashtag","newspaper","twitter","checkMark","camera","alternativeLine","play","pause","reload","world","points","medal","soundOff","circleCrossMark","steadyEvaluation","facebook","circle","soundOn","plus","openEye","copyToClipboard","wavingFlag","editText","fullArrowLeft","fullArrowRight","smallArrowForward","goBackArrow","youtube","calendar","user","chat","lock","box","circularArrows","lightBulb","briefcase","board","knightArrows","newMessage","drawing","twoUsers","twoUsers2","openingBook","disclaimer","ringingBell","list","rookAndPawn","hamburgerList","mail","userExtraInformation","house","sheetAndPencil","openMail","chatBox","fullArrowDown","smallArrowUp","fullArrowUp","arrowIntoBox","key","file","books","sharing","userNotAllowed","userCrossMark","questionMark","boardWithCircle","googlePlus","reset","reddit","openBook","userPlus","cog","pin","suitcase","mark","cake","openLink","bishopStroke","linkedin","knight","threeCheck","chess960rapid","connection","quotes","exit","crossedBinoculars","leaderBoardReversed","bishopFull","printer","verticalEvaluation","t","pawn","twoPawns","unrated","elite","bug","cpu","forwardArrowCircle","squareCrossMark","android","twoUsersPlus","crossedArrows","king","kingFull","bishop","twoFullRooks","kingStrokes","fullKnight2","chess960","leaderBoardAscent","crazyhouse","checklist","target","pawnAndHalfRook","halfRookAndPawn","knightStrokes","pawnLogo","queenFull","exchange","userNext","userPrevious","compass","pawnStrokes","rookStrokes","screenDisplays","kingOfTheHill","antichess","queen","threePawns","queenStrokes","rookSmallStrokes","rookSmall","bishopPair","rookPair","knightPair","twoUsersSearch","shield","kingSmall","bishopSmall","knightSmall","userNoConnection","userStream","queenAlternative","pawnAlternative","threePawnsAlternative","twoPawnsAlternative","rookAlternative","knightPairFull","bishopPairFull","addBoard","diamond","scales","pawn3d","userShieldPlus","gold","ellipsis","analysis","archive","arrowBottomIntoBox","disclaimerEditor","sendTrophy","addCheckMark","checkMarkSquare","squareStaircase","arrowsUpBottom","star","verticalDash","shieldCheckMark","top3","addImage","chessStream","removeTrophy","importantMail","arrowLeave","donut","computerAnalysis","checkMarkSquareSmall","diagonalExpandArrows","leaderBoardHorizontal","checkMarkAsCircle","arrowFromBox","boxArrowBottom","boxArrowLeft","boxArrowRight","fourArrowsCentral","clashingSwords","ratingOffset","smilingFace","fileCabinet","editClock","userShield","homeFilled","paymentCard","fourArrowsOutwards","puzzle","addPhoto","arrowWallLeft","arrowWallRight","boardConfiguration","fourBlocks","sandglass","crown","cloudUpload","webChatBox","puzzleRush","knightHops","instagram","squarePlus","squareMinus","squareEqual","square","fireFull","pawnRecycle","noEngine","google","fourPlayer","pieceMeal","arrowBoldUp","arrowBoldDown","blunder","mistake","videoChatBox","bonesCrossed","displays","arrowEnter","newspaperHalf","bookmark","puzzleLarge","movePawn","pawn3dLarge","sun","rapid","blitz","bullet","mortarboard","laptop","resetWidth","pawnConnection","copyToClipboardFromText","fire","crownSmall","orderedList","chess960daily","arrowWallBottom","pawn3dBold","plusInCircle","lightCorner","darkCorner","steepCurve","heart","checkMarkThin","connectionDiagonal","diadem","plusMinus","recycling","metrics","top1","engineCheckMark","wikipedia","tournament","houseConfiguration","computerHindsight","computerCheckMark","lightDarkTheme","whistlingBell","crossMarkCompact","eyeCrossed","fide","favorite","tShirtPawn","addSmile","library","discord","analysisCheckMark","versusComputer","dollarSign","bestMove","gift","evaluationLinear","evaluationThrowaway","evaluationEqual","evaluationDead","evaluationSharp","evaluationPerplexing","evaluationSmooth","libraryAdd","selfPartner","fourPlayerConfiguration","listDownFlow","puzzleBattle","hyperbullet","gameLink","gameStudy","evaluationCrazy","engine","crossedSwordsInCircle","hallmark","like","boardTwoPlayers","fourPlayerChess","variants","cloudUploadCompact","clockIncrement","videoCamera","inaccuracy","bot","torpedo","vk","blindfold","customSettings","captureAnything","pawnSideways","noCastling","fogOfWar","automate","atomic","pawnCounterfeit","elephant","fullBlock","fourFullBlocks","nineFullBlocks","nineFullBlocksCrossed","hamburgerMenuCompact","listCompact","geoMark","crossedDonut","handshake","verified","sandglassRunningOut","rapidLowOnTime","tourneyBanner","noCloud","fork","donutTarget","newCalendarDay","cornerInfiltration","hastTagCompact","chatterbox","circleStar","targetPractice","pawnPromotion","flagProgression","pawnDoubleAttack","kingAndRook","specialMedal","pawnBanner","userSquare","verifiedCandidate","saveFile","duck","addBanner","qrCode","noAnalysis","dualPawn","gameEscape","tournamentCup","noExchanges","tikTok","pieChart","search","binoculars","largeBoard","exclamation","tournamentCupIcon","trashBin","arrowForwardBoldCompact","giftDiamond","filter","noChat","newSheet","xml","blockUser","facebookLike","facebookDislike","apple","phone","verifyFunctionType","func","createTuple","val","length","Array","from","fill","createTupleFromCallback","verifyTupleType","arr","assertNonUndefined","data","Error","throwOnNever","arg","TypeError","importAll","r","keys","forEach","hexColorRegex","createHexColor","color","test","initializeBoardSquares","baseValue","boardDimension","isVerticalPlacement","getVerticalPlacementModulus","num","result","concat","getHorizontalPlacementModulus","validateBoardMove","move","startingMoves","firstMove","verifyStandardMove","getLegalMoves","startCoordinates","verifyDroppingMove","getDroppingMoves","piece","verifyInternalMove","JSON","stringify","getAllowedInternalMoves","specialMoveSettings","hasEnPassant","variantData","duckChess","_step","_iterator","_createForOfIteratorHelper","_loop","moveComponent","value","find","legalMove","compareMoves","v","specialType","SpecialMove","nextChainedMoves","s","n","done","_ret","err","e","f","validateMoveTree","moves","clonedBoard","createClone","createMoveTree","createSnapshot","pregenerateAttacks","dimension","Math","max","fenOptions","tag","traverse","current","currentFullMove","arguments","undefined","currentTimeOnClocks","gameData","timeControl","baseTime","totalPlayers","previousSideToMove","i","moveWrapper","moveData","path","alternativeLines","newMoveWrapper","createBaseMoveWrapper","slice","comment","validationResult","_unused","firstStandardMoveSet","promotion","map","p","isWall","createPieceFromData","sideToMove","metadata","movingPiece","isCapture","getCapturedPieces","findLastIndex","b","currentSideToMove","results","makeMove","checkmates","checks","_step2","_iterator2","line","push","playerClock","_objectSpread","currentMove","getMove","assertValidMove","stringifyMove","changeGameTermination","snapshot","getBoardSnapshot","verifyValidMove","boardSnapshot","gameOver","termination","isTwoPlayer","gameType","type","VariantType","currentSnapshot","loadSnapshot","getCurrentResult","_step3","currentResults","dead","resigned","wb","_iterator3","colors","getPlayerNameFromColor","join","requiredDispatches","initialDispatches","dispatchSyncRecord","withWorkerResult","_","propertyKey","descriptor","originalMethod","_len","args","_key","postMessage","apply","this","workerDataSync","gameObjectPropertySync","RequestManager","_dec","_dec2","_dec3","_dec4","_dec5","_dec6","_dec7","_dec8","_dec9","_dec10","_dec11","_dec12","_dec13","_dec14","_dec15","_dec16","_dec17","_dec18","_dec19","_dec20","_dec21","_dec22","_dec23","_dec24","_dec25","_dec26","_dec27","_dec28","_dec29","_dec30","_dec31","_dec32","_applyDecoratedDescriptor","_class","constructor","_defineProperty","Map","stripPieceStrings","object","parse","generateInitiallyAliveColors","d","reduce","generateCurrentMoves","internalMoves","legalMoves","getPlayerPieces","set","stringifyCoordinate","construct","_variantName","pgn4","Board","decorateClassWithVariants","variantRules","boardDecorators","insufficientMaterialModule","InsufficientMaterialConstructor","state","insufficientMaterialChecker","InsufficientMaterialChecker","StateSerializer","serializeInsufficientMaterialState","generateInsufficientMaterialState","constructWithGeneratedData","insufficientMaterialState","deserializeInsufficientMaterialState","getFENSettings","royalCount","isCustomRoyals","isPiece","createSerializedState","getInitiallyAliveColors","initiallyAliveColors","getMoveTree","_step4","fullMoveCounter","_iterator4","resultingWrapper","cachedNames","highlightedArrows","highlightedSquares","_step5","_iterator5","loadSnapshotByPath","compareArrays","preliminarySnapshot","verifyNextChainedMovesAreDeleted","convertStrippedMoveToNormal","_step6","newMove","_iterator6","_moveComponent$promot","PieceString","verifyRequiredMove","passedMove","augmentMoveWithMetadata","makeMoveFunction","serializeBoardToPGN","serializeBoard","pieceString","j","_this$legalMoves$get","get","getInternalMoves","getVariantData","getBoard","toObject","getGameData","newGameData","date","toUTCString","getCurrentMove","getVariantRules","_step7","resultingRules","_iterator7","variantRule","getPublicProperties","getVariantType","deleteMove","playPreferredBotMove","getRealPlayers","_step8","_iterator8","_this$legalMoves$get2","preGeneratedAttacks","pieceDrops","algorithm","getDefaultZombieAlgorithm","evaluate","pickPreferredMove","changeFogPerspective","fogOfWarPerspective","newPerspective","nextTurn","getSquareVisibility","squareVisibility","prototype","Object","getOwnPropertyDescriptor","requestManager","self","onmessage","requestName","parameters","PieceControlConfigurator","control","_control","_isConfigured","coordinates","emptyPieceString","immunePieces","setCoordinates","x","y","setBaseImmunePieces","immune","setColor","setBoard","constructPieceControl","configure","PieceControlBuilder","_generalConfig","setFENData","fenData","setVariantRules","rules","createPieceControlWrap","letter","pieceControlConfigSettings","decoratedControl","PieceControl","copyVariantRules","initPieceControlDeclarations","baseImmunes","initDecoratorSettings","createBasePreGeneratedAttacks","createComplexMoveLegalityTracker","createGameTypeSettings","__baseClass","parsingResults","parsePGN4","injectBoard","FENData","fenDataDecorators","variantRuleData","validateVariantRules","initPieceControls","pieceSet","pieces","size","builder","pieceControlDecorators","pieceControlConfigurator","controls","a","isComplexSetup","assign","row","runComplexLegalityEvaluationChecks","targetObject","copyClass","presumedPieceLetters","Set","hasOwnProperty","call","add","isKingInCheck","baseColor","royal","slidingPieces","hoppingPieces","playerPieces","isEmpty","deadColorIndex","getCheckmatesAndStalemates","kingChecks","playerArmy","kingCaptures","stalemates","hasComplexRules","moveGenerationSettings","isComplex","hasComplexPieces","getCurrentChecks","playerRoyals","attackingCoordinates","pieceMovements","_step4$value","_slicedToArray","startingCoordinate","attack","compareCoordinates","returnValues","ignoreNextMoves","pregeneratedAttacks","affectOptions","ignoreCheckmateChecks","ignoreNextTurn","setNewMove","fenDataString","constructPreliminaryHashString","InternalMoveSignature","exclusiveSideToMoveGeneration","army","armyColor","coordinate","controlBuilder","setting","resultingMoves","getBaseColors","getPseudoLegalMoves","isJumping","rayGenJumpingAttacks","_step9","_iterator9","hoppingPieceLines","l","attackingColors","isSliding","_step10","_iterator10","rayGenSlidingAttacks","_step12","_iterator12","_step13","_iterator13","subAttack","slidingPiecesLines","m","_step11","_iterator11","AttackType","_step14","_iterator14","_step15","isRoyalOnLine","resultingAttack","_iterator15","_royal$_color","slidingPiecesRayTracing","nonPlayablePieces","pawnPieceString","isSetupComplex","isComplexEvaluation","isTheMoveLegal","isSeirawanDrop","royals","_moveData$startCoordi","pieceI","pieceJ","_moveData$endCoordina","endCoordinates","attackI","attackJ","moveArray","wallPieceString","_this$makeMove","_ref2","royalI","royalJ","_step16","isRoyalMove","attackers","targetSafety","legalitySettings","canKingCapture","_iterator16","kingCaptureColor","royalDefendedSquare","isFFA","_step17","_iterator17","_step21","_step17$value","attackingPiece","attackLine","isPieceUnderAttack","isRoyalUnderAttack","isTheTargetSquarePinListed","_iterator21","_step21$value","attackedX","attackedY","_step18","_iterator18","_step18$value","attackCoordinates","_step19","_iterator19","_step20","_step19$value","isTheTargetSquareBlocked","_iterator20","_step20$value","getCastlingMoves","specialMoves","isKingsideCastlingAvailable","getKingsideCastlingEndCoordinate","isQueensideCastlingAvailable","getQueensideCastlingEndCoordinate","getEnPassantMoves","pieceLetter","isPawn","enPassantCaptures","getAvailableEnPassantCaptures","pawnAttacks","_step22","_iterator22","_step23","_iterator23","enP","isIrreversible","irreversible","getSpecialMoves","_this$board$i","pseudoLegalMoves","generatedMove","split","capturedPieces","isKingCapture","c","_piece","currentMoves","maximum","pointIndexes","DisplaySettings","Highlighted","Fogged","Ghosted","Blindfolded","PieceFacesCenter","baseTeams","unstringifyCoordinate","Number","every","isNaN","teamSettings","firstTeamColors","secondTeamColors","isSameTeam","colorA","colorB","getTeammateColor","teammateIndex","indexOf","verifyNumericColor","variantRuleCache","coordinate1","coordinate2","FENOptions","createFENOptionsTags","pieceCoordinates","pieceEndCoordinates","checkSquares","static","newTags","tagsSnapshot","createFENOptionsTagsSnapshot","tags","loadTagSnapshot","verifyKeyTag","newOptions","setTag","fenTag","serializedState","generateCastling","_this","_this$tag2","dimensionRY","dimensionBG","dimensions","royalRanks","royalCoordinates","kingsideCastlePieceCoordinate","queensideCastlePieceCoordinate","boardSquares","royalCoordinateI","royalRanksI","condition","royalCoordinate","kArr","castlingData","castlingQueensideData","castlingKingsideData","castleQueenside","qArr","isCastlingAvailable","player","squares","checkSquare","coordinateA","coordinateB","getCastlingEndCoordinate","_this$tag$player","getKingsideCastlingPieceEndCoordinate","getQueensideCastlingPieceEndCoordinate","getKingsideCastlingTandemPiece","getQueensideCastlingTandemPiece","enPassant","botAlgorithms","ZombieType","plyCount","privateGameOver","newFENData","fenOptionsSnapshot","isDead","getCastlingPieceEndCoordinates","processStandardMove","_promotion$","startI","startJ","endI","endJ","endPiece","_this$getCastlingPiec2","kingsidePiece","queensidePiece","secondKPiece","_this$fenOptions$getK2","kI","kJ","secondQPiece","_this$fenOptions$getQ2","qI","qJ","castleKingside","royalPiece","spreadPointsBetweenPlayersEvenly","realPlayers","individualPoints","ceil","obtainPointsForMate","assignPoints","branchBetweenResignationMoves","playerName","toUpperCase","processInternalMove","internalMove","_this$board$insuffici","insufficientMaterial","checkCurrentState","assignGeneralTermination","turnPiecesDead","createDefaultArmyDeathSettings","excludeRoyals","doNotSetDead","deadPlayers","Boolean","isResignationOver","alivePlayer","findIndex","countTotalPointsOnBoard","processDroppingMove","bank","areBanksEnabled","setupComplete","playerBank","pieceStringReference","safeReference","bankPieceCount","delete","settings","onlyPawns","getKingCaptures","processPointsForChecks","currentChecks","updatedChecks","playerChecks","has","checkedPlayers","moveStalemates","endSquare","createDefaultFENEffectSettings","_ref","totalMateSum","boardAlternations","pointDistribution","checkmatePoints","pieceCapturingPoints","getPointsForPiece","isOver","_this$board$insuffici2","insufficientPieces","insufficient","getNeighboringSideToMove","previousTurn","singlesPoints","zombieImmune","resultingPoints","firstAlivePlayer","maximumIndex","generalTermination","verifyWinningTermination","verifyDrawingTermination","verifyParameterType","param","isArray","createBooleanTupleTag","defaultValue","isStatic","name","resultingObject","serialize","tuple","getName","createPawnBaseRankTag","createEnPassantTag","input","_parseEnPassantCoordi","parseEnPassantCoordinates","some","convertCoordinateToPGN4","createCastleWithTag","createBoxOffsetTag","createBooleanTag","String","defaultDimension","createDimensionTag","baseInput","reverse","defaultZombies","createZombiesTag","newZombies","zombieType","verifyZombieType","createRoyalTag","_parseSingleCoordinat","parseSingleCoordinate","mapNewEndCoordinate","start","end","currentValue","newValue","changedIndex","createLivesTag","createBankTag","defaultBanks","_pieceDefinition$spli2","_pieceDefinition$spli3","count","charAt","verifyPieceLetter","createPieceFromString","resultingStrings","entries","_ref3","_ref4","pieceStringObject","createPromotedFromTag","promotedFromMap","verifyObjectType","parsedCoordinate","promotedFromStrings","_step5$value","newMap","_step6$value","clear","_step7$value","_ref5","createSetupPointsTag","createSeirawanDropsTag","seirawanDropsArray","pieceDefinition","PGN4_SYNTAX","coord","values","verifyDynamicFENOptionKey","verifyDynamicTag","Tags","pawnBaseRank","boxOffset","dim","noCorners","castleWith","lives","promotedFrom","setupPoints","seirawanDrops","resultingTags","playerNames","individualTerminations","generalWinningTerminations","includes","generalDrawingTerminations","generalTerminations","validateTerminationString","capitalizedTermination","str","startsWith","endsWith","fromCharCode","alternation","convertCoordinateToPGN4Array","getOppositePlacedColor","wall","transparentWall","colorEnum","g","verifyColorEnumValue","stringColorEnum","pieceString1","pieceString2","_color","getStringifiedColor","testEmptyPieceString","emptyLetter","testWallPieceString","wallPieceLetter","testActivePieceString","pawnPieceLetter","duckLetter","duckPieceString","generateCastlingString","extractPiece","obtainAmbiguousOrthogonality","moveMetadata","_parameters$snapshot","_moveMetadata$movingP","registeredPieces","_step$value","movements","boardPiece","c2","extractPromotion","extractChecksAndCheckmates","repeat","moveNotation","fullMoveNotation","resultingString","firstStandardMoveCaptureSet","shortenedMoveNotation","shortenedMoveNotationStringify","_moveWrapper$metadata","isFirstCapturingMoveSet","_obtainAmbiguousOrtho2","ambiguousRank","ambiguousFile","annotation","baseSnapshot","snapshots","WeakMap","boardHashes","startingSnapshot","hash","stripEmptyAlternativeLines","splice","stripDeletedMoveHashes","boardHash","currentLine","addBoardSnapshot","hasAdditionalPath","assignMoveWrapperKey","getMoveFromPathAndTree","baseMoveWrapper","alternativeFirstMove","obtainMatchingAlternativeLine","items","finalIndex","newCurrentMove","indexOfMinus","lastNumber","popped","pop","alterCurrentPath","getHash","preliminaryHashString","totalCount","standardMove","postMoveResults","deadColors","lastCurrentMoves","lastCurrent","alternativeLineContainer","boardObject","serializedForm","ps","verifyMoveWrapperProperties","move1","move2","EnPassant","createDummyMoveMetadata","requiredSettings","_movePath$shift","movePath","currentSelection","shift","currentIndex","index","getLatestChainedMoves","sliding","jumping","rayGenCache","hooks","useTrajectory","usePerspective","usePawnLogic","useHopping","baseRankActive","configuration","_configuration$baseRa","_configuration$coordi","baseRankCalc","baseRank","isRayTrace","attackType","modifyDisplacements","pushMove","_settings$irreversibl","_settings$irreversibl2","isRayGen","promotionRanks","promotionPieces","generateSlidingAttack","_settings$limit","_settings$special","_this$hooks$usePerspe","_settings$displacemen","displacement","displacementI","displacementJ","limit","Infinity","special","rayTraceLimit","_this$modifyDisplacem2","iLength","jLength","getMovePossibility","generateJumpAttack","_settings$special2","_this$hooks$usePerspe2","_settings$displacemen2","squareBlockingIndex","_this$modifyDisplacem4","isTestPassed","_this$hooks$usePerspe3","trajectoryX","trajectoryY","trajectory","_this$modifyDisplacem6","_configuration$displa","pushTo","getPossibleCells","trace","slidingLines","orthogonalMoves","diagonalMoves","kingDirections","camelHops","dabbabaHops","alfilHops","createPieceDeclaration","baseClassRef","super","teamsPoints","botFFAValue","botTeamsValue","defaultPieces","isColorBound","naming","shortName","dameLetter","description","stoneGeneralControl","soldierControl","xiangqiHorseControl","grasshopperPieceLetter","Normal","MoveOnly","AttackOnly","RayGen","RayTrace","RayTraceLimited","nonPlayableValues","rook","VariantRule","rv","variantRuleList","initializeBaseHandler","handler","decorator","initializeWrappingHandler","wrappingDecorators","injectIntoBaseClass","callback","bind","callHandler","method","decoratorMethod","decoratorType","getDecoratorType","verifyPrototypeProperty","superClass","prototypeMethod","getInsufficientMaterialData","isPartiallyDisabled","isDisabled","objectPrototype","Reflect","ownKeys","_Reflect$getPrototype","getPrototypeOf","baseClass","classReference","decoratorProperties","methods","lastInheritedMethods","basePrototype","verifyKeyInDecoratorProperties","k","_basePrototype","getOwnPropertyNames","property","localProperty","defineProperty","enumerable","configurable","_loop2","variantRuleChain","variantDecorator","variant","variantFunc","writable","require","AllowPassing","parameterValue","information","variantRuleColors","displayIcon","matchesPGNDeclaration","match","serializeToParsingForm","variantDataRules","giveaway","passingMoves","AlternativeTeams","teammate","rbTeams","teamOne","teamTwo","matchArray","getParametrizedOptions","_decorator$initDecora","BarePieceRule","_this$decorator","Blindfold","CaptureTheKing","taboo","Chess960","colorBoundPieces","supermajorPieces","minorPieces","edgePieces","positionID","regExp","newID","nr","rank","chess960ranges","legacy","legacy2PThreshold","legacy2PRank","legacy2PTakeaway","legacy4Prank","pieceArrays","ranks","walls","intersections","pieceMasks","c960range","calcNr","positions","generatePositionIndexes","colorBoundIndexes","floor","sort","supermajorIndex","minorPieceIndexes","minorPieceCache","position","edgeSet","royalSet","colorDelta","majorDelta","_i","_intersections","intersection","calcTempNr","cycles","twins","royalPieces","royalOnCorrectRank","replaceRow","createBaseChess960mappings","supermajorOverRoyal","mI","Crazyhouse","FiftyMoveRule","resultingMoveDrops","isRY","pawnPromotionRank","promotionRank","moveDrop","_this$decorator$makeM","DuckChess","latestMoves","ducks","emptySquares","droppingChainedMoves","duckChainedMoves","emptySquare","FogOfWar","currentPlayerMoves","_arr","drop","ForcedCapture","hasCaptures","Anonymous","players","elo","SemiAnonymous","shuffleArray","_decorator$initDecora2","SelfPartner","fenTags","_decorator$initDecora3","firstTeamPlayer","secondTeamPlayer","Ghostboard","ParadigmChess30","positionId","getInformation","paradigmRanges","twoPlayerRank","twoPlayerAdjustment","_royalPieces$player","moveCoordinate","iter","_pieceCoordinates$i$s","rp","permutations","PiecesFaceCenter","SeirawanSetup","setupChess","_this$decorator$data","disabledIndex","returnValue","_this$decorator$data2","stringifiedCoordinate","validateWithDrops","continuations","SelfCheck","nCheck","captureTheKing","baseChecks","newCoordinates","_step2$value","SetupChess","options","areSetupPointsUnset","bankEnabled","wereBanksEnabled","files","pawnRanks","permutationCoordinates","flatMap","pawnPermutationCoordinates","disabled","getCoordinateList","pointValue","pointsLeft","anyDrop","Taboo","initialDead","newDead","onlyUnique","stringifyKey","getPieceInFront","comfuterAlgorithm","createBotAlgorithm","boardAccessors","augmentBoardAccessorsFromBoard","remainingReal","remaining","coverage","hangingCache","coverageCache","pieceValueCache","getDistanceFromKing","abs","getCoverage","_boardAccessors2","defaultSideToMove","defenders","cvg","pieceC","pieceColor","cache","getPieceValue","_boardAccessors3","isTeams","controlSetting","promotionDistance","getDistanceFromPromotion","_getCoverage","isRoyal","getCoordinationEval","_boardAccessors4","firstPlayerMovesBefore","p1","p2","_boardAccessors5","next","hanging","pieceValue","_boardAccessors7","_getCoverage3","attackerValue","pc","min","attackedFromLeft","pawnDefends","threatened","h","underDefended","attackingPlayers","canRespondDirectlyToThreat","getKingSafetyEval","_boardAccessors12","kingEval","checkableEval","exposedEval","_step26","baseReferences","_iterator26","_step26$value","_step27","_iterator27","_step30","_step27$value","_iterator30","squareAccessDefinitions","isChecked","checkableSq","_step28","prev","_iterator28","accessKey","ki","kj","_i3","_x2","_step29","_iterator29","_boardSquares$_i","_boardSquares$_i2","_getCoverage5","getEval","totalEval","_boardAccessors14","isKingsideCastle","isQueensideCastle","_boardAccessors","destinations","dest","inspectCoverage","_getMaterialEval","_boardAccessors10","myMaterial","oppMaterial","pcVal","getMaterialEval","hillEval","getDistFromHill","_boardAccessors9","_board$getCheckmatesA","checksLength","barePieceRule","getMatesEval","_boardAccessors8","_board$preGeneratedAt","_board$preGeneratedAt2","blockedBy","bSqr","getMobilityEval","partner","_boardAccessors11","pinnedEval","discovsEval","discovered","pins","_step24","_royalPiece","royalX","royalY","pieceX","pieceY","_iterator24","_step25","_step24$value","attackPiece","_iterator25","_step25$value","_pins","sqrt","_i2","_discovered","getPinsEval","_boardAccessors13","targetPiece","isZombieEatZombie","fiftyMoveRule","stringifiedType","initializeBoardAccessorsFromBoard","_step31","moveValues","_iterator31","evaluations","_step32","sorted","best","_iterator32","_step32$value","evaluated","pick","random","randomlyPickNextChainedMoves","createComfuterAlgorithm","createComfuterBasedAlgorithm","comfuterCheckerAlgorithm","baseEvaluations","evaluation","_board$makeMove","comfuterMuncherAlgorithm","comfuterPusherAlgorithm","_step3$value","patzerAlgorithm","defaultBoard","RanterAlgorithm","randoBotAlgorithm","isForcedContinuation","copyOfMoves","zombieEatZombieMoves","otherMoves","startingEvaluation","createRandomBasedAlgorithm","checkerAlgorithm","muncherAlgorithm","pusherAlgorithm","_variantRule$getInsuf","noRoyalsToMate","hasPromotion","disabledRank","getRoyalPieceMedians","_this$state","royalMoveMedians","extraWalls","accumulator","median","minimumMedian","stalemateOptions","stalemateOptionsValues","obtainPieceSymbolFromCoordinate","_this$state2","optimizedPieces","pieceSquareMedians","backwardsPieceRegistry","availableSymbols","selectedSymbol","candidates","getOwnPropertySymbols","candidateIndex","getPartialIntersection","royalColor","_this$obtainPieceSymb","enemyCoordinate","resultingInsufficientPieces","royalPieceMedians","_this$state3","oppositionMedians","squaresPlayerCanOutrange","fenRoyal","currentColorBounds","royalsCannotCapture","_this$obtainPieceSymb3","medians","_pieceSquareMedians$p","subSymbol","_pieceSquareMedians$p2","sum","emptyBoard","NON_INDEXED_PIECE_SYMBOL","optimizePieceSet","initializeRoyals","possibleRoyals","royalPieceSets","recurseThroughSquares","pieceMoveRegistry","currentSquares","unvisitedSquares","baseBuilder","registryResult","Uint16Array","oneBitMask","recurse","moveLength","moveString","binaryMasks","_value$split2","parseInt","Symbol","valueArr","addToBoardDestinations","boardDestinations","getBoardDestinations","initializeBackwardsPieceRegistry","entry","uintArray","isAlwaysIntersecting","permutationArray","permutationEntry","uintArr","remappedSymbols","remappedSymbol","_this$state$backwards","_j2","_this$state$backwards2","uintValues","sym","remapped","generateOppositionSquares","royalMoves","oppositionRowEchelon","finalArray","findMinimumOnBoardSquares","generateOppositeMedians","rowEchelon","royalPieceA","royalPieceB","_loop3","i2","_loop4","_j3","_jjIndex$toString","_iiIndex$toString","j2","jjIndex","iiIndex","toString","newResultingSquares","dimSquare","bitCount","minimum","generatePieceMoveMedians","_this2","currentMessages","requiredMessages","_loop5","_loop6","registeredSymbol","pieceMedianCounter","Worker","URL","moveRegistryArray","uint","buffer","royalPieceSet","terminate","_this$generateOpposit","_e$data","resultingMedianArray","resultingSquares","royalMoveSet","countBitsOnBoard","resultingMedian","countMinimumOf2DArrayExcludingZero","counters","individualCounter","symbol","numericKey","indexingNumber","setBits","possiblePieces","maximumTarget","moveSet","_optimalRoyalMoveSets","optimalMoveSet","detractionSet","Atomic","RoyalsCannotCapture","baseCoordinates","addCoordinate","disI","disJ","coordinateI","coordinateJ","atomicCoordinates","DeadKingWalking","pointsForMate","enPassants","eligibleEnPassants","_eligibleEnPassants","enPassantCoordinate","enPassantInfo","FatalCapture","endCaptureCoordinates","_move$startCoordinate","_move$endCoordinates","returnType","fullMoves","totalFullMoves","textualForm","alivePlayers","Giveaway","StalemateOptions","capturedPiece","pointsForPiece","stalematePoints","KingOfTheHill","hillSquares","defaultCoordinates","toLowerCase","coordinatesArray","defaultRoyal","NCheck","defaultChecks","check","resultingMap","isNCheckValidated","isStandardMove","live","OppositeMultiplier","oppositeMultiplierValue","numericValue","MAXIMUM_MULTIPLIER","OppositeSideCastling","castlingDataReference","PiecesGoToBanks","captures","addPieceToBank","PlayForMate","PointsForMate","playForMate","stalemateLoses","stalemateWins","stalemateDraws","verifyCustomStalemateValue","presumedOption","_this$type","currentTurn","Takeover","detectedPieces","ThreefoldRepetition","totalRepetitions","totalRepetitionsRequired","AnyCapture","modifiedConfiguration","PromoteTo","inputPromotion","pieceNames","prefixWithIndefiniteArticle","compileEnumeration","filterPromotionPieceString","PromotionRank","formatOrdinalNumber","Sideways","Stonewall","Torpedo","minor","visual","autogenous","startingPosition","extending","widespread","pointsAlternation","phased","_regeneratorRuntime","exports","Op","hasOwn","obj","desc","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","info","resultName","nextLoc","pushTryEntry","locs","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","displayName","isGeneratorFunction","genFun","ctor","setPrototypeOf","__proto__","awrap","async","Promise","skipTempReset","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","createBaseParsingTypes","_callee","_context","variantRulePriorities","differentiateDecoratorMethods","verifyDecorator","parseVariantRules","variantClasses","forcedRules","finalList","rulesStrings","insertVariantRule","dependencies","dependency","dependencyArgs","decorators","ruleString","forcedRule","_forcedRules","rule","unshift","compileVariantRuleData","finalObject","properties","rvs","parameterArray","variantTypeTag","variantDateTag","variantSiteTag","variantTimeControlTag","variantTerminationTag","variantGameId","createPlayerDataTag","verifyTagInParsing","inputTag","tagNamesEqual","parseTag","newCurrentValue","unwrapTag","uniqueResultingTags","playerData","wrapTag","resultsTag","variantRulesTag","createDefaultVariantTags","variantType","tagContents","_Object$values","createFENDataTag","resultingRuleList","Date","site","increment","isDelay","_unwrapTag$match","defaultTC","_matchArray","minutesMatch","secondsMatch","delay","round","noIncrement","timeControlString","truncateNumber","gameNumber","id","GenericTags","pgn4Tags","pgn4Moves","substring","trim","parsePGN4Moves","variantTags","wasFEN4set","variantTag","nonPlayablePieceValues","defaultTags","moveTree","replace","SPLIT","PIECE_REGEX","PIECE_REGEX_SIMPLIFIED","MOVE_CAPTURING_REGEX","DUCK_MOVE_CAPTURING_REGEX","DROPPING_MOVE_CAPTURING_REGEX","BRACKETS","COMMENT_START","COMMENT_END","VARIATION_START","VARIATION_END","COORDINATE_REGEX","COMMENT_SYNTAXES","CLOCK","ARROWS","SQUARES","ANNOTATION","parseMoves","selectedMove","currentMoveData","moveList","currentPath","getMoveIndexes","parseComment","getEnumeratorIndex","findBracketIndex","depth","processMoveDataInsertion","_currentMove$comment","_currentMove$comment3","_currentMove$comment5","_currentMove$comment7","cloneMoveData","_currentMove$comment2","clockSyntax","arrowSyntax","_currentMove$comment4","arrow","numericColor","arrowCoordinates","squareSyntax","_currentMove$comment6","inputCoordinate","_currentMove$comment8","annotationMatch","obtainMoveFromInfo","internalType","obtainInternalType","promotionMatch","moveCoordinates","startCoordinate","endCoordinate","obtainStandardMove","droppingMove","_match","obtainDroppingMove","duckMove","obtainDuckMove","variationIncrement","isNumNaN","_currentMove$alternat","checkDimensionIntersection","dimensionI","dimensionJ","modifyFourBooleanParameter","part","fenDataArrayRef","booleans","predefinedFENpositions","fenDataTag","parts","verifyKeyInTags","initialParsing","replaceAll","_Object$entries","_Object$entries$_i","pieceStr","arrayDimension","baseLoop","_i4","_squares","baseBoard","serializeFENOptions","currentEmptySquares","charCodeAt","baseTag","content","definedTag","array","arr1","arr2","first","second","number","digits","multiplier","pow","adjusted","instance","customProperties","copy","lastTwoDigits","webpackContext","req","webpackContextResolve","__webpack_require__","o","code","module"],"sourceRoot":""}