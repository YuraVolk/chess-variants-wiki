{"version":3,"file":"src_main_client_ts_logic_movegen_VariantRules_VariantRuleDefinitions_BoardVariantModules_Insu-520908.react-app.js","mappings":"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","sources":["webpack://spring-react-app/./src/main/client/ts/baseTypes.ts","webpack://spring-react-app/./src/main/client/ts/logic/BaseInterfaces.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/GameInformation/GameData.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/GameInformation/GameUnits/GameUnits.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/PieceControl/PieceControlInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/PieceMedianCounter.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/Utilities.ts","webpack://spring-react-app/./src/main/client/ts/utils/ArrayUtils.ts","webpack://spring-react-app/./src/main/client/ts/utils/NumberUtils.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type FunctionType = (...args: any[]) => any;\nexport const verifyFunctionType = (func: unknown): func is FunctionType => typeof func === \"function\";\n\nexport type Length<T extends unknown[]> = T extends { length: infer L } ? L : never;\nexport type Tuple<T, N extends number> = N extends N ? (number extends N ? T[] : _TupleOf<T, N, []>) : never;\ntype _TupleOf<T, N extends number, R extends unknown[]> = R[\"length\"] extends N ? R : _TupleOf<T, N, [T, ...R]>;\n\nexport type Add<A extends number, B extends number> = Length<[...Tuple<unknown, A>, ...Tuple<unknown, B>]>;\nexport const createTuple = <T, L extends number>(val: T, length: L) => Array.from<L, T>({ length }).fill(val);\nexport const createTupleFromCallback = <T, L extends number>(val: (v: unknown, k: number) => T, length: L): Tuple<T, L> =>\n\tArray.from({ length }, val);\nexport const verifyTupleType = <T, L extends number>(arr: T[], length: L): arr is Tuple<T, L> => arr.length === length;\n\nexport type ImplementInterface<T, U> = Pick<T, Exclude<keyof T, keyof U>> & U;\n\nexport function assertNonUndefined<T>(data: T): asserts data is NonNullable<T> {\n\tif (data == null) throw new Error(\"Expected the data above to be anything but null or undefined\");\n}\n\nexport function throwOnNever(arg: never): never {\n\tconsole.dir(arg);\n\tthrow new TypeError(`Unexpected argument that is supposed to be of type never`);\n}\n\nexport function importAll(r: __WebpackModuleApi.RequireContext) {\n\tr.keys().forEach(r);\n}\n\nexport function getEnumKeys<T extends Record<PropertyKey, unknown>>(object: Record<keyof T, unknown>): Array<keyof T> {\n\tconst resultingArray: Array<keyof T> = [];\n\tlet key: keyof T;\n\tfor (key in object) resultingArray.push(key);\n\treturn resultingArray;\n}\n\ntype ArrayKeys<T extends unknown[] | readonly unknown[]> = Exclude<Partial<T>[\"length\"], T[\"length\"]> extends never | undefined\n\t? number\n\t: Exclude<Partial<T>[\"length\"], T[\"length\"]>;\n\ndeclare global {\n\tinterface Array<T> {\n\t\tindexOf(searchElement: T, fromIndex?: number): ArrayKeys<this> | -1;\n\t\tlastIndexOf(searchElement: T, fromIndex?: number): ArrayKeys<this> | -1;\n\t\tevery<S extends T>(predicate: (value: T, index: ArrayKeys<this>, array: T[]) => value is S): this is { [K in keyof this]: S };\n\t\tevery(predicate: (value: T, index: ArrayKeys<this>, array: T[]) => unknown, thisArg?: T[]): boolean;\n\t\tsome(predicate: (value: T, index: ArrayKeys<this>, array: T[]) => unknown, thisArg?: T[]): boolean;\n\t\tforEach(callbackfn: (value: T, index: ArrayKeys<this>, array: T[]) => void, thisArg?: T[]): void;\n\t\tmap<U>(callbackfn: (value: T, index: ArrayKeys<this>, array: T[]) => U): { [K in keyof this]: U };\n\t\tfilter<S extends T>(predicate: (value: T, index: ArrayKeys<this>, array: T[]) => value is S, thisArg?: T[]): S[];\n\t\tfilter(predicate: (value: T, index: ArrayKeys<this>, array: T[]) => unknown, thisArg?: T[]): T[];\n\t\treduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: T[]) => T): T;\n\t\treduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: T[]) => T, initialValue: T): T;\n\t\treduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: ArrayKeys<this>, array: T[]) => U, initialValue: U): U;\n\t\treduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: T[]) => T): T;\n\t\treduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: T[]) => T, initialValue: T): T;\n\t\treduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: ArrayKeys<this>, array: T[]) => U, initialValue: U): U;\n\t}\n\n\tinterface ReadonlyArray<T> {\n\t\tindexOf(searchElement: T, fromIndex?: number): ArrayKeys<this> | -1;\n\t\tlastIndexOf(searchElement: T, fromIndex?: number): ArrayKeys<this> | -1;\n\t\tevery<S extends T>(\n\t\t\tpredicate: (value: T, index: ArrayKeys<this>, array: readonly T[]) => value is S,\n\t\t\tthisArg?: T[]\n\t\t): this is { readonly [K in keyof this]: S };\n\t\tevery(predicate: (value: T, index: ArrayKeys<this>, array: readonly T[]) => unknown, thisArg?: T[]): boolean;\n\t\tsome(predicate: (value: T, index: ArrayKeys<this>, array: readonly T[]) => unknown, thisArg?: T[]): boolean;\n\t\tforEach(callbackfn: (value: T, index: ArrayKeys<this>, array: readonly T[]) => void, thisArg?: T[]): void;\n\t\tmap<U>(callbackfn: (value: T, index: ArrayKeys<this>, array: readonly T[]) => U, thisArg?: T[]): U[];\n\t\tfilter<S extends T>(predicate: (value: T, index: ArrayKeys<this>, array: readonly T[]) => value is S, thisArg?: T[]): S[];\n\t\tfilter(predicate: (value: T, index: ArrayKeys<this>, array: readonly T[]) => unknown, thisArg?: T[]): T[];\n\t\treduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: readonly T[]) => T): T;\n\t\treduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: readonly T[]) => T, initialValue: T): T;\n\t\treduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: ArrayKeys<this>, array: readonly T[]) => U, initialValue: U): U;\n\t\treduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: readonly T[]) => T): T;\n\t\treduceRight(\n\t\t\tcallbackfn: (previousValue: T, currentValue: T, currentIndex: ArrayKeys<this>, array: readonly T[]) => T,\n\t\t\tinitialValue: T\n\t\t): T;\n\t\treduceRight<U>(\n\t\t\tcallbackfn: (previousValue: U, currentValue: T, currentIndex: ArrayKeys<this>, array: readonly T[]) => U,\n\t\t\tinitialValue: U\n\t\t): U;\n\t}\n\n\tinterface ArrayConstructor {\n\t\tfrom<L extends number, T>(arrayLike: { readonly length: L }): Tuple<T, L>;\n\t\tfrom<T, U, L extends number>(iterable: { readonly length: L }, mapfn: (v: T, k: number) => U, thisArg?: T[]): Tuple<U, L>;\n\t}\n}\n","import { NumericColor } from \"@moveGeneration/GameInformation/GameUnits/GameUnits\";\nimport { createTupleFromCallback, Tuple } from \"../baseTypes\";\nimport { boardDimension } from \"./movegen/GameInformation/GameData\";\n\nexport interface Cloneable<T> {\n\tcreateClone(): T;\n}\n\nexport interface Memento<S> {\n\tcreateSnapshot(): S;\n\tloadSnapshot(snapshot: S): void;\n}\n\nexport type BoardSquares<T> = Tuple<Tuple<T, typeof boardDimension>, typeof boardDimension>;\nexport const initializeBoardSquares = <T>(baseValue: (v: unknown, k: number) => T): BoardSquares<T> =>\n\tcreateTupleFromCallback(() => createTupleFromCallback(baseValue, boardDimension), boardDimension);\n\nexport const isVerticalPlacement = (color: NumericColor): color is 0 | 2 => color % 2 === 0;\nexport function getVerticalPlacementModulus(num: number): 0 | 1 {\n\tconst result = num % 2;\n\tif (result !== 0 && result !== 1) throw new Error(`Invalid number passed: ${num}`);\n\treturn result;\n}\nexport function getHorizontalPlacementModulus(num: number): 0 | 1 {\n\tconst result = num % 2 ^ 1;\n\tif (result !== 0 && result !== 1) throw new Error(`Invalid number passed: ${num}`);\n\treturn result;\n}\n","import { throwOnNever, Tuple } from \"@client/ts/baseTypes\";\nimport { truncateNumber } from \"@utils/NumberUtils\";\nimport type { Coordinate, NumericColor } from \"./GameUnits/GameUnits\";\n\nexport type PlayerName = \"Red\" | \"Blue\" | \"Yellow\" | \"Green\" | \"White\" | \"Black\";\nexport type IndividualTermination = \"Won the Race\" | \"Checkmated\" | \"Stalemated\" | \"Forfeits on Time\" | \"Resigned\" | \"Claimed the Win\";\nexport type GeneralTermination = \"King of the Hill\" | \"King Captured\" | \"Checkmate\" | \"Stalemate\";\nexport type Result = \"1-0\" | \"0-1\" | \"½-½\";\nexport type DrawnResult = \"Threefold Repetition\" | \"Insufficient Material\" | \"Timeout vs Insufficient Material\" | \"50-move Rule\";\nexport type Termination =\n\t| `${Uppercase<PlayerName>} ${Uppercase<IndividualTermination>}!`\n\t| `${Uppercase<GeneralTermination | DrawnResult>} • ${Result}`\n\t| `${Uppercase<GeneralTermination>}!`\n\t| `${Uppercase<DrawnResult>}`\n\t| \"½-½ AGREED.\";\nexport const validateComprehensiveUnionArray =\n\t<T>() =>\n\t<U extends readonly T[]>(arr: U & ([T] extends [U[number]] ? unknown : never)) =>\n\t\tarr;\n\nexport interface TimeControl {\n\tbaseTime: number;\n\tincrement: number;\n\tisDelay: boolean;\n}\n\nexport const playerNames = validateComprehensiveUnionArray<PlayerName>()([\"Red\", \"Blue\", \"Yellow\", \"Green\", \"White\", \"Black\"] as const);\nconst individualTerminations = validateComprehensiveUnionArray<IndividualTermination>()([\n\t\"Won the Race\",\n\t\"Checkmated\",\n\t\"Stalemated\",\n\t\"Forfeits on Time\",\n\t\"Claimed the Win\",\n\t\"Resigned\"\n] as const);\nconst generalWinningTerminations = validateComprehensiveUnionArray<GeneralTermination>()([\n\t\"Checkmate\",\n\t\"King Captured\",\n\t\"King of the Hill\",\n\t\"Stalemate\"\n] as const);\nexport const verifyWinningTermination = (termination: string): termination is GeneralTermination => {\n\tconst generalWins: readonly string[] = generalWinningTerminations;\n\treturn generalWins.includes(termination);\n};\nconst generalDrawingTerminations = validateComprehensiveUnionArray<DrawnResult>()([\n\t\"50-move Rule\",\n\t\"Insufficient Material\",\n\t\"Threefold Repetition\",\n\t\"Timeout vs Insufficient Material\"\n] as const);\nexport const verifyDrawingTermination = (termination: string): termination is DrawnResult => {\n\tconst generalDraws: readonly string[] = generalDrawingTerminations;\n\treturn generalDraws.includes(termination);\n};\nconst generalTerminations = validateComprehensiveUnionArray<GeneralTermination | DrawnResult>()([\n\t...generalWinningTerminations,\n\t...generalDrawingTerminations\n] as const);\nconst results = validateComprehensiveUnionArray<Result>()([\"0-1\", \"1-0\", \"½-½\"]);\n\nexport interface GamePlayerData {\n\telo?: number;\n\tname?: string;\n}\nexport interface GameData {\n\tgameNumber: number | undefined;\n\ttimeControl: TimeControl;\n\tplayers: Tuple<GamePlayerData, typeof totalPlayers>;\n\tsite: string | undefined;\n\tdate: Date | string | undefined;\n\tresult: string | undefined;\n\ttermination: Termination | undefined;\n}\n\nexport const validateTerminationString = (termination: string): termination is Termination => {\n\tconst capitalizedTermination = termination.toUpperCase();\n\tif (\n\t\tplayerNames.some((str) => capitalizedTermination.startsWith(str.toUpperCase())) &&\n\t\tindividualTerminations.some((str) => capitalizedTermination.endsWith(str.toUpperCase() + \"!\"))\n\t) {\n\t\treturn true;\n\t} else if (\n\t\t/.*?\\s•\\s.*/.test(capitalizedTermination) &&\n\t\tgeneralTerminations.some((str) => capitalizedTermination.startsWith(str.toUpperCase())) &&\n\t\tresults.some((str) => capitalizedTermination.endsWith(str.toUpperCase()))\n\t) {\n\t\treturn true;\n\t} else if (capitalizedTermination === \"½-½ AGREED.\") {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\nexport const stringifyTimeControl = (timeControl: TimeControl): string => {\n\tconst noIncrement = timeControl.increment === 0;\n\tlet timeControlString = \"\";\n\tif (timeControl.baseTime < 60) {\n\t\ttimeControlString += noIncrement ? `${timeControl.baseTime * 60} sec` : `${timeControl.baseTime * 60}s`;\n\t} else if (timeControl.baseTime > 60 && noIncrement) {\n\t\ttimeControlString += `${truncateNumber(timeControl.baseTime / 60, 1)} min`;\n\t} else {\n\t\ttimeControlString += truncateNumber(timeControl.baseTime / 60, 1);\n\t}\n\n\tif (!noIncrement) {\n\t\ttimeControlString += \"|\";\n\t\ttimeControlString += timeControl.increment;\n\t}\n\tif (timeControl.isDelay) {\n\t\ttimeControlString += \"D\";\n\t}\n\n\treturn timeControlString;\n};\nexport const obtainTimeControlType = (timeControl: TimeControl): TimeControlType => {\n\tconst { baseTime, increment, isDelay } = timeControl;\n\tif (isDelay) {\n\t\tconst formula = baseTime / 40 + increment;\n\t\tif (formula > 11.5) {\n\t\t\treturn TimeControlType.Rapid;\n\t\t} else if (formula <= 1.375) {\n\t\t\treturn TimeControlType.Hyperbullet;\n\t\t} else if (formula <= 4.5) {\n\t\t\treturn TimeControlType.Bullet;\n\t\t} else {\n\t\t\treturn TimeControlType.Blitz;\n\t\t}\n\t} else {\n\t\tconst formula = baseTime / 60 + increment;\n\t\tif (formula > 7.5) {\n\t\t\treturn TimeControlType.Rapid;\n\t\t} else if (formula <= 0.5) {\n\t\t\treturn TimeControlType.Hyperbullet;\n\t\t} else if (formula <= 3) {\n\t\t\treturn TimeControlType.Bullet;\n\t\t} else {\n\t\t\treturn TimeControlType.Blitz;\n\t\t}\n\t}\n};\n\nexport const convertCoordinateToPGN4 = (coordinate: Coordinate, dimension = boardDimension): string => {\n\tif (dimension === boardDimension) {\n\t\treturn `${String.fromCharCode(coordinate[1] + 97)}${boardDimension - coordinate[0]}`;\n\t} else {\n\t\tconst alternation = (boardDimension - dimension) / 2;\n\t\treturn `${String.fromCharCode(coordinate[1] - alternation + 97)}${boardDimension - coordinate[0] - alternation}`;\n\t}\n};\nexport const convertCoordinateToPGN4Array = (coordinate: Coordinate, dimension = boardDimension): [string, number] => {\n\tif (dimension === boardDimension) {\n\t\treturn [String.fromCharCode(coordinate[1] + 97), boardDimension - coordinate[0]];\n\t} else {\n\t\tconst alternation = (boardDimension - dimension) / 2;\n\t\treturn [String.fromCharCode(coordinate[1] - alternation + 97), boardDimension - coordinate[0] - alternation];\n\t}\n};\n\nexport const getOppositePlacedColor = (color: NumericColor) => {\n\tswitch (color) {\n\t\tcase 0:\n\t\t\treturn 2;\n\t\tcase 1:\n\t\t\treturn 3;\n\t\tcase 2:\n\t\t\treturn 0;\n\t\tcase 3:\n\t\t\treturn 1;\n\t\tdefault:\n\t\t\treturn throwOnNever(color);\n\t}\n};\nexport const getPlayerNameFromColor = (color: NumericColor, wb = false): PlayerName => {\n\tswitch (color) {\n\t\tcase 0:\n\t\t\treturn wb ? \"White\" : \"Red\";\n\t\tcase 1:\n\t\t\treturn \"Blue\";\n\t\tcase 2:\n\t\t\treturn wb ? \"Black\" : \"Yellow\";\n\t\tcase 3:\n\t\t\treturn \"Green\";\n\t\tdefault:\n\t\t\treturn throwOnNever(color);\n\t}\n};\n\ninterface NumericColorAugmentationSettings {\n\twb: boolean;\n}\nexport const createDefaultNumericColorAdjustment = (): NumericColorAugmentationSettings => ({\n\twb: false\n});\n\nexport enum TimeControlType {\n\tHyperbullet = \"Hyperbullet\",\n\tBullet = \"Bullet\",\n\tBlitz = \"Blitz\",\n\tRapid = \"Rapid\"\n}\nexport enum VariantType {\n\tFFA = \"FFA\",\n\tTeams = \"Teams\",\n\tSolo = \"Solo\"\n}\n\nexport const totalPlayers = 4;\nexport const boardDimension = 14;\nexport const colors: readonly NumericColor[] = [0, 1, 2, 3];\n","import type { PlayerName } from \"../GameData\";\n\nexport type Coordinate = [i: number, j: number] | [i: number, j: number, promotion: string];\nexport type NumericColor = 0 | 1 | 2 | 3;\nexport const verifyNumericColor = (num: number): num is NumericColor => num >= 0 && num < 4;\nexport const nonPlayablePieces = {\n\twall: \"X\",\n\ttransparentWall: \"x\",\n\tduck: \"Θ\"\n} as const;\n\nexport const colorEnum = {\n\tr: 0,\n\tb: 1,\n\ty: 2,\n\tg: 3\n} as const;\nexport const verifyColorEnumValue = (value: string): value is keyof typeof colorEnum => value in colorEnum;\n\nexport const playerEnum: Record<PlayerName, NumericColor> = {\n\tRed: 0,\n\tBlue: 1,\n\tYellow: 2,\n\tGreen: 3,\n\tWhite: 0,\n\tBlack: 2\n} as const;\nexport const verifyPlayerEnumValue = (player: string): player is PlayerName => player in playerEnum;\n\nexport const stringColorEnum = {\n\t[0]: \"r\",\n\t[1]: \"b\",\n\t[2]: \"y\",\n\t[3]: \"g\",\n\t[4]: \"d\"\n} as const;\nexport type ColorEnum = (typeof stringColorEnum)[keyof typeof stringColorEnum];\n","import type { PieceString } from \"@moveGeneration/GameInformation/GameUnits/PieceString\";\nimport { Coordinate, nonPlayablePieces, NumericColor } from \"../GameInformation/GameUnits/GameUnits\";\nimport type { PieceControl } from \"./PieceControl\";\n\nexport const enum AttackType {\n\tNormal,\n\tMoveOnly,\n\tAttackOnly,\n\tRayGen,\n\tRayTrace,\n\tRayTraceLimited\n}\nexport interface PieceControlHooks {\n\tuseTrajectory: Coordinate[] | undefined;\n\tusePerspective: boolean[] | undefined;\n\tusePawnLogic: { promotionRanks?: [number, number, number, number]; promotionPieces?: PieceLetter[] } | undefined;\n\tuseHopping: boolean;\n}\nexport interface PieceControlConfiguration {\n\tdisplacement: Coordinate;\n\tspecial?: AttackType;\n\tlimit?: number;\n\tsquareBlockingIndex?: number;\n\trayGenCache?: Coordinate;\n\tirreversible?: true;\n}\n\nexport interface PieceControlConfigSettings {\n\tpoints: {\n\t\tsinglesPoints: number;\n\t\tteamsPoints: number;\n\t\tbotFFAValue: number;\n\t\tbotTeamsValue: number;\n\t};\n\tpiece: string;\n\tmoveGenerationSettings: {\n\t\tisComplex: boolean;\n\t\tisJumping: boolean;\n\t\tisSliding: boolean;\n\t\tisPawn: boolean;\n\t\tisColorBound: boolean;\n\t};\n\tnaming: {\n\t\tname: string;\n\t\tshortName: string;\n\t\tdescription?: string;\n\t};\n}\n\nexport const nonPlayableValues: string[] = Object.values(nonPlayablePieces);\ndeclare const pieceLetterTag: unique symbol;\nexport type PieceLetter = string & { _: typeof pieceLetterTag };\nexport const verifyPieceLetter = (piece: string): piece is PieceLetter =>\n\tpiece in pieceControlConfigSettings || nonPlayableValues.includes(piece);\n\nexport const pieceControlConfigSettings = nonPlayableValues.reduce<Record<PieceLetter, PieceControlSettings>>(\n\t(p, n) => ({\n\t\t...p,\n\t\t[n]: {\n\t\t\tpoints: {\n\t\t\t\tsinglesPoints: 0,\n\t\t\t\tteamsPoints: 0,\n\t\t\t\tbotFFAValue: 0,\n\t\t\t\tbotTeamsValue: 0\n\t\t\t},\n\t\t\tpiece: n,\n\t\t\tmoveGenerationSettings: {\n\t\t\t\tisComplex: false,\n\t\t\t\tisJumping: false,\n\t\t\t\tisSliding: false,\n\t\t\t\tisPawn: false\n\t\t\t},\n\t\t\tnaming: {\n\t\t\t\tname: \"Wall\",\n\t\t\t\tshortName: n\n\t\t\t}\n\t\t}\n\t}),\n\t{}\n);\nexport interface PieceControlSettings extends PieceControlConfigSettings {\n\tconstruct: new () => PieceControl;\n}\ninterface PieceControlDeclarationConfiguration<T extends PieceControl> {\n\tconfiguration: PieceControlConfigSettings;\n\tbaseClassRef: new () => T;\n}\nexport const createPieceDeclaration = <T extends PieceControl>(configuration: PieceControlDeclarationConfiguration<T>) => {\n\tpieceControlConfigSettings[configuration.configuration.piece as PieceLetter] = {\n\t\t...configuration.configuration,\n\t\tconstruct: configuration.baseClassRef\n\t};\n\n\treturn new configuration.baseClassRef();\n};\n\nexport interface PieceControlGeneratedMove {\n\tmove: Coordinate;\n\tirreversible: boolean;\n}\n\nexport interface PieceControlInternalMove {\n\ti: number;\n\tj: number;\n\tisRayGen?: boolean;\n\tirreversible?: boolean;\n}\n\nexport interface ControlConfiguration {\n\tcoordinates: [number, number];\n\tboard: PieceString[][];\n\timmunePieces: [boolean, boolean, boolean, boolean];\n\tcolor: NumericColor;\n\tbaseRank?: boolean;\n}\n\nfunction createPredefinedPieceLetter(letter: string) {\n\treturn letter as PieceLetter;\n}\n\nexport const pawnPieceLetter = createPredefinedPieceLetter(\"P\");\nexport const wallPieceLetter = createPredefinedPieceLetter(nonPlayablePieces.wall);\nexport const grasshopperPieceLetter = createPredefinedPieceLetter(\"G\");\nexport const defaultPieces = {\n\tqueen: createPredefinedPieceLetter(\"Q\"),\n\trook: createPredefinedPieceLetter(\"R\"),\n\tbishop: createPredefinedPieceLetter(\"B\"),\n\tknight: createPredefinedPieceLetter(\"N\"),\n\tking: createPredefinedPieceLetter(\"K\")\n} as const;\nexport const emptyLetter = createPredefinedPieceLetter(\"\");\nexport const duckLetter = createPredefinedPieceLetter(nonPlayablePieces.duck);\nexport const dameLetter = createPredefinedPieceLetter(\"D\");","import { createTupleFromCallback, Tuple } from \"@client/ts/baseTypes\";\nimport { BoardSquares, initializeBoardSquares } from \"@client/ts/logic/BaseInterfaces\";\nimport { boardDimension, colors, totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport type { PieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { countMinimumOf2DArrayExcludingZero } from \"@client/ts/utils/ArrayUtils\";\nimport { countBitsOnBoard } from \"./Utilities\";\n\nexport type PieceMedianCounterReturnType = Tuple<number | undefined, typeof totalPlayers>;\ninterface PieceMedianCounterSettings {\n\twalls: BoardSquares<boolean>;\n\tmoveRegistryArray: ArrayBufferLike[][];\n\troyalPieceSet: Tuple<PieceLetter[], typeof totalPlayers>;\n\troyalMoves: Tuple<ArrayBufferLike[][], typeof totalPlayers>;\n}\n\nself.onmessage = (e: MessageEvent<PieceMedianCounterSettings>) => {\n\tconst { walls, royalPieceSet, royalMoves, moveRegistryArray } = e.data;\n\tconst resultingMedianArray = createTupleFromCallback<BoardSquares<number> | undefined, typeof totalPlayers>(\n\t\t() => initializeBoardSquares(() => 0),\n\t\ttotalPlayers\n\t);\n\tfor (let i = 0; i < boardDimension; i++) {\n\t\tfor (let j = 0; j < boardDimension; j++) {\n\t\t\tif (walls[i][j]) continue;\n\t\t\tconst moves = new Uint16Array(moveRegistryArray[i][j]);\n\t\t\tfor (const color of colors) {\n\t\t\t\tif (royalPieceSet[color].length === 0) {\n\t\t\t\t\tresultingMedianArray[color] = undefined;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tlet resultingSquares = 0;\n\t\t\t\t\tfor (let royalI = 0; royalI < boardDimension; royalI++) {\n\t\t\t\t\t\tfor (let royalJ = 0; royalJ < boardDimension; royalJ++) {\n\t\t\t\t\t\t\tconst royalMoveSet = new Uint16Array(royalMoves[color][royalI][royalJ]);\n\t\t\t\t\t\t\tconst result = moves.map((e, x) => e & royalMoveSet[x]);\n\t\t\t\t\t\t\tconst newResultingSquares = countBitsOnBoard(result);\n\n\t\t\t\t\t\t\tif (newResultingSquares > resultingSquares) {\n\t\t\t\t\t\t\t\tresultingSquares = newResultingSquares;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst resultingMedian = resultingMedianArray[color];\n\t\t\t\t\tif (resultingMedian) resultingMedian[i][j] = resultingSquares;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpostMessage(\n\t\tresultingMedianArray.map((arr) => {\n\t\t\tif (arr) {\n\t\t\t\tconst minimum = countMinimumOf2DArrayExcludingZero(arr);\n\t\t\t\treturn minimum === Infinity ? 0 : minimum;\n\t\t\t} else return arr;\n\t\t})\n\t);\n};\n","import { boardDimension } from \"@moveGeneration/GameInformation/GameData\";\nimport { PieceLetter, verifyPieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { bitCount } from \"@utils/NumberUtils\";\n\nexport const binaryMasks = Array(boardDimension)\n\t.fill(1)\n\t.map((v, i) => (v << boardDimension) | (v << (boardDimension - 1 - i)));\nexport const oneBitMask = 1 << boardDimension;\n\nexport function countBitsOnBoard(board: Uint16Array): number {\n\tlet setBits = 0;\n\tfor (let x = 0; x < boardDimension; x++) {\n\t\tsetBits += bitCount(board[x] ^ oneBitMask);\n\t}\n\n\treturn setBits;\n}\n\nexport function findMinimumOnBoardSquares(board: Uint16Array[][]): number {\n\tlet minimum = Infinity;\n\tfor (let i = 0; i < boardDimension; i++) {\n\t\tfor (let j = 0; j < boardDimension; j++) {\n\t\t\tconst setBits = countBitsOnBoard(board[i][j]);\n\t\t\tif (setBits !== 0 && setBits < minimum) {\n\t\t\t\tminimum = setBits;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn minimum;\n}\n\nexport function optimizePieceSet(possiblePieces: string[], maximumTarget: boolean): Set<PieceLetter> {\n\tconst optimalRoyalMoveSets = [\n\t\t[\"β\", \"W\", \"R\", \"E\", \"M\", \"Q\", \"D\", \"A\"],\n\t\t[\"γ\", \"F\", \"B\", \"H\", \"M\", \"Q\", \"D\", \"A\", \"Δ\"],\n\t\t[\"Y\", \"Z\"],\n\t\t[\"I\", \"J\"],\n\t\t[\"S\", \"T\"],\n\t\t[\"S\", \"Y\"],\n\t\t[\"I\", \"Y\"],\n\t\t[\"U\", \"N\", \"O\"],\n\t\t[\"H\", \"A\"],\n\t\t[\"E\", \"A\"],\n\t\t[\"Δ\", \"H\"],\n\t\t[\"C\", \"L\"],\n\t\t[\"C\", \"V\"]\n\t];\n\tconst moveSet = new Set<PieceLetter>();\n\tfor (const optimalMoveSet of optimalRoyalMoveSets) {\n\t\tconst detractionSet = maximumTarget ? optimalMoveSet.slice().reverse() : optimalMoveSet;\n\t\tfor (const piece of possiblePieces) {\n\t\t\tif (detractionSet.includes(piece)) {\n\t\t\t\tconst target = detractionSet.slice(0, -detractionSet.indexOf(piece));\n\t\t\t\ttarget.forEach((t) => {\n\t\t\t\t\tif (possiblePieces.includes(t) && verifyPieceLetter(t)) moveSet.add(t);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (moveSet.size === 0) {\n\t\tpossiblePieces.forEach((p) => {\n\t\t\tif (verifyPieceLetter(p)) moveSet.add(p);\n\t\t});\n\t}\n\n\treturn moveSet;\n}\n","import { Tuple } from \"../baseTypes\";\n\nexport function shuffleArray<T>(array: T[]): T[];\nexport function shuffleArray<T, L extends number>(array: Tuple<T, L>): Tuple<T, L>;\nexport function shuffleArray<T, L extends number>(array: T[] | Tuple<T, L>): T[] | Tuple<T, L> {\n\tlet i = array.length;\n\tlet r = 0;\n\twhile (i !== 0) {\n\t\tr = Math.floor(Math.random() * i--);\n\t\t[array[i], array[r]] = [array[r], array[i]];\n\t}\n\n\treturn array;\n}\n\nexport function compareArrays(arr1: unknown[] | readonly unknown[], arr2: unknown[] | readonly unknown[]): boolean {\n\tif (arr1 === arr2) return true;\n\tif (arr1.length !== arr2.length) return false;\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tconst first = arr1[i],\n\t\t\tsecond = arr2[i];\n\t\tif (Array.isArray(first) && Array.isArray(second)) {\n\t\t\tif (!compareArrays(first, second)) return false;\n\t\t} else if (first !== second) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function countMinimumOf2DArrayExcludingZero(array: number[][]): number {\n\tlet minimum = Infinity;\n\tfor (const row of array) {\n\t\tfor (const number of row) {\n\t\t\tif (number !== 0 && number < minimum) {\n\t\t\t\tminimum = number;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn minimum;\n}\n\nexport function findLastIndex<T>(array: T[], callback: (value: T, index: number, arr: T[]) => boolean): number {\n\tlet i = array.length;\n\twhile (i--) {\n\t\tif (callback(array[i], i, array)) return i;\n\t}\n\treturn -1;\n}\n","export function truncateNumber(number: number, digits: number): number {\n\tconst multiplier = Math.pow(10, digits);\n\tconst adjusted = number * multiplier;\n\tif (adjusted < 0) {\n\t\treturn Math.ceil(adjusted / multiplier);\n\t} else {\n\t\treturn Math.floor(adjusted / multiplier);\n\t}\n}\n\nexport function bitCount(number: number): number {\n\tnumber = number - ((number >> 1) & 0x55555555);\n\tnumber = (number & 0x33333333) + ((number >> 2) & 0x33333333);\n\treturn (((number + (number >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;\n}\n"],"names":["verifyFunctionType","func","createTuple","val","length","Array","from","fill","createTupleFromCallback","verifyTupleType","arr","assertNonUndefined","data","Error","throwOnNever","arg","console","dir","TypeError","importAll","r","keys","forEach","getEnumKeys","object","resultingArray","key","push","boardDimension","initializeBoardSquares","baseValue","isVerticalPlacement","color","getVerticalPlacementModulus","num","result","concat","getHorizontalPlacementModulus","truncateNumber","validateComprehensiveUnionArray","playerNames","individualTerminations","generalWinningTerminations","verifyWinningTermination","termination","generalWins","includes","generalDrawingTerminations","verifyDrawingTermination","generalDraws","generalTerminations","results","validateTerminationString","capitalizedTermination","toUpperCase","some","str","startsWith","endsWith","test","stringifyTimeControl","timeControl","noIncrement","increment","timeControlString","baseTime","isDelay","obtainTimeControlType","formula","TimeControlType","Rapid","Hyperbullet","Bullet","Blitz","convertCoordinateToPGN4","coordinate","dimension","arguments","undefined","String","fromCharCode","alternation","convertCoordinateToPGN4Array","getOppositePlacedColor","getPlayerNameFromColor","wb","createDefaultNumericColorAdjustment","VariantType","totalPlayers","colors","verifyNumericColor","nonPlayablePieces","wall","transparentWall","duck","colorEnum","b","y","g","verifyColorEnumValue","value","playerEnum","Red","Blue","Yellow","Green","White","Black","verifyPlayerEnumValue","player","stringColorEnum","AttackType","Normal","MoveOnly","AttackOnly","RayGen","RayTrace","RayTraceLimited","nonPlayableValues","Object","values","verifyPieceLetter","piece","pieceControlConfigSettings","reduce","p","n","_objectSpread","points","singlesPoints","teamsPoints","botFFAValue","botTeamsValue","moveGenerationSettings","isComplex","isJumping","isSliding","isPawn","naming","name","shortName","createPieceDeclaration","configuration","construct","baseClassRef","createPredefinedPieceLetter","letter","pawnPieceLetter","wallPieceLetter","grasshopperPieceLetter","defaultPieces","queen","rook","bishop","knight","king","emptyLetter","duckLetter","dameLetter","countMinimumOf2DArrayExcludingZero","countBitsOnBoard","self","onmessage","e","_e$data","walls","royalPieceSet","royalMoves","moveRegistryArray","resultingMedianArray","i","j","moves","Uint16Array","_iterator","_createForOfIteratorHelper","_step","s","done","resultingSquares","royalI","_loop","royalMoveSet","royalJ","map","x","newResultingSquares","resultingMedian","err","f","postMessage","minimum","Infinity","bitCount","binaryMasks","v","oneBitMask","board","setBits","findMinimumOnBoardSquares","optimizePieceSet","possiblePieces","maximumTarget","optimalRoyalMoveSets","moveSet","Set","_i","_optimalRoyalMoveSets","optimalMoveSet","detractionSet","slice","reverse","target","indexOf","t","add","size","shuffleArray","array","Math","floor","random","_ref","compareArrays","arr1","arr2","first","second","isArray","row","_iterator2","_step2","number","findLastIndex","callback","digits","multiplier","pow","adjusted","ceil"],"sourceRoot":""}