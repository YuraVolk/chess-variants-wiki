{"version":3,"file":"513.react-app.js","mappings":"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","sources":["webpack://spring-react-app/./src/main/client/ts/baseTypes.ts","webpack://spring-react-app/./src/main/client/ts/logic/BaseInterfaces.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/GameInformation/GameData.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/GameInformation/GameUnits/GameUnits.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/PieceControl/PieceControlInterface.ts","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/Utilities.ts","webpack://spring-react-app/./src/main/client/ts/utils/ArrayUtils.ts","webpack://spring-react-app/./src/main/client/ts/utils/NumberUtils.ts","webpack://spring-react-app/webpack/bootstrap","webpack://spring-react-app/webpack/runtime/define property getters","webpack://spring-react-app/webpack/runtime/hasOwnProperty shorthand","webpack://spring-react-app/./src/main/client/ts/logic/movegen/VariantRules/VariantRuleDefinitions/BoardVariantModules/InsufficientMaterial/PieceMedianCounter.ts"],"sourcesContent":["export const verifyFunctionType = (func) => typeof func === \"function\";\nexport const createTuple = (val, length) => Array.from({ length }).fill(val);\nexport const createTupleFromCallback = (val, length) => Array.from({ length }, val);\nexport const verifyTupleType = (arr, length) => arr.length === length;\nexport function assertNonUndefined(data) {\n    if (data == null)\n        throw new Error(\"Expected the data above to be anything but null or undefined\");\n}\nexport function throwOnNever(arg) {\n    console.dir(arg);\n    throw new TypeError(`Unexpected argument that is supposed to be of type never`);\n}\nexport function importAll(r) {\n    r.keys().forEach(r);\n}\nexport function getEnumKeys(object) {\n    const resultingArray = [];\n    let key;\n    for (key in object)\n        resultingArray.push(key);\n    return resultingArray;\n}\n","import { createTupleFromCallback } from \"../baseTypes\";\nimport { boardDimension } from \"./movegen/GameInformation/GameData\";\nexport const initializeBoardSquares = (baseValue) => createTupleFromCallback(() => createTupleFromCallback(baseValue, boardDimension), boardDimension);\nexport const isVerticalPlacement = (color) => color % 2 === 0;\nexport function getVerticalPlacementModulus(num) {\n    const result = num % 2;\n    if (result !== 0 && result !== 1)\n        throw new Error(`Invalid number passed: ${num}`);\n    return result;\n}\nexport function getHorizontalPlacementModulus(num) {\n    const result = num % 2 ^ 1;\n    if (result !== 0 && result !== 1)\n        throw new Error(`Invalid number passed: ${num}`);\n    return result;\n}\n","import { throwOnNever } from \"@client/ts/baseTypes\";\nimport { truncateNumber } from \"@utils/NumberUtils\";\nexport const validateComprehensiveUnionArray = () => (arr) => arr;\nexport const playerNames = validateComprehensiveUnionArray()([\"Red\", \"Blue\", \"Yellow\", \"Green\", \"White\", \"Black\"]);\nconst individualTerminations = validateComprehensiveUnionArray()([\n    \"Won the Race\",\n    \"Checkmated\",\n    \"Stalemated\",\n    \"Forfeits on Time\",\n    \"Claimed the Win\",\n    \"Resigned\"\n]);\nconst generalWinningTerminations = validateComprehensiveUnionArray()([\n    \"Checkmate\",\n    \"King Captured\",\n    \"King of the Hill\",\n    \"Stalemate\"\n]);\nexport const verifyWinningTermination = (termination) => {\n    const generalWins = generalWinningTerminations;\n    return generalWins.includes(termination);\n};\nconst generalDrawingTerminations = validateComprehensiveUnionArray()([\n    \"50-move Rule\",\n    \"Insufficient Material\",\n    \"Threefold Repetition\",\n    \"Timeout vs Insufficient Material\"\n]);\nexport const verifyDrawingTermination = (termination) => {\n    const generalDraws = generalDrawingTerminations;\n    return generalDraws.includes(termination);\n};\nconst generalTerminations = validateComprehensiveUnionArray()([\n    ...generalWinningTerminations,\n    ...generalDrawingTerminations\n]);\nconst results = validateComprehensiveUnionArray()([\"0-1\", \"1-0\", \"½-½\"]);\nexport const validateTerminationString = (termination) => {\n    const capitalizedTermination = termination.toUpperCase();\n    if (playerNames.some((str) => capitalizedTermination.startsWith(str.toUpperCase())) &&\n        individualTerminations.some((str) => capitalizedTermination.endsWith(str.toUpperCase() + \"!\"))) {\n        return true;\n    }\n    else if (/.*?\\s•\\s.*/.test(capitalizedTermination) &&\n        generalTerminations.some((str) => capitalizedTermination.startsWith(str.toUpperCase())) &&\n        results.some((str) => capitalizedTermination.endsWith(str.toUpperCase()))) {\n        return true;\n    }\n    else if (capitalizedTermination === \"½-½ AGREED.\") {\n        return true;\n    }\n    return false;\n};\nexport const stringifyTimeControl = (timeControl) => {\n    const noIncrement = timeControl.increment === 0;\n    let timeControlString = \"\";\n    if (timeControl.baseTime < 60) {\n        timeControlString += noIncrement ? `${timeControl.baseTime * 60} sec` : `${timeControl.baseTime * 60}s`;\n    }\n    else if (timeControl.baseTime > 60 && noIncrement) {\n        timeControlString += `${truncateNumber(timeControl.baseTime / 60, 1)} min`;\n    }\n    else {\n        timeControlString += truncateNumber(timeControl.baseTime / 60, 1);\n    }\n    if (!noIncrement) {\n        timeControlString += \"|\";\n        timeControlString += timeControl.increment;\n    }\n    if (timeControl.isDelay) {\n        timeControlString += \"D\";\n    }\n    return timeControlString;\n};\nexport const obtainTimeControlType = (timeControl) => {\n    const { baseTime, increment, isDelay } = timeControl;\n    if (isDelay) {\n        const formula = baseTime / 40 + increment;\n        if (formula > 11.5) {\n            return TimeControlType.Rapid;\n        }\n        else if (formula <= 1.375) {\n            return TimeControlType.Hyperbullet;\n        }\n        else if (formula <= 4.5) {\n            return TimeControlType.Bullet;\n        }\n        else {\n            return TimeControlType.Blitz;\n        }\n    }\n    else {\n        const formula = baseTime / 60 + increment;\n        if (formula > 7.5) {\n            return TimeControlType.Rapid;\n        }\n        else if (formula <= 0.5) {\n            return TimeControlType.Hyperbullet;\n        }\n        else if (formula <= 3) {\n            return TimeControlType.Bullet;\n        }\n        else {\n            return TimeControlType.Blitz;\n        }\n    }\n};\nexport const convertCoordinateToPGN4 = (coordinate, dimension = boardDimension) => {\n    if (dimension === boardDimension) {\n        return `${String.fromCharCode(coordinate[1] + 97)}${boardDimension - coordinate[0]}`;\n    }\n    else {\n        const alternation = (boardDimension - dimension) / 2;\n        return `${String.fromCharCode(coordinate[1] - alternation + 97)}${boardDimension - coordinate[0] - alternation}`;\n    }\n};\nexport const convertCoordinateToPGN4Array = (coordinate, dimension = boardDimension) => {\n    if (dimension === boardDimension) {\n        return [String.fromCharCode(coordinate[1] + 97), boardDimension - coordinate[0]];\n    }\n    else {\n        const alternation = (boardDimension - dimension) / 2;\n        return [String.fromCharCode(coordinate[1] - alternation + 97), boardDimension - coordinate[0] - alternation];\n    }\n};\nexport const getOppositePlacedColor = (color) => {\n    switch (color) {\n        case 0:\n            return 2;\n        case 1:\n            return 3;\n        case 2:\n            return 0;\n        case 3:\n            return 1;\n        default:\n            return throwOnNever(color);\n    }\n};\nexport const getPlayerNameFromColor = (color, wb = false) => {\n    switch (color) {\n        case 0:\n            return wb ? \"White\" : \"Red\";\n        case 1:\n            return \"Blue\";\n        case 2:\n            return wb ? \"Black\" : \"Yellow\";\n        case 3:\n            return \"Green\";\n        default:\n            return throwOnNever(color);\n    }\n};\nexport const createDefaultNumericColorAdjustment = () => ({\n    wb: false\n});\nexport var TimeControlType;\n(function (TimeControlType) {\n    TimeControlType[\"Hyperbullet\"] = \"Hyperbullet\";\n    TimeControlType[\"Bullet\"] = \"Bullet\";\n    TimeControlType[\"Blitz\"] = \"Blitz\";\n    TimeControlType[\"Rapid\"] = \"Rapid\";\n})(TimeControlType || (TimeControlType = {}));\nexport var VariantType;\n(function (VariantType) {\n    VariantType[\"FFA\"] = \"FFA\";\n    VariantType[\"Teams\"] = \"Teams\";\n    VariantType[\"Solo\"] = \"Solo\";\n})(VariantType || (VariantType = {}));\nexport const totalPlayers = 4;\nexport const boardDimension = 14;\nexport const colors = [0, 1, 2, 3];\n","export const verifyNumericColor = (num) => num >= 0 && num < 4;\nexport const nonPlayablePieces = {\n    wall: \"X\",\n    transparentWall: \"x\",\n    duck: \"Θ\"\n};\nexport const colorEnum = {\n    r: 0,\n    b: 1,\n    y: 2,\n    g: 3\n};\nexport const verifyColorEnumValue = (value) => value in colorEnum;\nexport const playerEnum = {\n    Red: 0,\n    Blue: 1,\n    Yellow: 2,\n    Green: 3,\n    White: 0,\n    Black: 2\n};\nexport const verifyPlayerEnumValue = (player) => player in playerEnum;\nexport const stringColorEnum = {\n    [0]: \"r\",\n    [1]: \"b\",\n    [2]: \"y\",\n    [3]: \"g\",\n    [4]: \"d\"\n};\n","import { nonPlayablePieces } from \"../GameInformation/GameUnits/GameUnits\";\nexport var AttackType;\n(function (AttackType) {\n    AttackType[AttackType[\"Normal\"] = 0] = \"Normal\";\n    AttackType[AttackType[\"MoveOnly\"] = 1] = \"MoveOnly\";\n    AttackType[AttackType[\"AttackOnly\"] = 2] = \"AttackOnly\";\n    AttackType[AttackType[\"RayGen\"] = 3] = \"RayGen\";\n    AttackType[AttackType[\"RayTrace\"] = 4] = \"RayTrace\";\n    AttackType[AttackType[\"RayTraceLimited\"] = 5] = \"RayTraceLimited\";\n})(AttackType || (AttackType = {}));\nconst nonPlayableValues = Object.values(nonPlayablePieces);\nexport const verifyPieceLetter = (piece) => piece in pieceControlConfigSettings || nonPlayableValues.includes(piece);\nexport const pieceControlConfigSettings = nonPlayableValues.reduce((p, n) => ({\n    ...p,\n    [n]: {\n        points: {\n            singlesPoints: 1,\n            teamsPoints: 1,\n            botFFAValue: 1,\n            botTeamsValue: 1\n        },\n        piece: n,\n        moveGenerationSettings: {\n            isComplex: false,\n            isJumping: false,\n            isSliding: false,\n            isPawn: false\n        },\n        naming: {\n            name: \"Wall\",\n            shortName: n\n        }\n    }\n}), {});\nexport const createPieceDeclaration = (configuration) => {\n    pieceControlConfigSettings[configuration.configuration.piece] = {\n        ...configuration.configuration,\n        construct: configuration.baseClassRef\n    };\n    return new configuration.baseClassRef();\n};\nfunction createPredefinedPieceLetter(letter) {\n    return letter;\n}\nexport const pawnPieceLetter = createPredefinedPieceLetter(\"P\");\nexport const wallPieceLetter = createPredefinedPieceLetter(nonPlayablePieces.wall);\nexport const grasshopperPieceLetter = createPredefinedPieceLetter(\"G\");\nexport const defaultPieces = {\n    queen: createPredefinedPieceLetter(\"Q\"),\n    rook: createPredefinedPieceLetter(\"R\"),\n    bishop: createPredefinedPieceLetter(\"B\"),\n    knight: createPredefinedPieceLetter(\"N\"),\n    king: createPredefinedPieceLetter(\"K\")\n};\nexport const emptyLetter = createPredefinedPieceLetter(\"\");\nexport const duckLetter = createPredefinedPieceLetter(nonPlayablePieces.duck);\n","import { boardDimension } from \"@moveGeneration/GameInformation/GameData\";\nimport { verifyPieceLetter } from \"@moveGeneration/PieceControl/PieceControlInterface\";\nimport { bitCount } from \"@utils/NumberUtils\";\nexport const binaryMasks = Array(boardDimension)\n    .fill(1)\n    .map((v, i) => (v << boardDimension) | (v << (boardDimension - 1 - i)));\nexport const oneBitMask = 1 << boardDimension;\nexport function countBitsOnBoard(board) {\n    let setBits = 0;\n    for (let x = 0; x < boardDimension; x++) {\n        setBits += bitCount(board[x] ^ oneBitMask);\n    }\n    return setBits;\n}\nexport function findMinimumOnBoardSquares(board) {\n    let minimum = Infinity;\n    for (let i = 0; i < boardDimension; i++) {\n        for (let j = 0; j < boardDimension; j++) {\n            const setBits = countBitsOnBoard(board[i][j]);\n            if (setBits !== 0 && setBits < minimum) {\n                minimum = setBits;\n            }\n        }\n    }\n    return minimum;\n}\nexport function optimizePieceSet(possiblePieces, maximumTarget) {\n    const optimalRoyalMoveSets = [\n        [\"β\", \"W\", \"R\", \"E\", \"M\", \"Q\", \"D\", \"A\"],\n        [\"γ\", \"F\", \"B\", \"H\", \"M\", \"Q\", \"D\", \"A\", \"Δ\"],\n        [\"Y\", \"Z\"],\n        [\"I\", \"J\"],\n        [\"S\", \"T\"],\n        [\"S\", \"Y\"],\n        [\"I\", \"Y\"],\n        [\"U\", \"N\", \"O\"],\n        [\"H\", \"A\"],\n        [\"E\", \"A\"],\n        [\"Δ\", \"H\"],\n        [\"C\", \"L\"],\n        [\"C\", \"V\"]\n    ];\n    const moveSet = new Set();\n    for (const optimalMoveSet of optimalRoyalMoveSets) {\n        const detractionSet = maximumTarget ? optimalMoveSet.slice().reverse() : optimalMoveSet;\n        for (const piece of possiblePieces) {\n            if (detractionSet.includes(piece)) {\n                const target = detractionSet.slice(0, -detractionSet.indexOf(piece));\n                target.forEach((t) => {\n                    if (possiblePieces.includes(t) && verifyPieceLetter(t))\n                        moveSet.add(t);\n                });\n                break;\n            }\n        }\n    }\n    if (moveSet.size === 0) {\n        possiblePieces.forEach((p) => {\n            if (verifyPieceLetter(p))\n                moveSet.add(p);\n        });\n    }\n    return moveSet;\n}\n","export function shuffleArray(array) {\n    let i = array.length;\n    let r = 0;\n    while (i !== 0) {\n        r = Math.floor(Math.random() * i--);\n        [array[i], array[r]] = [array[r], array[i]];\n    }\n    return array;\n}\nexport function compareArrays(arr1, arr2) {\n    if (arr1 === arr2)\n        return true;\n    if (arr1.length !== arr2.length)\n        return false;\n    for (let i = 0; i < arr1.length; i++) {\n        const first = arr1[i], second = arr2[i];\n        if (Array.isArray(first) && Array.isArray(second)) {\n            if (!compareArrays(first, second))\n                return false;\n        }\n        else if (first !== second) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function countMinimumOf2DArrayExcludingZero(array) {\n    let minimum = Infinity;\n    for (const row of array) {\n        for (const number of row) {\n            if (number !== 0 && number < minimum) {\n                minimum = number;\n            }\n        }\n    }\n    return minimum;\n}\nexport function findLastIndex(array, callback) {\n    let i = array.length;\n    while (i--) {\n        if (callback(array[i], i, array))\n            return i;\n    }\n    return -1;\n}\n","export function truncateNumber(number, digits) {\n    const multiplier = Math.pow(10, digits);\n    const adjusted = number * multiplier;\n    if (adjusted < 0) {\n        return Math.ceil(adjusted / multiplier);\n    }\n    else {\n        return Math.floor(adjusted / multiplier);\n    }\n}\nexport function bitCount(number) {\n    number = number - ((number >> 1) & 0x55555555);\n    number = (number & 0x33333333) + ((number >> 2) & 0x33333333);\n    return (((number + (number >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","import { createTupleFromCallback } from \"@client/ts/baseTypes\";\nimport { initializeBoardSquares } from \"@client/ts/logic/BaseInterfaces\";\nimport { boardDimension, colors, totalPlayers } from \"@moveGeneration/GameInformation/GameData\";\nimport { countMinimumOf2DArrayExcludingZero } from \"@client/ts/utils/ArrayUtils\";\nimport { countBitsOnBoard } from \"./Utilities\";\nself.onmessage = (e) => {\n    const { walls, royalPieceSet, royalMoves, moveRegistryArray } = e.data;\n    const resultingMedianArray = createTupleFromCallback(() => initializeBoardSquares(() => 0), totalPlayers);\n    for (let i = 0; i < boardDimension; i++) {\n        for (let j = 0; j < boardDimension; j++) {\n            if (walls[i][j])\n                continue;\n            const moves = new Uint16Array(moveRegistryArray[i][j]);\n            for (const color of colors) {\n                if (royalPieceSet[color].length === 0) {\n                    resultingMedianArray[color] = undefined;\n                    continue;\n                }\n                else {\n                    let resultingSquares = 0;\n                    for (let royalI = 0; royalI < boardDimension; royalI++) {\n                        for (let royalJ = 0; royalJ < boardDimension; royalJ++) {\n                            const royalMoveSet = new Uint16Array(royalMoves[color][royalI][royalJ]);\n                            const result = moves.map((e, x) => e & royalMoveSet[x]);\n                            const newResultingSquares = countBitsOnBoard(result);\n                            if (newResultingSquares > resultingSquares) {\n                                resultingSquares = newResultingSquares;\n                            }\n                        }\n                    }\n                    const resultingMedian = resultingMedianArray[color];\n                    if (resultingMedian)\n                        resultingMedian[i][j] = resultingSquares;\n                }\n            }\n        }\n    }\n    postMessage(resultingMedianArray.map((arr) => {\n        if (arr) {\n            const minimum = countMinimumOf2DArrayExcludingZero(arr);\n            return minimum === Infinity ? 0 : minimum;\n        }\n        else\n            return arr;\n    }));\n};\n"],"names":["createTupleFromCallback","val","length","Array","from","initializeBoardSquares","baseValue","TimeControlType","VariantType","totalPlayers","boardDimension","colors","nonPlayablePieces","wall","transparentWall","duck","AttackType","Object","values","reduce","p","n","points","singlesPoints","teamsPoints","botFFAValue","botTeamsValue","piece","moveGenerationSettings","isComplex","isJumping","isSliding","isPawn","naming","name","shortName","fill","map","v","i","oneBitMask","countBitsOnBoard","board","setBits","x","countMinimumOf2DArrayExcludingZero","array","minimum","Infinity","row","number","bitCount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","self","onmessage","e","walls","royalPieceSet","royalMoves","moveRegistryArray","data","resultingMedianArray","j","moves","Uint16Array","color","resultingSquares","royalI","royalJ","royalMoveSet","result","newResultingSquares","resultingMedian","postMessage","arr"],"sourceRoot":""}